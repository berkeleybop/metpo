# baseURI: http://doi.org/10.1601/
# imports: http://doi.org/10.1601/media/
# imports: http://spinrdf.org/sp
# imports: http://spinrdf.org/spin
# imports: http://spinrdf.org/spl
# prefix: N4L

@prefix : <http://doi.org/10.1601/> .
@prefix N4L: <http://doi.org/10.1601/> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix media: <http://doi.org/10.1601/media/> .
@prefix obo: <http://purl.obolibrary.org/obo/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix ss: <http://dx.doi.org/10.1601/ns/spinsquare#> .
@prefix uo: <http://purl.obolibrary.org/obo/uo.owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

N4L:
  rdf:type owl:Ontology ;
  rdfs:comment "Implements phenotype of strains. "^^xsd:string ;
  owl:imports media: ;
  owl:imports <http://spinrdf.org/sp> ;
  owl:imports <http://spinrdf.org/spin> ;
  owl:imports <http://spinrdf.org/spl> ;
  owl:versionInfo "1.0"^^xsd:string ;
.
N4L:AcidProduction
  rdf:type rdfs:Class ;
  rdfs:label "Acid production"^^xsd:string ;
  rdfs:subClassOf N4L:SubstanceProduction ;
.
N4L:Acidophile
  rdf:type rdfs:Class ;
  rdfs:label "Acidophile"^^xsd:string ;
  rdfs:subClassOf N4L:PHPhenotype ;
.
N4L:Aerobe
  rdf:type rdfs:Class ;
  rdfs:label "Aerobe"^^xsd:string ;
  rdfs:subClassOf N4L:OxygenPhenotype ;
  owl:disjointWith N4L:Anaerobe ;
.
N4L:Aerobic
  rdf:type rdfs:Class ;
  rdfs:label "Aerobic"^^xsd:string ;
  rdfs:subClassOf N4L:OxygenCondition ;
.
N4L:AerobicAcidProduction
  rdf:type rdfs:Class ;
  rdfs:label "Aerobic acid production"^^xsd:string ;
  rdfs:subClassOf N4L:AcidProduction ;
.
N4L:AerotolerantAnaerobe
  rdf:type rdfs:Class ;
  rdfs:label "Aerotolerant anaerobe"^^xsd:string ;
  rdfs:subClassOf N4L:Anaerobe ;
.
N4L:Air
  rdf:type rdfs:Class ;
  rdfs:label "Air"^^xsd:string ;
  rdfs:subClassOf N4L:OxygenCondition ;
.
N4L:Alkalophile
  rdf:type rdfs:Class ;
  rdfs:label "Alkalophile"^^xsd:string ;
  rdfs:subClassOf N4L:PHPhenotype ;
.
N4L:AnabolicReaction
  rdf:type rdfs:Class ;
  rdfs:label "Energy source"^^xsd:string ;
  rdfs:subClassOf N4L:Utilization ;
.
N4L:Anaerobe
  rdf:type rdfs:Class ;
  rdfs:label "Anaerobe"^^xsd:string ;
  rdfs:subClassOf N4L:OxygenPhenotype ;
.
N4L:AnaerobicRespiration
  rdf:type rdfs:Class ;
  rdfs:label "Anaerobic respiration"^^xsd:string ;
  rdfs:subClassOf N4L:MetabolismPhenotype ;
.
N4L:Anoxic
  rdf:type rdfs:Class ;
  rdfs:label "Anoxic"^^xsd:string ;
  rdfs:subClassOf N4L:OxygenCondition ;
.
N4L:AntimicrobialPhenotype
  rdf:type rdfs:Class ;
  rdfs:label "Antimicrobial phenotype"^^xsd:string ;
  rdfs:subClassOf N4L:Phenotype ;
.
N4L:AntimicrobialPhenotypeVsAntimicrobialGroupConstraint
  rdf:type spin:ConstructTemplate ;
  spin:abstract "true"^^xsd:boolean ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b53230 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b53230 ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b53230 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b53230 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b53230 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "ph"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                      sp:predicate rdfs:subClassOf ;
                      sp:subject [
                          sp:varName "type"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object owl:Restriction ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object media:isMemberOfAntimicrobialGroup ;
                      sp:predicate owl:onProperty ;
                      sp:subject [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "group"^^xsd:string ;
                        ] ;
                      sp:predicate owl:allValuesFrom ;
                      sp:subject [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "2: " ;
                sp:arg2 "Given strain has property " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " to a given chemical entity, but that chemical entity is not member of an antimicrobial group." ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint _:b16527 ;
  spin:labelTemplate "T2: Strain has {?templateProperty} to a chemical entity, but that chemical entity is not member of an antimicrobial group."^^xsd:string ;
  rdfs:label "Antimicrobial Phenotype Vs Antimicrobial Group Constraint"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:AntimicrobialPhenotypeVsMixture
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b15930 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b15930 ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b15930 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b15930 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b15930 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "ph"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "comCond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ingredient"^^xsd:string ;
              ] ;
            sp:predicate media:containsIngredient ;
            sp:subject [
                sp:varName "comCond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate media:hasSubstance ;
            sp:subject [
                sp:varName "ingredient"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "otherType"^^xsd:string ;
                    ] ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "sub"^^xsd:string ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "?0"^^xsd:string ;
                    ] ;
                  sp:predicate rdfs:subClassOf ;
                  sp:subject [
                      sp:varName "otherType"^^xsd:string ;
                    ] ;
                ]
                [
                  sp:object owl:Restriction ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "?0"^^xsd:string ;
                    ] ;
                ]
                [
                  sp:object media:isMemberOfAntimicrobialGroup ;
                  sp:predicate owl:onProperty ;
                  sp:subject [
                      sp:varName "?0"^^xsd:string ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "group"^^xsd:string ;
                    ] ;
                  sp:predicate owl:allValuesFrom ;
                  sp:subject [
                      sp:varName "?0"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:bound ;
                    sp:arg1 [
                        sp:varName "otherType"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "3: " ;
                sp:arg2 "Given strain has property " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " to a mixture (not including media), but that mixture contains a chemical entity that is not member of an antimicrobial group." ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint _:b16527 ;
  spin:labelTemplate "T3: Strain has {?templateProperty} to a mixture (not including media), but that mixture contains a chemical entity is not member of an antimicrobial group."^^xsd:string ;
  rdfs:label "Antimicrobial phenotype vs mixture"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:Assimilation
  rdf:type rdfs:Class ;
  rdfs:label "Assimilate"^^xsd:string ;
  rdfs:subClassOf N4L:Utilization ;
.
N4L:AssimilationAcidAndGasProduction
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b84660 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b84660 ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b84660 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b84660 ;
          ]
          [
            sp:object [
                sp:varName "dres2"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b84660 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b84660 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "obs2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "utl2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject [
                sp:varName "utl2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "utl1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject [
                sp:varName "utl1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "utl1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "utl2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "sub2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "sub1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres2"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs2"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "4: " ;
                sp:arg2 "Given strain can not have property " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " and " ;
                sp:arg5 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "otherTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg6 " of the same substance." ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T4: Strain has {?templateProperty} and {?otherTemplateProperty} of the same substance."^^xsd:string ;
  rdfs:label "Assimilation acid and gas production"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:AtomicObservation
  rdf:type rdfs:Class ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasAerobicCondition ;
      N4L:templateProperty N4L:hasCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:Aerobic ;
      rdfs:comment "# R(63) Infers N4L:hasAerobicCondition from N4L:hasCondition and N4L:Aerobic."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasAirCondition ;
      N4L:templateProperty N4L:hasCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:Air ;
      rdfs:comment "# R(64) Infers N4L:hasAirCondition from N4L:hasCondition and N4L:Air."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasAnoxicCondition ;
      N4L:templateProperty N4L:hasCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:Anoxic ;
      rdfs:comment "# R(65) Infers N4L:hasAnoxicCondition from N4L:hasCondition and N4L:Anoxic."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasExtremeHighTemperatureCondition ;
      N4L:templateProperty N4L:hasCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:ExtremeHighTemperatureCondition ;
      rdfs:comment "# R(66) Infers N4L:hasExtremeHighTemperatureCondition from N4L:hasCondition and N4L:ExtremeHighTemperatureCondition."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasExtremeLowTemperatureCondition ;
      N4L:templateProperty N4L:hasCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:ExtremeLowTemperatureCondition ;
      rdfs:comment "# R(67) Infers N4L:hasExtremeLowTemperatureCondition from N4L:hasCondition and N4L:ExtremeLowTemperatureCondition."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasHighPHCondition ;
      N4L:templateProperty N4L:hasCondition ;
      spl:valueType N4L:HighPHCondition ;
      rdfs:comment "# R(123) Infers N4L:hasHighPHCondition from N4L:hasCondition and N4L:HighPHCondition."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasHighTemperatureCondition ;
      N4L:templateProperty N4L:hasCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:HighTemperatureCondition ;
      rdfs:comment "# R(113) Infers N4L:hasHighTemperatureCondition from N4L:hasCondition and N4L:HighTemperatureCondition."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasLowPHCondition ;
      N4L:templateProperty N4L:hasCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:LowPHCondition ;
      rdfs:comment "# R(121) Infers N4L:hasLowPHCondition from N4L:hasCondition and N4L:LowPHCondition."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasLowTemperatureCondition ;
      N4L:templateProperty N4L:hasCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:LowTemperatureCondition ;
      rdfs:comment "# R(114) Infers N4L:hasLowTemperatureCondition from N4L:hasCondition and N4L:LowTemperatureCondition."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:templateProperty N4L:hasCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:Microaerobic ;
      rdfs:comment "# R(68) Infers N4L:hasMicroaerobicCondition from N4L:hasCondition and N4L:Microaerobic."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasMidRangeTemperatureCondition ;
      N4L:templateProperty N4L:hasCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:MidRangeTemperatureCondition ;
      rdfs:comment "# R(69) Infers N4L:hasMidRangeTemperatureCondition from N4L:hasCondition and N4L:MidRangeTemperatureCondition."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasModerateHighTemperatureCondition ;
      N4L:templateProperty N4L:hasCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:ModerateHighTemperatureCondition ;
      rdfs:comment "# R(70) Infers N4L:hasModerateHighTemperatureCondition from N4L:hasCondition and N4L:ModerateHighTemperatureCondition."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasModerateLowTemperatureCondition ;
      N4L:templateProperty N4L:hasCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:ModerateLowTemperatureCondition ;
      rdfs:comment "# R(71) Infers N4L:hasModerateLowTemperatureCondition from N4L:hasCondition and N4L:ModerateLowTemperatureCondition."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasNeutralPHCondition ;
      N4L:templateProperty N4L:hasCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:NeutralPHCondition ;
      rdfs:comment "# R(122) Infers N4L:hasNeutralPHCondition from N4L:hasCondition and N4L:NeutralPHCondition."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasOxygenCondition ;
      N4L:templateProperty N4L:hasCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:OxygenCondition ;
      rdfs:comment "# R(72) Infers N4L:hasOxygenCondition from N4L:hasCondition and N4L:OxygenCondition."^^xsd:string ;
    ] ;
  rdfs:label "Atomic observation"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
N4L:Carboxysome
  rdf:type rdfs:Class ;
  rdfs:label "Carboxysome"^^xsd:string ;
  rdfs:subClassOf N4L:InclusionBodyObservation ;
.
N4L:CatabolicReaction
  rdf:type rdfs:Class ;
  rdfs:label "Catabolic reaction"^^xsd:string ;
  rdfs:subClassOf N4L:Utilization ;
.
N4L:CellShapeModifier
  rdf:type rdfs:Class ;
  rdfs:label "Cell shape modifier"^^xsd:string ;
  rdfs:subClassOf N4L:ShapeModifier ;
.
N4L:CellShapeObservation
  rdf:type rdfs:Class ;
  rdfs:label "Shape observation"^^xsd:string ;
  rdfs:subClassOf N4L:AtomicObservation ;
.
N4L:CellularActivity
  rdf:type rdfs:Class ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "fer"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasFermentationOfSubstance ;
            sp:subject spin:_this ;
          ]
          [
            sp:object N4L:Fermentation ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "fer"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject spin:_this ;
          ]
          [
            sp:object N4L:Fermentation ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(78) Infers property N4L:hasFermentationOfSubstance based on range of property N4L:hasCellularActivityOfSubstance.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "res"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespirationOfSubstance ;
            sp:subject spin:_this ;
          ]
          [
            sp:object N4L:Respiration ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "res"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject spin:_this ;
          ]
          [
            sp:object N4L:Respiration ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(79) Infers property N4L:hasRespirationOfSubstance based on range of property N4L:hasCellularActivityOfSubstance.#"^^xsd:string ;
    ] ;
  rdfs:label "Cellular activity"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
N4L:CellularActivityVsMembershipOfSubstanceGroup
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b11005 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b11005 ;
          ]
          [
            sp:object [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b11005 ;
          ]
          [
            sp:object [
                sp:varName "dres"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b11005 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b11005 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "utl"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject [
                sp:varName "utl"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "substance"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "utl"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "18: " ;
                sp:arg2 "Given strain can not have property " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " of substance " ;
                sp:arg5 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg6 ", because the substance is member of a group over property " ;
                sp:arg7 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "otherTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/media/" ;
                  ] ;
                sp:arg8 "." ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T18: Strain can not have property {?templateProperty} of a substance that is member of a group over property {?otherTemplateProperty}."^^xsd:string ;
  rdfs:label "Cellular activity vs membership of substance group"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:CellularActivityVsNoMembershipOfSubstanceGroup
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b3005 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b3005 ;
          ]
          [
            sp:object [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b3005 ;
          ]
          [
            sp:object [
                sp:varName "dres"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b3005 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b3005 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "utl"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject [
                sp:varName "utl"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                      sp:predicate rdfs:subClassOf ;
                      sp:subject [
                          sp:varName "type"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object owl:Restriction ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "otherTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:predicate owl:onProperty ;
                      sp:subject [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "substance"^^xsd:string ;
                        ] ;
                      sp:predicate owl:allValuesFrom ;
                      sp:subject [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "utl"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "16: " ;
                sp:arg2 "Given strain can not have property " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " of substance " ;
                sp:arg5 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg6 ", because the substance is not member of a group over property " ;
                sp:arg7 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "otherTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/media/" ;
                  ] ;
                sp:arg8 "." ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T16: Strain can not have observation ({?templateProperty}) of a substance {?type} that is not member of {?otherTemplateProperty}."^^xsd:string ;
  rdfs:label "Cellular activity vs substance group membership"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:Colony
  rdf:type rdfs:Class ;
  rdfs:label "Colony"^^xsd:string ;
  rdfs:subClassOf N4L:Organism ;
.
N4L:Condition
  rdf:type rdfs:Class ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "val"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOxygenValue ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:OxygenCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "val"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:OxygenCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(81) infers \"hasOxygenValue\" datatype property based on \"hasEnvironmentalConditionValue\" datatype property.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "val"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhEnvironmentalCondition ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:PHCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "val"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:PHCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(82) infers \"hasPhEnvironmentalCondition\" datatype property based on \"hasEnvironmentalConditionValue\" datatype property.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "val"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasTemperatureValue ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:TemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "val"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:TemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(83) infers \"hasTemperatureValue\" datatype property based on \"hasEnvironmentalConditionValue\" datatype property.#"^^xsd:string ;
    ] ;
  rdfs:label "Condition"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
N4L:DirectObservation
  rdf:type rdfs:Class ;
  rdfs:label "Direct observation"^^xsd:string ;
  rdfs:subClassOf N4L:OrganismObservation ;
.
N4L:Disc
  rdf:type rdfs:Class ;
  rdfs:label "Disk"^^xsd:string ;
  rdfs:subClassOf N4L:Method ;
.
N4L:DisjointnessCellularActivityAndSubstance
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b81876 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b81876 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b81876 ;
          ]
          [
            sp:object [
                sp:varName "valueType"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b81876 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b81876 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "res"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject [
                sp:varName "res"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "valueType"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "12: " ;
                sp:arg2 "Given strain can not have property " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " of  " ;
                sp:arg5 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "valueType"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg6 " substance." ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate spl:valueType ;
      spl:valueType rdfs:Class ;
    ] ;
  spin:labelTemplate "T12: Strain can not have property {?templateProperty} of {?valueType} substance."^^xsd:string ;
  rdfs:label "disjointness cellular activity and substance"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:DisjointnessOfGrowthObservation
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b88856 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b88856 ;
          ]
          [
            sp:object [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b88856 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b88856 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b88856 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "go1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "go1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "go2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "secondTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "go2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "1:" ;
                sp:arg2 "Given strain can not have " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " and " ;
                sp:arg5 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "secondTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg6 " under condition property " ;
                sp:arg7 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "otherTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:secondTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T1: Given strain can not have ({?templateProperty}) and ({?secondTemplateProperty}) under condition property {?otherTemplateProperty}"^^xsd:string ;
  rdfs:label "Disjointness of growth observation"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:DisjointnessOfGrowthObservationsTemperatureCondition
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b39827 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b39827 ;
          ]
          [
            sp:object [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b39827 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b39827 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b39827 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "go1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCondition ;
            sp:subject [
                sp:varName "go1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "valueType"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "val1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "go2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "secondTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCondition ;
            sp:subject [
                sp:varName "go2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "valueType"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "val2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    sp:varName "val1"^^xsd:string ;
                  ] ;
                sp:arg2 [
                    sp:varName "val2"^^xsd:string ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "go1"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "go2"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "cond1"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "cond2"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "50:" ;
                sp:arg10 ")" ;
                sp:arg2 "Given strain can not have (" ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " under temperature conditions " ;
                sp:arg5 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "val1"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg6 ") and  (" ;
                sp:arg7 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "secondTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg8 " under temperature conditions " ;
                sp:arg9 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "val2"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:secondTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate spl:valueType ;
      spl:valueType rdfs:Class ;
    ] ;
  spin:labelTemplate "T50: Strain can not have observations ({?templateProperty} and {?secondTemplateProperty}) under the same {?valueType} conditions."^^xsd:string ;
  rdfs:label "Disjointness of growth observations temperature condition"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:DisjointnessOfOptimalGrowthInTwoConditions
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b7810 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b7810 ;
          ]
          [
            sp:object [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b7810 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b7810 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b7810 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "go1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "go1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "go2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "secondTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thirdTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "go2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "34:" ;
                sp:arg10 " ) ." ;
                sp:arg2 "Given strain can not have (" ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " , " ;
                sp:arg5 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "otherTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg6 " ), and observation (" ;
                sp:arg7 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "secondTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg8 " , " ;
                sp:arg9 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "thirdTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:secondTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:thirdTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T34: Strain can not have observation ({?templateProperty},{?otherTemplateProperty}) and observation ({?secondTemplateProperty}, {?thirdTemplateProperty}). "^^xsd:string ;
  rdfs:label "Disjointness of optimal growth in two conditions"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:DisjointnessOfPhenotype
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b13930 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b13930 ;
          ]
          [
            sp:object [
                sp:varName "defaultValue"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b13930 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b13930 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b13930 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "p1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "valueType"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "defaultValue"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "9:" ;
                sp:arg2 "Given strain can not have " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "valueType"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " and " ;
                sp:arg5 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "defaultValue"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg6 " phenotype" ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate spl:defaultValue ;
      spl:valueType rdfs:Class ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate spl:valueType ;
      spl:valueType rdfs:Class ;
    ] ;
  spin:labelTemplate "T9: Strain {?this} can not have {?valueType} and {?defaultValue} phenotype."^^xsd:string ;
  rdfs:label "Disjointness of phenotype"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:DisjointnessOfPhenotypeAndCellularActivityOfSubstance
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b63358 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b63358 ;
          ]
          [
            sp:object [
                sp:varName "valueType"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b63358 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b63358 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b63358 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "p1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "valueType"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "g1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "defaultValue"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "13:" ;
                sp:arg2 "Given strain can not have " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "valueType"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 "  phenotype and observation ( " ;
                sp:arg5 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg6 " of " ;
                sp:arg7 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "defaultValue"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg8 " )" ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate spl:defaultValue ;
      spl:valueType rdfs:Class ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate spl:valueType ;
      spl:valueType rdfs:Class ;
    ] ;
  spin:labelTemplate "T13: Given strain can not have {?valueType} phenotype and observation ({?templateProperty}, {?defaultValue})."^^xsd:string ;
  rdfs:label "Disjointness of phenotype and cellular activity of substance"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:DisjointnessOfPhenotypeAndGrowthCondition
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b89768 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b89768 ;
          ]
          [
            sp:object [
                sp:varName "valueType"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b89768 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b89768 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b89768 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "p1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "valueType"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "g1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "g1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "7:" ;
                sp:arg2 "Given strain can not have " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "valueType"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " phenotype and observation (" ;
                sp:arg5 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg6 ", " ;
                sp:arg7 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "otherTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg8 " )" ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate spl:valueType ;
      spl:valueType rdfs:Class ;
    ] ;
  spin:labelTemplate "T7: Strain can not have  {?valueType} phenotype and observation ({?templateProperty}, {?otherTemplateProperty})."^^xsd:string ;
  rdfs:label "Disjointness of phenotype and growth condition"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:DisjointnessOfSubstanceGroup
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b40382 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b40382 ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b40382 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b40382 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b40382 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group1"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?1"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group2"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "groupA"^^xsd:string ;
                    ] ;
                  sp:predicate [
                      sp:varName "templateProperty"^^xsd:string ;
                    ] ;
                  sp:subject [
                      sp:varName "sub"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "groupB"^^xsd:string ;
                    ] ;
                  sp:predicate [
                      sp:varName "otherTemplateProperty"^^xsd:string ;
                    ] ;
                  sp:subject [
                      sp:varName "sub"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "20:" ;
                sp:arg2 "Strain has observation for a given substance " ;
                sp:arg3 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg4 " that can not be member of " ;
                sp:arg5 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg6 " and " ;
                sp:arg7 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "otherTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg8 " ) groups." ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T20: A strain has an observation for a substance that can not be member of {?templateProperty} and {?otherTemplateProperty} groups."^^xsd:string ;
  rdfs:label "Disjointness of substance group"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:DocumentResource
  rdf:type rdfs:Class ;
  rdfs:label "Document resource"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
N4L:ExperimentalEnvironment
  rdf:type rdfs:Class ;
  rdfs:label "Environment"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
N4L:ExtremeHighTemperatureCondition
  rdf:type rdfs:Class ;
  rdfs:label "Extreme high temperature condition"^^xsd:string ;
  rdfs:subClassOf N4L:HighTemperatureCondition ;
  owl:disjointWith N4L:ModerateHighTemperatureCondition ;
.
N4L:ExtremeLowTemperatureCondition
  rdf:type rdfs:Class ;
  rdfs:label "Extreme low temperature condition"^^xsd:string ;
  rdfs:subClassOf N4L:LowTemperatureCondition ;
.
N4L:ExtremePsychrophile
  rdf:type rdfs:Class ;
  rdfs:label "Extreme psychrophile"^^xsd:string ;
  rdfs:subClassOf N4L:Psychrophile ;
.
N4L:FacultativeAnaerobe
  rdf:type rdfs:Class ;
  rdfs:label "Facultative anaerobe"^^xsd:string ;
  rdfs:subClassOf N4L:MetabolismPhenotype ;
.
N4L:Feature
  rdf:type rdfs:Class ;
  rdfs:label "Feature"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
N4L:Fermentation
  rdf:type rdfs:Class ;
  rdfs:label "Fermentation"^^xsd:string ;
  rdfs:subClassOf N4L:Utilization ;
.
N4L:FermentationRespirationOfTheSameSubstance
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b76801 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b76801 ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b76801 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b76801 ;
          ]
          [
            sp:object [
                sp:varName "dres2"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b76801 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b76801 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "obs2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "utl2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject [
                sp:varName "utl2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "utl1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject [
                sp:varName "utl1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type2"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfOrganicCompoundGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "utl1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "utl2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "sub2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "sub1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres2"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs2"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "5: " ;
                sp:arg2 "Given strain can not have property " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " and " ;
                sp:arg5 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "otherTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg6 " of the same substance (only for those who are members of organic compound group)." ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T5: Given strain can not have {?templateProperty} of substance and {?otherTemplateProperty} of the same substance (only for those who are members of organic compound group)."^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:FlagellaDistribution
  rdf:type rdfs:Class ;
  rdfs:label "Flagella distribution"^^xsd:string ;
  rdfs:subClassOf N4L:FlagellaFeature ;
.
N4L:FlagellaFeature
  rdf:type rdfs:Class ;
  rdfs:label "Flagella feature"^^xsd:string ;
  rdfs:subClassOf N4L:Feature ;
.
N4L:FlagellaObservation
  rdf:type rdfs:Class ;
  rdfs:label "Flagella observation"^^xsd:string ;
  rdfs:subClassOf N4L:AtomicObservation ;
.
N4L:FlagellaOrdinal
  rdf:type rdfs:Class ;
  rdfs:label "Flagella ordinal"^^xsd:string ;
  rdfs:subClassOf N4L:FlagellaFeature ;
.
N4L:Flagellation
  rdf:type rdfs:Class ;
  rdfs:label "Flagellation"^^xsd:string ;
  rdfs:subClassOf N4L:FormOfMotility ;
.
N4L:FormOfMotility
  rdf:type rdfs:Class ;
  rdfs:label "Form of motility"^^xsd:string ;
  rdfs:subClassOf N4L:Feature ;
.
N4L:GasProduction
  rdf:type rdfs:Class ;
  rdfs:label "Gas production"^^xsd:string ;
  rdfs:subClassOf N4L:SubstanceProduction ;
.
N4L:GasVacuole
  rdf:type rdfs:Class ;
  rdfs:label "Gas vacuole"^^xsd:string ;
  rdfs:subClassOf N4L:InclusionBodyObservation ;
.
N4L:Gliding
  rdf:type rdfs:Class ;
  rdfs:label "Gliding"^^xsd:string ;
  rdfs:subClassOf N4L:FormOfMotility ;
.
N4L:Growth
  rdf:type rdfs:Class ;
  rdfs:label "growth"^^xsd:string ;
  rdfs:subClassOf N4L:GrowthObservation ;
  owl:disjointWith N4L:NoGrowth ;
.
N4L:GrowthObservation
  rdf:type rdfs:Class ;
  rdfs:label "Growth observation"^^xsd:string ;
  rdfs:subClassOf N4L:AtomicObservation ;
.
N4L:GrowthObservationInAerobicAndOneOtherCondition
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b36425 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b36425 ;
          ]
          [
            sp:object [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b36425 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b36425 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b36425 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "go1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAerobicCondition ;
            sp:subject [
                sp:varName "go1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "go2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thirdTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "fourthTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "go2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "63: " ;
                sp:arg2 "Given strain has observations ( " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "thirdTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 ", " ;
                sp:arg5 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "fourthTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg6 " ), and ( " ;
                sp:arg7 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg8 ",  hasAerobicCondition ). Aerobic condition may be defined more precelly as air or microaerobic." ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "go1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:composedOf ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond1"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "otherTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "go1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "go1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:composedOf ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond1"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "secondTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "go1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:fourthTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:secondTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:thirdTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T63: Given strain has observations ({?thirdTemplateProperty},  {?fourthTemplateProperty})  and ({?templateProperty},  hasAerobicCondition). Aerobic condition may be defined more precelly as air or microaerobic."^^xsd:string ;
  rdfs:label "Growth observation aerobic and one other condition"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:GrowthObservationInConditionUnderCellularActivityForSubstance
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b63646 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b63646 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b63646 ;
          ]
          [
            sp:object [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b63646 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b63646 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "gr"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "secondTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thirdTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "gr"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "obs2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "ca"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "ca"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "defaultValue"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "ca"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "sub"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "22: " ;
                sp:arg10 " : " ;
                sp:arg11 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "defaultValue"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg12 " )]." ;
                sp:arg2 "Given strain can not have observation [(" ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "secondTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " , " ;
                sp:arg5 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "thirdTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg6 ") and (" ;
                sp:arg7 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg8 " , " ;
                sp:arg9 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "otherTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:secondTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:thirdTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate spl:defaultValue ;
      spl:valueType rdfs:Class ;
    ] ;
  spin:labelTemplate "T22: Strain can not have observation ({?secondTemplateProperty}, {?thirdTemplateProperty}) and {?templateProperty} for {?defaultValue}."^^xsd:string ;
  rdfs:label "Growth in anoxic condition under cellular activity for oxygen"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:GrowthObservationOfTheSameSubstance
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b58071 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b58071 ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b58071 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b58071 ;
          ]
          [
            sp:object [
                sp:varName "dres2"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b58071 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b58071 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "obs2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "utl2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "utl2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "val2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "sub2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "unit2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasUnit ;
            sp:subject [
                sp:varName "sub2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "typeUnit"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "unit2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "utl1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "utl1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "val1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "unit1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasUnit ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "typeUnit"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "unit1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    sp:varName "val1"^^xsd:string ;
                  ] ;
                sp:arg2 [
                    sp:varName "val2"^^xsd:string ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "utl1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "utl2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "sub2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "sub1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres2"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs2"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "8: " ;
                sp:arg2 "Given strain can not have property " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " and " ;
                sp:arg5 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "otherTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg6 " of the same substance (the same value and unit)." ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T8: Given strain can not have {?templateProperty} and {?otherTemplateProperty} of the same substance."^^xsd:string ;
  rdfs:label "Growth condition of the same substance"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:HighPHCondition
  rdf:type rdfs:Class ;
  rdfs:label "High PHCondition"^^xsd:string ;
  rdfs:subClassOf N4L:PHCondition ;
.
N4L:HighTemperatureCondition
  rdf:type rdfs:Class ;
  rdfs:label "High temperature condition"^^xsd:string ;
  rdfs:subClassOf N4L:TemperatureCondition ;
.
N4L:HighlyMotile
  rdf:type rdfs:Class ;
  rdfs:label "Highly motile"^^xsd:string ;
  rdfs:subClassOf N4L:MotilityModifier ;
.
N4L:Hyperthermophile
  rdf:type rdfs:Class ;
  rdfs:label "Hyperthermophile"^^xsd:string ;
  rdfs:subClassOf N4L:Thermophile ;
.
N4L:InclusionBodyObservation
  rdf:type rdfs:Class ;
  rdfs:label "Inclusion body observation"^^xsd:string ;
  rdfs:subClassOf N4L:AtomicObservation ;
.
N4L:IndirectObservation
  rdf:type rdfs:Class ;
  rdfs:label "Indirect observation"^^xsd:string ;
  rdfs:subClassOf N4L:OrganismObservation ;
.
N4L:InhibitedGrowth
  rdf:type rdfs:Class ;
  rdfs:subClassOf N4L:InhibitedGrowthObservation ;
  owl:disjointWith N4L:UninhibitedGrowth ;
.
N4L:InhibitedGrowthObservation
  rdf:type rdfs:Class ;
  rdfs:subClassOf N4L:GrowthObservation ;
.
N4L:LipidDroplet
  rdf:type rdfs:Class ;
  rdfs:label "Lipid droplet"^^xsd:string ;
  rdfs:subClassOf N4L:InclusionBodyObservation ;
.
N4L:LowPHCondition
  rdf:type rdfs:Class ;
  rdfs:label "Low PHCondition"^^xsd:string ;
  rdfs:subClassOf N4L:PHCondition ;
.
N4L:LowTemperatureCondition
  rdf:type rdfs:Class ;
  rdfs:label "Low temperature condition"^^xsd:string ;
  rdfs:subClassOf N4L:TemperatureCondition ;
.
N4L:Magnetosome
  rdf:type rdfs:Class ;
  rdfs:label "Magnetosome"^^xsd:string ;
  rdfs:subClassOf N4L:InclusionBodyObservation ;
.
N4L:Mesophile
  rdf:type rdfs:Class ;
  rdfs:label "Mesophile"^^xsd:string ;
  rdfs:subClassOf N4L:TemperaturePhenotype ;
  owl:disjointWith N4L:Psychrophile ;
  owl:disjointWith N4L:Thermophile ;
.
N4L:Metabolism
  rdf:type rdfs:Class ;
  rdfs:label "Metabolism"^^xsd:string ;
  rdfs:subClassOf N4L:CellularActivity ;
.
N4L:MetabolismPhenotype
  rdf:type rdfs:Class ;
  rdfs:label "Metabolism phenotype"^^xsd:string ;
  rdfs:subClassOf N4L:Phenotype ;
.
N4L:Method
  rdf:type rdfs:Class ;
  rdfs:label "Method"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
N4L:Microaerobic
  rdf:type rdfs:Class ;
  rdfs:label "Microaerobic"^^xsd:string ;
  rdfs:subClassOf N4L:OxygenCondition ;
.
N4L:Microaerophilic
  rdf:type rdfs:Class ;
  rdfs:label "Microaerophilic"^^xsd:string ;
  rdfs:subClassOf N4L:Aerobe ;
.
N4L:Microorganism
  rdf:type rdfs:Class ;
  rdfs:label "Microorganism"^^xsd:string ;
  rdfs:subClassOf N4L:Organism ;
.
N4L:Microscopy
  rdf:type rdfs:Class ;
  rdfs:label "Microscopy"^^xsd:string ;
  rdfs:subClassOf N4L:Method ;
.
N4L:MidRangeTemperatureCondition
  rdf:type rdfs:Class ;
  rdfs:label "Mid range temperature condition"^^xsd:string ;
  rdfs:subClassOf N4L:TemperatureCondition ;
.
N4L:ModerateHighTemperatureCondition
  rdf:type rdfs:Class ;
  rdfs:label "Moderate high temperature condition"^^xsd:string ;
  rdfs:subClassOf N4L:HighTemperatureCondition ;
.
N4L:ModerateLowTemperatureCondition
  rdf:type rdfs:Class ;
  rdfs:label "Moderate low temperature condition"^^xsd:string ;
  rdfs:subClassOf N4L:LowTemperatureCondition ;
  owl:disjointWith N4L:ExtremeLowTemperatureCondition ;
.
N4L:Modifier
  rdf:type rdfs:Class ;
  rdfs:label "Modifier"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
N4L:Motile
  rdf:type rdfs:Class ;
  rdfs:label "Motile"^^xsd:string ;
  rdfs:subClassOf N4L:MotilityObservation ;
.
N4L:MotilityModifier
  rdf:type rdfs:Class ;
  rdfs:label "Motility modifier"^^xsd:string ;
  rdfs:subClassOf N4L:Modifier ;
.
N4L:MotilityObservation
  rdf:type rdfs:Class ;
  rdfs:label "Motility"^^xsd:string ;
  rdfs:subClassOf N4L:AtomicObservation ;
.
N4L:NeutralPHCondition
  rdf:type rdfs:Class ;
  rdfs:label "Neutral PHCondition"^^xsd:string ;
  rdfs:subClassOf N4L:PHCondition ;
.
N4L:Neutrophile
  rdf:type rdfs:Class ;
  rdfs:label "Neutrophile"^^xsd:string ;
  rdfs:subClassOf N4L:PHPhenotype ;
.
N4L:NoAcidProduction
  rdf:type rdfs:Class ;
  rdfs:label "No acid production"^^xsd:string ;
  rdfs:subClassOf N4L:SubstanceProduction ;
.
N4L:NoAssimilation
  rdf:type rdfs:Class ;
  rdfs:label "No assimilate"^^xsd:string ;
  rdfs:subClassOf N4L:NoUtilization ;
.
N4L:NoFermentation
  rdf:type rdfs:Class ;
  rdfs:label "No fermentation"^^xsd:string ;
  rdfs:subClassOf N4L:NoUtilization ;
.
N4L:NoGasProduction
  rdf:type rdfs:Class ;
  rdfs:label "No gas production"^^xsd:string ;
  rdfs:subClassOf N4L:SubstanceProduction ;
.
N4L:NoGrowth
  rdf:type rdfs:Class ;
  rdfs:label "No growth"^^xsd:string ;
  rdfs:subClassOf N4L:GrowthObservation ;
  owl:disjointWith N4L:Growth ;
.
N4L:NoRespiration
  rdf:type rdfs:Class ;
  rdfs:label "No respiration"^^xsd:string ;
  rdfs:subClassOf N4L:NoUtilization ;
.
N4L:NoUtilization
  rdf:type rdfs:Class ;
  rdfs:label "No utilization"^^xsd:string ;
  rdfs:subClassOf N4L:SubstrateUtilization ;
.
N4L:NoUtilizationVsBiologicalRole
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b82359 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b82359 ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b82359 ;
          ]
          [
            sp:object [
                sp:varName "dres"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b82359 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b82359 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "noUtl"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thirdTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "noUtl"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cs1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "noUtl"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "cs1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "6: " ;
                sp:arg2 "Given strain can not have " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "otherTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " of substance " ;
                sp:arg5 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg6 " that has property " ;
                sp:arg7 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/media/" ;
                  ] ;
                sp:arg8 " as biological role." ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:thirdTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T6: Strain can not have {?otherTemplateProperty} of a substance {?type} that has property {?templateProperty} as biological role."^^xsd:string ;
  rdfs:label "No utilization vs biological role"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:NonMotile
  rdf:type rdfs:Class ;
  rdfs:label "Non motile"^^xsd:string ;
  rdfs:subClassOf N4L:MotilityObservation ;
.
N4L:None
  rdf:type rdfs:Class ;
  rdfs:label "None"^^xsd:string ;
  rdfs:subClassOf N4L:Method ;
.
N4L:OptimalGrowth
  rdf:type rdfs:Class ;
  rdfs:label "Optimal growth"^^xsd:string ;
  rdfs:subClassOf N4L:Growth ;
.
N4L:OptimalGrowthUnderDifferentCondition
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b99818 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b99818 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b99818 ;
          ]
          [
            sp:object [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b99818 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b99818 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "g1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOptimalGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "g1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOptimalGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "g2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "51:" ;
                sp:arg2 "Given strain can not have observations ( N4L:hasOptimalGrowth" ;
                sp:arg3 " and " ;
                sp:arg4 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg5 " ) and ( N4L:hasOptimalGrowth " ;
                sp:arg6 " and " ;
                sp:arg7 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "otherTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg8 " )" ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T51: Strain can not have observations N4L:OptimalGrowth for different properties {?templateProperty} and {?otherTemplateProperty}."^^xsd:string ;
  rdfs:label "Optimal growth under different condition"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:Organism
  rdf:type rdfs:Class ;
  rdfs:label "Organism"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
N4L:OrganismObservation
  rdf:type rdfs:Class ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasAcidProduction ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:AcidProduction ;
      rdfs:comment "# R(244) Infers N4L:hasAcidProduction from N4L:hasCellularActivity and N4L:AcidProduction."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasAerobicAcidProduction ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:AerobicAcidProduction ;
      rdfs:comment "# R(257) Infers N4L:hasAerobicAcidProduction from N4L:hasCellularActivity and N4L:AerobicAcidProduction."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasAnabolicReaction ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:AnabolicReaction ;
      rdfs:comment "# R(250) Infers N4L:hasAnabolicReaction from N4L:hasCellularActivity and N4L:AnabolicReaction."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasAssimilation ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:Assimilation ;
      rdfs:comment "# R(242) Infers N4L:hasAssimilation from N4L:hasCellularActivity and N4L:Assimilation."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasCatabolicReaction ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:CatabolicReaction ;
      rdfs:comment "# R(251) Infers N4L:hasCatabolicReaction from N4L:hasCellularActivity and N4L:CatabolicReaction."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasFermentation ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:Fermentation ;
      rdfs:comment "# R(96) Infers N4L:hasFermentation from N4L:hasCellularActivity and N4L:Fermentation."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasGasProduction ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:GasProduction ;
      rdfs:comment "# R(248) Infers N4L:hasGasProduction from N4L:hasCellularActivity and N4L:GasProduction."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasGrowth ;
      N4L:templateProperty N4L:composedOf ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:Growth ;
      rdfs:comment "# R(101) Infers N4L:hasGrowth from N4L:composedOf and N4L:Growth."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasInhibitedGrowth ;
      N4L:templateProperty N4L:composedOf ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:InhibitedGrowth ;
      rdfs:comment "# R(98) Infers N4L:hasInhibitedGrowth from N4L:composedOf and N4L:InhibitedGrowth.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasNoAcidProduction ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:NoAcidProduction ;
      rdfs:comment "# R(245) Infers N4L:hasNoAcidProduction from N4L:hasCellularActivity and N4L:NoAcidProduction."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasNoAssimilation ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:NoAssimilation ;
      rdfs:comment "# C(243) Infers N4L:hasNoAssimilation from N4L:hasCellularActivity and N4L:NoAssimilation."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasNoFermentation ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:NoFermentation ;
      rdfs:comment "# R(240) Infers N4L:hasNoFermentation from N4L:hasCellularActivity and N4L:NoFermentation."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasNoGasProduction ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "false"^^xsd:boolean ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:NoGasProduction ;
      rdfs:comment "# R(249) Infers N4L:hasNoGasProduction from N4L:hasCellularActivity and N4L:NoGasProduction."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasNoGrowth ;
      N4L:templateProperty N4L:composedOf ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:NoGrowth ;
      rdfs:comment "# R(99) Infers N4L:hasNoGrowth from N4L:composedOf and N4L:NoGrowth."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasNoRespiration ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:NoRespiration ;
      rdfs:comment "# R(241) Infers N4L:hasNoRespiration from N4L:hasCellularActivity and N4L:NoRespiration."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasNoUtilization ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:NoUtilization ;
      rdfs:comment "# R(237)  Infers N4L:hasNoUtilization from N4L:hasCellularActivity and N4L:NoUtilization."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasOptimalGrowth ;
      N4L:templateProperty N4L:composedOf ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:OptimalGrowth ;
      rdfs:comment "# R(102) Infers N4L:hasOptimalGrowth from N4L:composedOf and N4L:OptimalGrowth."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasResistantPhenotype ;
      N4L:templateProperty N4L:hasAtomicObservationPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:Resistant ;
      rdfs:comment "# R(247) Infers N4L:hasResistantPhenotype from N4L:hasAtomicObservationPhenotype and N4L:Resistant."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasRespiration ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:Respiration ;
      rdfs:comment "# R(97) Infers N4L:hasRespiration from N4L:hasCellularActivity and N4L:Respiration."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasSubOptimalGrowth ;
      N4L:templateProperty N4L:composedOf ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:SubOptimalGrowth ;
      rdfs:comment "# R(103) Infers N4L:hasSubOptimalGrowth from N4L:composedOf and N4L:SubOptimalGrowth."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasSusceptiblePhenotype ;
      N4L:templateProperty N4L:hasAtomicObservationPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:Susceptible ;
      rdfs:comment "# R(246) Infers N4L:hasSusceptiblePhenotype from N4L:hasAtomicObservationPhenotype and N4L:Susceptible."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasUninhibitedGrowth ;
      N4L:templateProperty N4L:composedOf ;
      spin:thisUnbound "false"^^xsd:boolean ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:UninhibitedGrowth ;
      rdfs:comment "# R(100) Infers N4L:hasUninhibitedGrowth from N4L:composedOf and N4L:UninhibitedGrowth.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasUtilization ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:Utilization ;
      rdfs:comment "# R(236) Infers N4L:hasUtilization from N4L:hasCellularActivity and N4L:Utilization."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasVariableAcidProduction ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:VariableAcidProduction ;
      rdfs:comment "# R(258) Infers N4L:hasVariableAcidProduction from N4L:hasCellularActivity and N4L:VariableAcidProduction."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasVariableFermentation ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:VariableFermentation ;
      rdfs:comment "# R(252) Infers N4L:hasVariableFermentation from N4L:hasCellularActivity and N4L:VariableFermentation."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasVariableUtilization ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:VariableUtilization ;
      rdfs:comment "# R(256) Infers N4L:hasVariableUtilization from N4L:hasCellularActivity and N4L:VariableUtilization."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasWeakAcidProduction ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:WeakAcidProduction ;
      rdfs:comment "# R(255)  Infers N4L:hasWeakAcidProduction from N4L:hasCellularActivity and N4L:WeakAcidProduction."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasWeakFermentation ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:WeakFermentation ;
      rdfs:comment "# R(254) Infers N4L:hasWeakFermentation from N4L:hasCellularActivity and N4L:WeakFermentation."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersSubPropertyBasedOnRangeType ;
      N4L:otherTemplateProperty N4L:hasWeakUtilization ;
      N4L:templateProperty N4L:hasCellularActivity ;
      spin:thisUnbound "false"^^xsd:boolean ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:WeakUtilization ;
      rdfs:comment "# R(253)  Infers N4L:hasWeakUtilization from N4L:hasCellularActivity and N4L:WeakUtilization."^^xsd:string ;
    ] ;
  rdfs:label "Organism observation"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
N4L:OxygenCondition
  rdf:type rdfs:Class ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object N4L:Aerobic ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "o"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOxygenValue ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:gt ;
                sp:arg1 [
                    sp:varName "o"^^xsd:string ;
                  ] ;
                sp:arg2 0.0 ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(84) Infers Aerobic based on Oxygen value.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object N4L:Air ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "o"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOxygenValue ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ge ;
                sp:arg1 [
                    sp:varName "o"^^xsd:string ;
                  ] ;
                sp:arg2 21.0 ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(85) Infers Air based on Oxygen value.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object N4L:Anoxic ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "o"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOxygenValue ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    sp:varName "o"^^xsd:string ;
                  ] ;
                sp:arg2 0.0 ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(86) Infers Anoxic based on Oxygen value.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object N4L:Microaerobic ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "o"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOxygenValue ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:and ;
                sp:arg1 [
                    rdf:type sp:gt ;
                    sp:arg1 [
                        sp:varName "o"^^xsd:string ;
                      ] ;
                    sp:arg2 0.0 ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:lt ;
                    sp:arg1 [
                        sp:varName "o"^^xsd:string ;
                      ] ;
                    sp:arg2 21.0 ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(87) Infers Microaerobic based on Oxygen value.#"^^xsd:string ;
    ] ;
  rdfs:label "Oxygen condition"^^xsd:string ;
  rdfs:subClassOf N4L:Condition ;
.
N4L:OxygenPhenotype
  rdf:type rdfs:Class ;
  rdfs:label "Oxygen phenotype"^^xsd:string ;
  rdfs:subClassOf N4L:Phenotype ;
.
N4L:PHB
  rdf:type rdfs:Class ;
  rdfs:label "Poly-β-hydroxybutyrate Granules"^^xsd:string ;
  rdfs:subClassOf N4L:StorageGranule ;
.
N4L:PHCondition
  rdf:type rdfs:Class ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object N4L:HighPHCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "o"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhEnvironmentalCondition ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:and ;
                sp:arg1 [
                    rdf:type sp:gt ;
                    sp:arg1 [
                        sp:varName "o"^^xsd:string ;
                      ] ;
                    sp:arg2 8.0 ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:le ;
                    sp:arg1 [
                        sp:varName "o"^^xsd:string ;
                      ] ;
                    sp:arg2 14.0 ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(88) pH condition is high if pH value is between (8, 14].#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object N4L:LowPHCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "c"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhEnvironmentalCondition ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:and ;
                sp:arg1 [
                    rdf:type sp:ge ;
                    sp:arg1 [
                        sp:varName "c"^^xsd:string ;
                      ] ;
                    sp:arg2 0.0 ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:lt ;
                    sp:arg1 [
                        sp:varName "c"^^xsd:string ;
                      ] ;
                    sp:arg2 6.0 ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(89) pH condition is low if value is between [0, 6).#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object N4L:NeutralPHCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "o"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhEnvironmentalCondition ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:and ;
                sp:arg1 [
                    rdf:type sp:ge ;
                    sp:arg1 [
                        sp:varName "o"^^xsd:string ;
                      ] ;
                    sp:arg2 6.0 ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:le ;
                    sp:arg1 [
                        sp:varName "o"^^xsd:string ;
                      ] ;
                    sp:arg2 8.0 ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(90) pH condition is neutral if pH value is between [6, 8].#"^^xsd:string ;
    ] ;
  rdfs:label "PHCondition"^^xsd:string ;
  rdfs:subClassOf N4L:Condition ;
.
N4L:PHPhenotype
  rdf:type rdfs:Class ;
  rdfs:label "PHPhenotype"^^xsd:string ;
  rdfs:subClassOf N4L:Phenotype ;
.
N4L:Phenotype
  rdf:type rdfs:Class ;
  rdfs:label "Phenotype"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
N4L:Polar
  rdf:type rdfs:Class ;
  rdfs:label "Polar"^^xsd:string ;
  rdfs:subClassOf N4L:FlagellaDistribution ;
.
N4L:Polyglucoside
  rdf:type rdfs:Class ;
  rdfs:label "Polyglucoside"^^xsd:string ;
  rdfs:subClassOf N4L:StorageGranule ;
.
N4L:Polyphosphate
  rdf:type rdfs:Class ;
  rdfs:label "Polyphosphate"^^xsd:string ;
  rdfs:subClassOf N4L:StorageGranule ;
.
N4L:Psychrophile
  rdf:type rdfs:Class ;
  rdfs:label "Psychrophile"^^xsd:string ;
  rdfs:subClassOf N4L:TemperaturePhenotype ;
  owl:disjointWith N4L:Mesophile ;
  owl:disjointWith N4L:Thermophile ;
.
N4L:Psychrotolerant
  rdf:type rdfs:Class ;
  rdfs:label "Psychrotolerant"^^xsd:string ;
  rdfs:subClassOf N4L:Mesophile ;
  owl:disjointWith N4L:Thermotolerant ;
.
N4L:RangeOfGrowthCondition
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b37980 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b37980 ;
          ]
          [
            sp:object spin:_arg1 ;
            sp:predicate spin:violationValue ;
            sp:subject _:b37980 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b37980 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b37980 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "go1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "go1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object spin:_arg1 ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object spin:_arg3 ;
            sp:predicate [
                sp:varName "secondTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:gt ;
                    sp:arg1 spin:_arg3 ;
                    sp:arg2 [
                        sp:varName "defaultValue"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:lt ;
                    sp:arg1 spin:_arg3 ;
                    sp:arg2 [
                        sp:varName "valueType"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "14: " ;
                sp:arg2 "Given strain has growth observation value that is out of range ( " ;
                sp:arg3 [
                    sp:varName "valueType"^^xsd:string ;
                  ] ;
                sp:arg4 " , " ;
                sp:arg5 [
                    sp:varName "defaultValue"^^xsd:string ;
                  ] ;
                sp:arg6 " ) under condition property  " ;
                sp:arg7 spin:_arg1 ;
                sp:arg8 " ." ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:secondTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Class ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate spl:defaultValue ;
      spl:valueType xsd:double ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate spl:valueType ;
      spl:valueType xsd:double ;
    ] ;
  spin:labelTemplate "T14: Strain has observation ({?templateProperty}, {?arg1}) with environmental property {?secondTemplateProperty} that is out of  range ({?valueType}, {?defaultValue})."^^xsd:string ;
  rdfs:label "Range of growth condition"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:Resistant
  rdf:type rdfs:Class ;
  rdfs:label "Resistant"^^xsd:string ;
  rdfs:subClassOf N4L:AntimicrobialPhenotype ;
.
N4L:Respiration
  rdf:type rdfs:Class ;
  rdfs:label "Respiration"^^xsd:string ;
  rdfs:subClassOf N4L:Utilization ;
.
N4L:ShapeDiameter
  rdf:type rdfs:Class ;
  rdfs:label "Shape diameter"^^xsd:string ;
  rdfs:subClassOf N4L:ShapeFeature ;
.
N4L:ShapeFeature
  rdf:type rdfs:Class ;
  rdfs:label "Shape feature"^^xsd:string ;
  rdfs:subClassOf N4L:Feature ;
.
N4L:ShapeLong
  rdf:type rdfs:Class ;
  rdfs:label "Shape long"^^xsd:string ;
  rdfs:subClassOf N4L:ShapeFeature ;
.
N4L:ShapeModifier
  rdf:type rdfs:Class ;
  rdfs:label "Shape modifier"^^xsd:string ;
  rdfs:subClassOf N4L:Modifier ;
.
N4L:Single
  rdf:type rdfs:Class ;
  rdfs:label "Single"^^xsd:string ;
  rdfs:subClassOf N4L:FlagellaOrdinal ;
.
N4L:StorageGranule
  rdf:type rdfs:Class ;
  rdfs:label "Storage granule"^^xsd:string ;
  rdfs:subClassOf N4L:InclusionBodyObservation ;
.
N4L:Strain
  rdf:type rdfs:Class ;
  spin:constraint [
      rdf:type N4L:AntimicrobialPhenotypeVsAntimicrobialGroupConstraint ;
      N4L:templateProperty N4L:hasResistantPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(58) Strain has N4L:hasResistantPhenotype to a chemical entity, but that chemical entity is not member of an antimicrobial group."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:AntimicrobialPhenotypeVsAntimicrobialGroupConstraint ;
      N4L:templateProperty N4L:hasSusceptiblePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(57) Strain has N4L:hasSusceptiblePhenotype to a chemical entity, but that chemical entity is not member of an antimicrobial group."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:AntimicrobialPhenotypeVsMixture ;
      N4L:templateProperty N4L:hasResistantPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(66) Strain has N4L:hasResistantPhenotype to a mixture (not including media), but that mixture contains a chemical entity is not member of an antimicrobial group."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:AntimicrobialPhenotypeVsMixture ;
      N4L:templateProperty N4L:hasSusceptiblePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(65) Strain has N4L:hasSusceptiblePhenotype to a mixture (not including media), but that mixture contains a chemical entity is not member of an antimicrobial group."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:AssimilationAcidAndGasProduction ;
      N4L:otherTemplateProperty N4L:hasAcidProduction ;
      N4L:templateProperty N4L:hasNoAcidProduction ;
      rdfs:comment "# C(49) Given strain has N4L:hasNoAcidProduction and N4L:hasAcidProduction of the same substance (any type of group membership)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:AssimilationAcidAndGasProduction ;
      N4L:otherTemplateProperty N4L:hasAssimilation ;
      N4L:templateProperty N4L:hasNoAssimilation ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(48) Given strain has N4L:hasNoAssimilation and N4L:hasAssimilation of the same substance (any type of group membership)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:AssimilationAcidAndGasProduction ;
      N4L:otherTemplateProperty N4L:hasGasProduction ;
      N4L:templateProperty N4L:hasNoGasProduction ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(50) Strain has N4L:hasNoGasProduction and N4L:hasGasProduction of the same substance (any type of group membership)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:CellularActivityVsMembershipOfSubstanceGroup ;
      N4L:otherTemplateProperty media:isMemberOfAntimicrobialGroup ;
      N4L:templateProperty N4L:hasUtilization ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(166) Strain can not have property N4L:hasUtilization of a substance that is member of a group over property media:isMemberOfAntimicrobialGroup."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:CellularActivityVsNoMembershipOfSubstanceGroup ;
      N4L:otherTemplateProperty media:isMemberOfOrganicCompoundGroup ;
      N4L:templateProperty N4L:hasFermentation ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(165) Strain can not have observation N4L:hasFermentation of a substance  that is not member of media:isMemberOfOrganicCompoundGroup."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessCellularActivityAndSubstance ;
      N4L:templateProperty N4L:hasAcidProduction ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType obo:CHEBI_15379 ;
      rdfs:comment "# C(302) Strain can not have property N4L:hasAcidProduction of obo:CHEBI_15379 substance."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessCellularActivityAndSubstance ;
      N4L:templateProperty N4L:hasAerobicAcidProduction ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType obo:CHEBI_15379 ;
      rdfs:comment "# C(303) Strain can not have property N4L:hasAerobicAcidProduction of obo:CHEBI_15379 substance."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessCellularActivityAndSubstance ;
      N4L:templateProperty N4L:hasFermentation ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType obo:CHEBI_15379 ;
      rdfs:comment "# C(304) Strain can not have property N4L:hasFermentation of obo:CHEBI_15379 substance."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessCellularActivityAndSubstance ;
      N4L:templateProperty N4L:hasGasProduction ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType obo:CHEBI_15379 ;
      rdfs:comment "# C(305) Strain can not have property N4L:hasGasProduction of obo:CHEBI_15379 substance."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessCellularActivityAndSubstance ;
      N4L:templateProperty N4L:hasVariableAcidProduction ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType obo:CHEBI_15379 ;
      rdfs:comment "# C(306) Strain can not have property N4L:hasVariableAcidProduction of obo:CHEBI_15379 substance."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessCellularActivityAndSubstance ;
      N4L:templateProperty N4L:hasVariableFermentation ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType obo:CHEBI_15379 ;
      rdfs:comment "# C(307) Strain can not have property N4L:hasVariableFermentation of obo:CHEBI_15379 substance."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessCellularActivityAndSubstance ;
      N4L:templateProperty N4L:hasWeakAcidProduction ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType obo:CHEBI_15379 ;
      rdfs:comment "# C(308) Strain can not have property N4L:hasWeakAcidProduction of obo:CHEBI_15379 substance."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessCellularActivityAndSubstance ;
      N4L:templateProperty N4L:hasWeakFermentation ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType obo:CHEBI_15379 ;
      rdfs:comment "# C(309) Strain can not have property N4L:hasWeakFermentation of obo:CHEBI_15379 substance."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasAerobicCondition ;
      N4L:secondTemplateProperty N4L:hasOptimalGrowth ;
      N4L:templateProperty N4L:hasNoGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(218) Given strain can not have (N4L:hasNoGrowth) and (N4L:hasOptimalGrowth) under condition property N4L:hasAerobicCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasAerobicCondition ;
      N4L:secondTemplateProperty N4L:hasOptimalGrowth ;
      N4L:templateProperty N4L:hasSubOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(222) Given strain can not have (N4L:hasSubOptimalGrowth) and (N4L:hasOptimalGrowth) under condition property N4L:hasAerobicCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasAerobicCondition ;
      N4L:secondTemplateProperty N4L:hasSubOptimalGrowth ;
      N4L:templateProperty N4L:hasNoGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(214) Given strain can not have (N4L:hasNoGrowth) and (N4L:hasSubOptimalGrowth) under condition property N4L:hasAerobicCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasAerobicCondition ;
      N4L:secondTemplateProperty N4L:hasUninhibitedGrowth ;
      N4L:templateProperty N4L:hasInhibitedGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(1c) Given strain can not have (N4L:hasInhibitedGrowth) and (N4L:hasUninhibitedGrowth) under condition property N4L:hasAerobicCondition"^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasAerobicCondition ;
      N4L:secondTemplateProperty N4L:hasUninhibitedGrowth ;
      N4L:templateProperty N4L:hasSubOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(35c) Given strain can not have (N4L:hasSubOptimalGrowth) and (N4L:hasUninhibitedGrowth) under condition property N4L:hasAerobicCondition"^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasAirCondition ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:templateProperty N4L:hasGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(14) Given strain can not have (N4L:hasGrowth) and (N4L:hasNoGrowth) under condition property N4L:hasAirCondition"^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasAirCondition ;
      N4L:secondTemplateProperty N4L:hasOptimalGrowth ;
      N4L:templateProperty N4L:hasNoGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(217) Given strain can not have (N4L:hasNoGrowth) and (N4L:hasOptimalGrowth) under condition property N4L:hasAirCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasAirCondition ;
      N4L:secondTemplateProperty N4L:hasOptimalGrowth ;
      N4L:templateProperty N4L:hasSubOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(221) Given strain can not have (N4L:hasSubOptimalGrowth) and (N4L:hasOptimalGrowth) under condition property N4L:hasAirCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasAirCondition ;
      N4L:secondTemplateProperty N4L:hasSubOptimalGrowth ;
      N4L:templateProperty N4L:hasNoGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(213) Given strain can not have (N4L:hasNoGrowth) and (N4L:hasSubOptimalGrowth) under condition property N4L:hasAirCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasAirCondition ;
      N4L:secondTemplateProperty N4L:hasUninhibitedGrowth ;
      N4L:templateProperty N4L:hasInhibitedGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(1b) Given strain can not have (N4L:hasInhibitedGrowth) and (N4L:hasUninhibitedGrowth) under condition property N4L:hasAirCondition"^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasAirCondition ;
      N4L:secondTemplateProperty N4L:hasUninhibitedGrowth ;
      N4L:templateProperty N4L:hasSubOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(35b) Given strain can not have (N4L:hasSubOptimalGrowth) and (N4L:hasUninhibitedGrowth) under condition property N4L:hasAirCondition"^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasAnoxicCondition ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:templateProperty N4L:hasGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(15) Given strain can not have (N4L:hasGrowth) and (N4L:hasNoGrowth) under condition property N4L:hasAnoxicCondition"^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasAnoxicCondition ;
      N4L:secondTemplateProperty N4L:hasOptimalGrowth ;
      N4L:templateProperty N4L:hasNoGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(215) Given strain can not have (N4L:hasNoGrowth) and (N4L:hasOptimalGrowth) under condition property N4L:hasAnoxicCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasAnoxicCondition ;
      N4L:secondTemplateProperty N4L:hasSubOptimalGrowth ;
      N4L:templateProperty N4L:hasNoGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(211) Given strain can not have (N4L:hasNoGrowth) and (N4L:hasSubOptimalGrowth) under condition property N4L:hasAnoxicCondition"^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasAnoxicCondition ;
      N4L:secondTemplateProperty N4L:hasSubOptimalGrowth ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(219) Given strain can not have (N4L:hasOptimalGrowth) and (N4L:hasSubOptimalGrowth) under condition property N4L:hasAnoxicCondition"^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasAnoxicCondition ;
      N4L:secondTemplateProperty N4L:hasUninhibitedGrowth ;
      N4L:templateProperty N4L:hasInhibitedGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(1) Given strain can not have (N4L:hasInhibitedGrowth) and (N4L:hasUninhibitedGrowth) under condition property N4L:hasAnoxicCondition"^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasAnoxicCondition ;
      N4L:secondTemplateProperty N4L:hasUninhibitedGrowth ;
      N4L:templateProperty N4L:hasSubOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(35) Given strain can not have (N4L:hasSubOptimalGrowth) and (N4L:hasUninhibitedGrowth) under condition property N4L:hasAnoxicCondition"^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:templateProperty N4L:hasGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(16) Given strain can not have (N4L:hasGrowth) and (N4L:hasNoGrowth) under condition property N4L:hasMicroaerobicCondition"^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:secondTemplateProperty N4L:hasOptimalGrowth ;
      N4L:templateProperty N4L:hasNoGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(216) Given strain can not have (N4L:hasNoGrowth) and (N4L:hasOptimalGrowth) under condition property N4L:hasMicroaerobicCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:secondTemplateProperty N4L:hasOptimalGrowth ;
      N4L:templateProperty N4L:hasSubOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(220) Given strain can not have (N4L:hasSubOptimalGrowth) and (N4L:hasOptimalGrowth) under condition property N4L:hasMicroaerobicCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:secondTemplateProperty N4L:hasSubOptimalGrowth ;
      N4L:templateProperty N4L:hasNoGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(212) Given strain can not have (N4L:hasNoGrowth) and (N4L:hasSubOptimalGrowth) under condition property N4L:hasMicroaerobicCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:secondTemplateProperty N4L:hasUninhibitedGrowth ;
      N4L:templateProperty N4L:hasInhibitedGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(1a) Given strain can not have (N4L:hasInhibitedGrowth) and (N4L:hasUninhibitedGrowth) under condition property N4L:hasMicroaerobicCondition"^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservation ;
      N4L:otherTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:secondTemplateProperty N4L:hasUninhibitedGrowth ;
      N4L:templateProperty N4L:hasSubOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(35a) Given strain can not have (N4L:hasInhibitedGrowth) and (N4L:hasUninhibitedGrowth) under condition property N4L:hasMicroaerobicCondition"^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservationsTemperatureCondition ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:templateProperty N4L:hasNoGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:TemperatureCondition ;
      rdfs:comment "# C(145) Strain can not have observations (N4L:hasNoGrowth and N4L:hasGrowth) under the same temperature condition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservationsTemperatureCondition ;
      N4L:secondTemplateProperty N4L:hasInhibitedGrowth ;
      N4L:templateProperty N4L:hasUninhibitedGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:TemperatureCondition ;
      rdfs:comment "# C(148) Strain can not have observations (N4L:hasUninhibitedGrowth and N4L:hasInhibitedGrowth) under the same temperature conditions ."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservationsTemperatureCondition ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:templateProperty N4L:hasGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:PHCondition ;
      rdfs:comment "# C(206) Strain can not have observations (N4L:hasNoGrowth and N4L:hasGrowth) under the same ph condition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservationsTemperatureCondition ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:PHCondition ;
      rdfs:comment "# C(208) Strain can not have observations (N4L:hasOptimalGrowth and N4L:hasNoGrowth) under the same ph conditions ."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservationsTemperatureCondition ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:TemperatureCondition ;
      rdfs:comment "# C(146) Strain can not have observations (N4L:hasOptimalGrowth and N4L:hasNoGrowth) under the same temperature conditions ."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservationsTemperatureCondition ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:templateProperty N4L:hasSubOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:PHCondition ;
      rdfs:comment "# C(210) Strain can not have observations (N4L:hasNoGrowth and N4L:hasSubOptimalGrowth) under the same ph condition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservationsTemperatureCondition ;
      N4L:secondTemplateProperty N4L:hasOptimalGrowth ;
      N4L:templateProperty N4L:hasSubOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:TemperatureCondition ;
      rdfs:comment "# C(147) Strain can not have observations (N4L:hasSubOptimalGrowth and N4L:hasOptimalGrowth) under the same temperature conditions ."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservationsTemperatureCondition ;
      N4L:secondTemplateProperty N4L:hasSubOptimalGrowth ;
      N4L:templateProperty N4L:hasNoGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:TemperatureCondition ;
      rdfs:comment "# C(205) Strain can not have observations (N4L:hasNoGrowth and N4L:hasSubOptimalGrowth) under the same temperature condition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservationsTemperatureCondition ;
      N4L:secondTemplateProperty N4L:hasSubOptimalGrowth ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      spl:valueType N4L:PHCondition ;
      rdfs:comment "# C(209) Strain can not have observations (N4L:hasSubOptimalGrowth and N4L:hasOptimalGrowth) under the same ph condition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservationsTemperatureCondition ;
      N4L:secondTemplateProperty N4L:hasUninhibitedGrowth ;
      N4L:templateProperty N4L:hasInhibitedGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:PHCondition ;
      rdfs:comment "# C(207) Strain can not have observations (N4L:hasUninhibitedGrowth and N4L:hasInhibitedGrowth) under the same ph conditions ."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservationsTemperatureCondition ;
      N4L:secondTemplateProperty N4L:hasUninhibitedGrowth ;
      N4L:templateProperty N4L:hasSubOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:PHCondition ;
      rdfs:comment "# C(223) Strain can not have observations (N4L:hasSubOptimalGrowth and N4L:hasUninhibitedGrowth) under the same N4L:PHCondition conditions."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfGrowthObservationsTemperatureCondition ;
      N4L:secondTemplateProperty N4L:hasUninhibitedGrowth ;
      N4L:templateProperty N4L:hasSubOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:TemperatureCondition ;
      rdfs:comment "# C(224) Strain can not have observations (N4L:hasSubOptimalGrowth and N4L:hasUninhibitedGrowth) under the same N4L:TemperatureCondition conditions."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfOptimalGrowthInTwoConditions ;
      N4L:otherTemplateProperty N4L:hasAerobicCondition ;
      N4L:secondTemplateProperty N4L:hasOptimalGrowth ;
      N4L:templateProperty N4L:hasSubOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasMicroaerobicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(201) Strain can not have observation (N4L:hasSubOptimalGrowth,N4L:hasAerobicCondition) and observation (N4L:hasOptimalGrowth, N4L:hasMicroaerobicCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfOptimalGrowthInTwoConditions ;
      N4L:otherTemplateProperty N4L:hasAnoxicCondition ;
      N4L:secondTemplateProperty N4L:hasOptimalGrowth ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasAirCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(191) Strain can not have observation (N4L:hasOptimalGrowth,N4L:hasAnoxicCondition) and observation (N4L:hasOptimalGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfOptimalGrowthInTwoConditions ;
      N4L:otherTemplateProperty N4L:hasAnoxicCondition ;
      N4L:secondTemplateProperty N4L:hasOptimalGrowth ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasMicroaerobicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(190) Strain can not have observation (N4L:hasOptimalGrowth,N4L:hasAnoxicCondition) and observation (N4L:hasOptimalGrowth, N4L:hasMicroaerobicCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfOptimalGrowthInTwoConditions ;
      N4L:otherTemplateProperty N4L:hasAnoxicCondition ;
      N4L:secondTemplateProperty N4L:hasSubOptimalGrowth ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasAerobicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(202) Strain can not have observation (N4L:hasNoGrowth,N4L:hasAnoxicCondition) and observation (N4L:hasSubOptimalGrowth, N4L:hasAerobicCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfOptimalGrowthInTwoConditions ;
      N4L:otherTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:secondTemplateProperty N4L:hasOptimalGrowth ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasAirCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(192) Strain can not have observation (N4L:hasOptimalGrowth,N4L:hasMicroaerobicCondition) and observation (N4L:hasOptimalGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfOptimalGrowthInTwoConditions ;
      N4L:otherTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:secondTemplateProperty N4L:hasSubOptimalGrowth ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasAerobicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(200) Strain can not have observation (N4L:hasNoGrowth,N4L:hasMicroaerobicCondition) and observation (N4L:hasSubOptimalGrowth, N4L:hasAerobicCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:Acidophile ;
      spl:valueType N4L:Alkalophile ;
      rdfs:comment "# C(125) Strain  can not have N4L:Alkalophile and N4L:Acidophile phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:Acidophile ;
      spl:valueType N4L:Neutrophile ;
      rdfs:comment "# C(124) Strain  can not have N4L:Neutrophile and N4L:Acidophile phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:Aerobe ;
      spl:valueType N4L:StrictAnaerobe ;
      rdfs:comment "# C(28c) Strain can not have N4L:StrictAnaerobe and  N4L:Aerobe phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:AerotolerantAnaerobe ;
      spl:valueType N4L:Aerobe ;
      rdfs:comment "# C(28d) Strain can not have N4L:Aerobe and N4L:AerotolerantAnaerobe phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:AerotolerantAnaerobe ;
      spl:valueType N4L:StrictAerobe ;
      rdfs:comment "# C(27c) Strain can not have N4L:StrictAerobe and N4L:AerotolerantAnaerobe phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:Alkalophile ;
      spl:valueType N4L:Neutrophile ;
      rdfs:comment "# C(126) Strain  can not have N4L:Neutrophile and N4L:Alkalophile phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:Anaerobe ;
      spl:valueType N4L:Aerobe ;
      rdfs:comment "# C(20) Strain  can not have N4L:Aerobe and N4L:Anaerobe phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:ExtremePsychrophile ;
      spl:valueType N4L:Hyperthermophile ;
      rdfs:comment "# C(139) Strain  can not have N4L:Hyperthermophile and N4L:ExtremePsychrophile phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:ExtremePsychrophile ;
      spl:valueType N4L:Psychrotolerant ;
      rdfs:comment "# C(138) Strain  can not have N4L:Psychrotolerant and N4L:ExtremePsychrophile phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:ExtremePsychrophile ;
      spl:valueType N4L:Thermotolerant ;
      rdfs:comment "# C(137) Strain  can not have N4L:Thermotolerant and N4L:ExtremePsychrophile phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:Mesophile ;
      spl:valueType N4L:Thermophile ;
      rdfs:comment "# C(24) Strain  can not have N4L:Thermophile and N4L:Mesophile phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:Microaerophilic ;
      spl:valueType N4L:AerotolerantAnaerobe ;
      rdfs:comment "# C(27d) Strain can not have N4L:Microaerophilic and N4L:AerotolerantAnaerobe phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:Psychrophile ;
      spl:valueType N4L:Mesophile ;
      rdfs:comment "# C(25) Strain  can not have N4L:Mesophile and N4L:Psychrophile phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:Psychrophile ;
      spl:valueType N4L:Thermophile ;
      rdfs:comment "# C(26) Strain  can not have N4L:Thermophile and N4L:Psychrophile phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:Psychrotolerant ;
      spl:valueType N4L:Hyperthermophile ;
      rdfs:comment "# C(141) Strain  can not have N4L:Hyperthermophile and N4L:Psychrotolerant phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:Psychrotolerant ;
      spl:valueType N4L:Thermotolerant ;
      rdfs:comment "# C(21) Strain  can not have N4L:Thermotolerant and N4L:Psychrotolerant phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:StrictAerobe ;
      spl:valueType N4L:Anaerobe ;
      rdfs:comment "# C(28a) Strain can not have  N4L:Anaerobe and N4L:StrictAerobe phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:StrictAerobe ;
      spl:valueType N4L:Microaerophilic ;
      rdfs:comment "# C(27) Strain can not have N4L:Microaerophilic and N4L:StrictAerobe phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:StrictAerobe ;
      spl:valueType N4L:StrictAnaerobe ;
      rdfs:comment "# C(27a) Strain can not have N4L:StrictAnaerobe and N4L:StrictAerobe phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:StrictAnaerobe ;
      spl:valueType N4L:AerotolerantAnaerobe ;
      rdfs:comment "# C(28) Strain  can not have N4L:AerotolerantAnaerobe and N4L:StrictAnaerobe phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:StrictAnaerobe ;
      spl:valueType N4L:Microaerophilic ;
      rdfs:comment "# C(27b) Strain can not have N4L:Microaerophilic and N4L:StrictAnaerobe phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue N4L:Thermotolerant ;
      spl:valueType N4L:Hyperthermophile ;
      rdfs:comment "# C(140) Strain  can not have N4L:Hyperthermophile and N4L:Thermotolerant phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotype ;
      spl:defaultValue N4L:Microaerophilic ;
      spl:valueType N4L:Anaerobe ;
      rdfs:comment "# C(28b) Strain can not have N4L:Anaerobe and  N4L:Microaerophilic phenotype."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotypeAndCellularActivityOfSubstance ;
      N4L:otherTemplateProperty N4L:hasCellularActivityOfSubstance ;
      N4L:templateProperty N4L:hasNoRespiration ;
      spl:defaultValue obo:CHEBI_15379 ;
      spl:valueType N4L:FacultativeAnaerobe ;
      rdfs:comment "# C(2a) Given strain can not have N4L:FacultativeAnaerobe phenotype and observation (N4L:hasNoRespiration, obo:CHEBI_15379)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotypeAndGrowthCondition ;
      N4L:otherTemplateProperty N4L:hasAerobicCondition ;
      N4L:templateProperty N4L:hasGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:StrictAnaerobe ;
      rdfs:comment "# C(10a) Strain can not have  N4L:StrictAnaerobe phenotype and observation (N4L:hasGrowth, N4L:hasAerobicCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotypeAndGrowthCondition ;
      N4L:otherTemplateProperty N4L:hasAirCondition ;
      N4L:templateProperty N4L:hasGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:Microaerophilic ;
      rdfs:comment "# C(18) Strain can not have  N4L:Microaerophilic phenotype and observation (N4L:hasGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotypeAndGrowthCondition ;
      N4L:otherTemplateProperty N4L:hasAirCondition ;
      N4L:templateProperty N4L:hasGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:StrictAnaerobe ;
      rdfs:comment "# C(9) Strain can not have  N4L:StrictAnaerobe phenotype and observation (N4L:hasGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotypeAndGrowthCondition ;
      N4L:otherTemplateProperty N4L:hasAirCondition ;
      N4L:templateProperty N4L:hasNoGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:StrictAerobe ;
      rdfs:comment "# C(7) Strain can not have  N4L:StrictAerobe phenotype and observation (N4L:hasNoGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotypeAndGrowthCondition ;
      N4L:otherTemplateProperty N4L:hasAnoxicCondition ;
      N4L:templateProperty N4L:hasGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:Aerobe ;
      rdfs:comment "# C(37a) Strain can not have  N4L:Aerobe phenotype and observation (N4L:hasGrowth, N4L:hasAnoxicCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotypeAndGrowthCondition ;
      N4L:otherTemplateProperty N4L:hasAnoxicCondition ;
      N4L:templateProperty N4L:hasGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:Microaerophilic ;
      rdfs:comment "# C(17) Strain can not have  N4L:Microaerophilic phenotype and observation (N4L:hasGrowth, N4L:hasAnoxicCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotypeAndGrowthCondition ;
      N4L:otherTemplateProperty N4L:hasAnoxicCondition ;
      N4L:templateProperty N4L:hasGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:StrictAerobe ;
      rdfs:comment "# C(4) Strain can not have  N4L:StrictAerobe phenotype and observation (N4L:hasGrowth, N4L:hasAnoxicCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotypeAndGrowthCondition ;
      N4L:otherTemplateProperty N4L:hasAnoxicCondition ;
      N4L:templateProperty N4L:hasNoGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:AerotolerantAnaerobe ;
      rdfs:comment "# C(13b) Strain can not have  N4L:AerotolerantAnaerobe phenotype and observation (N4L:hasNoGrowth, N4L:hasAnoxicCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotypeAndGrowthCondition ;
      N4L:otherTemplateProperty N4L:hasAnoxicCondition ;
      N4L:templateProperty N4L:hasNoGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:Anaerobe ;
      rdfs:comment "# C(37) Strain can not have  N4L:Anaerobe phenotype and observation (N4L:hasNoGrowth, N4L:hasAnoxicCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotypeAndGrowthCondition ;
      N4L:otherTemplateProperty N4L:hasAnoxicCondition ;
      N4L:templateProperty N4L:hasNoGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:StrictAnaerobe ;
      rdfs:comment "# C(8) Strain can not have  N4L:StrictAnaerobe phenotype and missing observation (N4L:hasNoGrowth, N4L:hasAnoxicCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotypeAndGrowthCondition ;
      N4L:otherTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:templateProperty N4L:hasGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:StrictAerobe ;
      rdfs:comment "# C(6) Strain can not have  N4L:StrictAerobe phenotype and missing observation (N4L:hasGrowth, N4L:hasMicroaerobicCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotypeAndGrowthCondition ;
      N4L:otherTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:templateProperty N4L:hasGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:StrictAnaerobe ;
      rdfs:comment "# C(10) Strain can not have  N4L:StrictAnaerobe phenotype and observation (N4L:hasGrowth, N4L:hasMicroaerobicCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotypeAndGrowthCondition ;
      N4L:otherTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:templateProperty N4L:hasNoGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:AerotolerantAnaerobe ;
      rdfs:comment "# C(13) Strain can not have  N4L:AerotolerantAnaerobe phenotype and observation (N4L:hasNoGrowth, N4L:hasMicroaerobicCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfPhenotypeAndGrowthCondition ;
      N4L:otherTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:templateProperty N4L:hasNoGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:valueType N4L:Microaerophilic ;
      rdfs:comment "# C(3) Strain can not have  N4L:Microaerophilic phenotype and observation (N4L:hasNoGrowth, N4L:hasMicroaerobicCondition)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:DisjointnessOfSubstanceGroup ;
      N4L:otherTemplateProperty media:isMemberOfInorganicCompoundGroup ;
      N4L:templateProperty media:isMemberOfOrganicCompoundGroup ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(56) A strain has an observation for a substance that can not be member of media:isMemberOfOrganicCompoundGroup and media:isMemberOfInorganicCompoundGroup groups."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:FermentationRespirationOfTheSameSubstance ;
      N4L:otherTemplateProperty N4L:hasFermentation ;
      N4L:templateProperty N4L:hasNoFermentation ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(46) Given strain can not have N4L:hasNoFermentation of a substance and N4L:hasFermentation of the same substance (only for those who are members of organic compound group)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:FermentationRespirationOfTheSameSubstance ;
      N4L:otherTemplateProperty N4L:hasRespiration ;
      N4L:templateProperty N4L:hasNoRespiration ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(47) Given strain can not have N4L:hasNoRespiration of a substance and N4L:hasRespiration of the same substance (only for those who are members of organic compound group)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:GrowthObservationInAerobicAndOneOtherCondition ;
      N4L:fourthTemplateProperty N4L:hasAnoxicCondition ;
      N4L:otherTemplateProperty N4L:hasAirCondition ;
      N4L:secondTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasGrowth ;
      rdfs:comment "# C(187) Given strain has observations (N4L:hasOptimalGrowth,  hasAnoxicCondition)  and (N4L:hasOptimalGrowth,  hasAerobicCondition). Aerobic condition may be defined more precelly as air or microaerobic."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:GrowthObservationInAerobicAndOneOtherCondition ;
      N4L:fourthTemplateProperty N4L:hasAnoxicCondition ;
      N4L:otherTemplateProperty N4L:hasAirCondition ;
      N4L:secondTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(186) Given strain has observations (N4L:hasOptimalGrowth,  hasAnoxicCondition)  and (N4L:hasOptimalGrowth,  hasAerobicCondition). Aerobic condition may be defined more precelly as air or microaerobic."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:GrowthObservationInAerobicAndOneOtherCondition ;
      N4L:fourthTemplateProperty N4L:hasAnoxicCondition ;
      N4L:otherTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:secondTemplateProperty N4L:hasAirCondition ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasNoGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(185) Given strain has observations (N4L:hasNoGrowth,  N4L:hasAnoxicCondition)  and (N4L:hasNoGrowth,  N4L:hasAerobicCondition). Aerobic condition may be defined more precelly as air or microaerobic."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:GrowthObservationInAerobicAndOneOtherCondition ;
      N4L:fourthTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:otherTemplateProperty N4L:hasAnoxicCondition ;
      N4L:secondTemplateProperty N4L:hasAirCondition ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(189) Given strain has observations (N4L:hasGrowth,  N4L:hasMicroaerobicCondition)  and (N4L:hasNoGrowth,  hasAerobicCondition). Aerobic condition may be defined more precelly as air or microaerobic."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:GrowthObservationInAerobicAndOneOtherCondition ;
      N4L:fourthTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:otherTemplateProperty N4L:hasAnoxicCondition ;
      N4L:secondTemplateProperty N4L:hasAirCondition ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(188) Given strain has observations (N4L:hasOptimalGrowth,  N4L:hasMicroaerobicCondition)  and (N4L:hasNoGrowth,  hasAerobicCondition). Aerobic condition may be defined more precelly as air or microaerobic."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:GrowthObservationInConditionUnderCellularActivityForSubstance ;
      N4L:otherTemplateProperty N4L:hasCellularActivityOfSubstance ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:templateProperty N4L:hasAnabolicReaction ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue obo:CHEBI_15379 ;
      rdfs:comment "# C(170) Strain can not have observation (N4L:hasGrowth, N4L:hasAnoxicCondition) and N4L:hasAnabolicReaction for obo:CHEBI_15379."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:GrowthObservationInConditionUnderCellularActivityForSubstance ;
      N4L:otherTemplateProperty N4L:hasCellularActivityOfSubstance ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:templateProperty N4L:hasAssimilation ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue obo:CHEBI_15379 ;
      rdfs:comment "# C(171) Strain can not have observation (N4L:hasGrowth, N4L:hasAnoxicCondition) and N4L:hasAssimilation for obo:CHEBI_15379."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:GrowthObservationInConditionUnderCellularActivityForSubstance ;
      N4L:otherTemplateProperty N4L:hasCellularActivityOfSubstance ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:templateProperty N4L:hasCatabolicReaction ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue obo:CHEBI_15379 ;
      rdfs:comment "# C(172) Strain can not have observation (N4L:hasGrowth, N4L:hasAnoxicCondition) and N4L:hasCatabolicReaction for obo:CHEBI_15379."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:GrowthObservationInConditionUnderCellularActivityForSubstance ;
      N4L:otherTemplateProperty N4L:hasCellularActivityOfSubstance ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:templateProperty N4L:hasRespiration ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue obo:CHEBI_15379 ;
      rdfs:comment "# C(168) Strain can not have observation (N4L:hasGrowth, N4L:hasAnoxicCondition) and N4L:hasRespiration for obo:CHEBI_15379."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:GrowthObservationInConditionUnderCellularActivityForSubstance ;
      N4L:otherTemplateProperty N4L:hasCellularActivityOfSubstance ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:templateProperty N4L:hasUtilization ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue obo:CHEBI_15379 ;
      rdfs:comment "# C(169) Strain can not have observation (N4L:hasGrowth, N4L:hasAnoxicCondition) and N4L:hasUtilization for obo:CHEBI_15379."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:GrowthObservationInConditionUnderCellularActivityForSubstance ;
      N4L:otherTemplateProperty N4L:hasCellularActivityOfSubstance ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:templateProperty N4L:hasVariableUtilization ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue obo:CHEBI_15379 ;
      rdfs:comment "# C(176) Strain can not have observation (N4L:hasGrowth, N4L:hasAnoxicCondition) and N4L:hasVariableUtilization for obo:CHEBI_15379."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:GrowthObservationInConditionUnderCellularActivityForSubstance ;
      N4L:otherTemplateProperty N4L:hasCellularActivityOfSubstance ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:templateProperty N4L:hasWeakUtilization ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue obo:CHEBI_15379 ;
      rdfs:comment "# C(177) Strain can not have observation (N4L:hasGrowth, N4L:hasAnoxicCondition) and N4L:hasWeakUtilization for obo:CHEBI_15379."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:GrowthObservationOfTheSameSubstance ;
      N4L:otherTemplateProperty N4L:hasNoGrowth ;
      N4L:templateProperty N4L:hasGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(115) Given strain can not have N4L:hasGrowth and N4L:hasNoGrowth of the same substance."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:GrowthObservationOfTheSameSubstance ;
      N4L:otherTemplateProperty N4L:hasUninhibitedGrowth ;
      N4L:templateProperty N4L:hasInhibitedGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(115a) Given strain can not have N4L:hasInhibitedGrowth and N4L:hasUninhibitedGrowth of the same substance."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:GrowthObservationOfTheSameSubstance ;
      N4L:otherTemplateProperty N4L:hasUninhibitedGrowth ;
      N4L:templateProperty N4L:hasSubOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(115b) Given strain can not have N4L:hasSubOptimalGrowth and N4L:hasUninhibitedGrowth of the same substance."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:NoUtilizationVsBiologicalRole ;
      N4L:otherTemplateProperty N4L:hasNoUtilization ;
      N4L:templateProperty media:isCarbonSource ;
      N4L:thirdTemplateProperty N4L:hasCellularActivityOfSubstance ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(59) Strain can not have no-utilization of a substance that has property media:isCarbonSource as biological role."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:NoUtilizationVsBiologicalRole ;
      N4L:otherTemplateProperty N4L:hasNoUtilization ;
      N4L:templateProperty media:isNitrogenSource ;
      N4L:thirdTemplateProperty N4L:hasCellularActivityOfSubstance ;
      spin:thisUnbound "false"^^xsd:boolean ;
      rdfs:comment "# C(59b) Strain can not have no-utilization of a substance that has property media:isNitrogenSource as biological role."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:NoUtilizationVsBiologicalRole ;
      N4L:otherTemplateProperty N4L:hasNoUtilization ;
      N4L:templateProperty media:isPhosphorusSource ;
      N4L:thirdTemplateProperty N4L:hasCellularActivityOfSubstance ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(59c) Strain can not have no-utilization of a substance that has property media:isPhosphorusSource as biological role."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:NoUtilizationVsBiologicalRole ;
      N4L:otherTemplateProperty N4L:hasNoUtilization ;
      N4L:templateProperty media:isSulfurSource ;
      N4L:thirdTemplateProperty N4L:hasCellularActivityOfSubstance ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(59d) Strain can not have no-utilization of a substance that has property media:isSulfurSource as biological role."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:OptimalGrowthUnderDifferentCondition ;
      N4L:otherTemplateProperty N4L:hasExtremeHighTemperatureCondition ;
      N4L:templateProperty N4L:hasExtremeLowTemperatureCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(2000) Strain can not have observations N4L:OptimalGrowth for different properties N4L:hasExtremeLowTemperatureCondition and N4L:hasExtremeHighTemperatureCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:OptimalGrowthUnderDifferentCondition ;
      N4L:otherTemplateProperty N4L:hasExtremeHighTemperatureCondition ;
      N4L:templateProperty N4L:hasMidRangeTemperatureCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(2008) Strain can not have observations N4L:OptimalGrowth for different properties N4L:hasExtremeHighTemperatureCondition and N4L:hasMidRangeTemperatureCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:OptimalGrowthUnderDifferentCondition ;
      N4L:otherTemplateProperty N4L:hasExtremeHighTemperatureCondition ;
      N4L:templateProperty N4L:hasModerateHighTemperatureCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(2011) Strain can not have observations N4L:OptimalGrowth for different properties N4L:hasExtremeHighTemperatureCondition and N4L:hasModerateHighTemperatureCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:OptimalGrowthUnderDifferentCondition ;
      N4L:otherTemplateProperty N4L:hasExtremeHighTemperatureCondition ;
      N4L:templateProperty N4L:hasModerateLowTemperatureCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(2012) Strain can not have observations N4L:OptimalGrowth for different properties N4L:hasExtremeHighTemperatureCondition and N4L:hasModerateLowTemperatureCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:OptimalGrowthUnderDifferentCondition ;
      N4L:otherTemplateProperty N4L:hasHighPHCondition ;
      N4L:templateProperty N4L:hasLowPHCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(2006) Strain can not have observations N4L:OptimalGrowth for different properties N4L:hasHighPHCondition and N4L:hasLowPHCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:OptimalGrowthUnderDifferentCondition ;
      N4L:otherTemplateProperty N4L:hasHighPHCondition ;
      N4L:templateProperty N4L:hasNeutralPHCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(2016) Strain can not have observations N4L:OptimalGrowth for different properties N4L:hasHighPHCondition and N4L:hasNeutralPHCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:OptimalGrowthUnderDifferentCondition ;
      N4L:otherTemplateProperty N4L:hasHighTemperatureCondition ;
      N4L:templateProperty N4L:hasExtremeLowTemperatureCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(2001) Strain can not have observations N4L:OptimalGrowth for different properties N4L:hasHighTemperatureCondition and N4L:hasExtremeLowTemperatureCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:OptimalGrowthUnderDifferentCondition ;
      N4L:otherTemplateProperty N4L:hasHighTemperatureCondition ;
      N4L:templateProperty N4L:hasMidRangeTemperatureCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(2009) Strain can not have observations N4L:OptimalGrowth for different properties N4L:hasHighTemperatureCondition and N4L:hasMidRangeTemperatureCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:OptimalGrowthUnderDifferentCondition ;
      N4L:otherTemplateProperty N4L:hasHighTemperatureCondition ;
      N4L:templateProperty N4L:hasModerateLowTemperatureCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(2013) Strain can not have observations N4L:OptimalGrowth for different properties N4L:hasHighTemperatureCondition and N4L:hasModerateLowTemperatureCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:OptimalGrowthUnderDifferentCondition ;
      N4L:otherTemplateProperty N4L:hasLowTemperatureCondition ;
      N4L:templateProperty N4L:hasHighTemperatureCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(2005) Strain can not have observations N4L:OptimalGrowth for different properties N4L:hasLowTemperatureCondition and N4L:hasHighTemperatureCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:OptimalGrowthUnderDifferentCondition ;
      N4L:otherTemplateProperty N4L:hasMidRangeTemperatureCondition ;
      N4L:templateProperty N4L:hasExtremeLowTemperatureCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(2002) Strain can not have observations N4L:OptimalGrowth for different properties N4L:hasMidRangeTemperatureCondition and N4L:hasExtremeLowTemperatureCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:OptimalGrowthUnderDifferentCondition ;
      N4L:otherTemplateProperty N4L:hasMidRangeTemperatureCondition ;
      N4L:templateProperty N4L:hasModerateLowTemperatureCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(2014) Strain can not have observations N4L:OptimalGrowth for different properties N4L:hasMidRangeTemperatureCondition and N4L:hasModerateLowTemperatureCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:OptimalGrowthUnderDifferentCondition ;
      N4L:otherTemplateProperty N4L:hasModerateHighTemperatureCondition ;
      N4L:templateProperty N4L:hasExtremeLowTemperatureCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(2003) Strain can not have observations N4L:OptimalGrowth for different properties N4L:hasModerateHighTemperatureCondition and N4L:hasExtremeLowTemperatureCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:OptimalGrowthUnderDifferentCondition ;
      N4L:otherTemplateProperty N4L:hasModerateHighTemperatureCondition ;
      N4L:templateProperty N4L:hasMidRangeTemperatureCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(2010) Strain can not have observations N4L:OptimalGrowth for different properties N4L:hasModerateHighTemperatureCondition and N4L:hasMidRangeTemperatureCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:OptimalGrowthUnderDifferentCondition ;
      N4L:otherTemplateProperty N4L:hasModerateHighTemperatureCondition ;
      N4L:templateProperty N4L:hasModerateLowTemperatureCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(2015) Strain can not have observations N4L:OptimalGrowth for different properties N4L:hasModerateHighTemperatureCondition and N4L:hasModerateLowTemperatureCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:OptimalGrowthUnderDifferentCondition ;
      N4L:otherTemplateProperty N4L:hasModerateLowTemperatureCondition ;
      N4L:templateProperty N4L:hasExtremeLowTemperatureCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(2004) Strain can not have observations N4L:OptimalGrowth for different properties N4L:hasExtremeLowTemperatureCondition and N4L:hasModerateLowTemperatureCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:OptimalGrowthUnderDifferentCondition ;
      N4L:otherTemplateProperty N4L:hasNeutralPHCondition ;
      N4L:templateProperty N4L:hasLowPHCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(2007) Strain can not have observations N4L:OptimalGrowth for different properties N4L:hasNeutralPHCondition and N4L:hasLowPHCondition."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:RangeOfGrowthCondition ;
      N4L:otherTemplateProperty N4L:hasCondition ;
      N4L:secondTemplateProperty N4L:hasEnvironmentalConditionValue ;
      N4L:templateProperty N4L:hasGrowthObservation ;
      sp:arg1 N4L:OxygenCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue "100.00"^^xsd:double ;
      spl:valueType "0.00"^^xsd:double ;
      rdfs:comment "# C(164) Strain has observation (N4L:hasGrowthObservation, N4L:OxygenCondition) with environmental property N4L:hasEnvironmentalConditionValue that is out of  range (0.00, 100.00)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:RangeOfGrowthCondition ;
      N4L:otherTemplateProperty N4L:hasCondition ;
      N4L:secondTemplateProperty N4L:hasEnvironmentalConditionValue ;
      N4L:templateProperty N4L:hasGrowthObservation ;
      sp:arg1 N4L:PHCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:defaultValue "14.00"^^xsd:double ;
      spl:valueType "0.00"^^xsd:double ;
      rdfs:comment "# C(163) Strain has observation (N4L:hasGrowthObservation, N4L:PHCondition) with environmental property N4L:hasEnvironmentalConditionValue that is out of  range (0.00, 14.00)."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:UtilizationOfGroupMembers ;
      N4L:otherTemplateProperty N4L:hasNoUtilization ;
      N4L:secondTemplateProperty N4L:hasUtilization ;
      N4L:templateProperty media:isMemberOfNitrogenSourceGroup ;
      N4L:thirdTemplateProperty N4L:hasCellularActivityOfSubstance ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(52a) Strain has utilization or no utilization for a substance that is member of a group over property media:isMemberOfNitrogenSourceGroup ."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:UtilizationOfGroupMembers ;
      N4L:otherTemplateProperty N4L:hasNoUtilization ;
      N4L:secondTemplateProperty N4L:hasUtilization ;
      N4L:templateProperty media:isMemberOfOrganicCompoundGroup ;
      N4L:thirdTemplateProperty N4L:hasCellularActivityOfSubstance ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(52) Strain has utilization or no utilization for a substance that is member of a group over property media:isMemberOfOrganicCompoundGroup ."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:UtilizationOfGroupMembers ;
      N4L:otherTemplateProperty N4L:hasNoUtilization ;
      N4L:secondTemplateProperty N4L:hasUtilization ;
      N4L:templateProperty media:isMemberOfPhosphorusGroup ;
      N4L:thirdTemplateProperty N4L:hasCellularActivityOfSubstance ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(52b) Strain has utilization or no utilization for a substance that is member of a group over property media:isMemberOfPhosphorusGroup ."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:UtilizationOfGroupMembers ;
      N4L:otherTemplateProperty N4L:hasNoUtilization ;
      N4L:secondTemplateProperty N4L:hasUtilization ;
      N4L:templateProperty media:isMemberOfSulfurGroup ;
      N4L:thirdTemplateProperty N4L:hasCellularActivityOfSubstance ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(52c) Strain has utilization or no utilization for a substance that is member of a group over property media:isMemberOfSulfurGroup ."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:UtilizationVsBiologicalRole ;
      N4L:otherTemplateProperty N4L:hasNoUtilization ;
      N4L:secondTemplateProperty N4L:hasUtilization ;
      N4L:templateProperty media:isCarbonSource ;
      N4L:thirdTemplateProperty N4L:hasCellularActivityOfSubstance ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(44) Given strain can not have utilization and no-utilization of the same substance that has carbon source as biological role."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:UtilizationVsBiologicalRole ;
      N4L:otherTemplateProperty N4L:hasNoUtilization ;
      N4L:secondTemplateProperty N4L:hasUtilization ;
      N4L:templateProperty media:isEnergySource ;
      N4L:thirdTemplateProperty N4L:hasCellularActivityOfSubstance ;
      rdfs:comment "# C(45) Given strain can not have utilization and no-utilization of the same substance that has energy source as biological role."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:UtilizationVsBiologicalRole ;
      N4L:otherTemplateProperty N4L:hasNoUtilization ;
      N4L:secondTemplateProperty N4L:hasUtilization ;
      N4L:templateProperty media:isNitrogenSource ;
      N4L:thirdTemplateProperty N4L:hasCellularActivityOfSubstance ;
      rdfs:comment "# C(44c) Given strain can not have utilization and no-utilization of the same substance that has nitrogen source as biological role."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:UtilizationVsBiologicalRole ;
      N4L:otherTemplateProperty N4L:hasNoUtilization ;
      N4L:secondTemplateProperty N4L:hasUtilization ;
      N4L:templateProperty media:isPhosphorusSource ;
      N4L:thirdTemplateProperty N4L:hasCellularActivityOfSubstance ;
      rdfs:comment "# C(44d) Given strain can not have utilization and no-utilization of the same substance that has phosphorus source as biological role."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:UtilizationVsBiologicalRole ;
      N4L:otherTemplateProperty N4L:hasNoUtilization ;
      N4L:secondTemplateProperty N4L:hasUtilization ;
      N4L:templateProperty media:isSulfurSource ;
      N4L:thirdTemplateProperty N4L:hasCellularActivityOfSubstance ;
      rdfs:comment "# C(44e) Given strain can not have utilization and no-utilization of the same substance that has sulfur source as biological role."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:UtilizationWithBiologicalRoleAndNotMemberOfGroup ;
      N4L:otherTemplateProperty media:isMemberOfAntimicrobialGroup ;
      N4L:templateProperty media:isAntimicrobialAgent ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(60a) Strain utilizes substance as media:isAntimicrobialAgent biological role, but substance is not member of media:isMemberOfAntimicrobialGroup."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:UtilizationWithBiologicalRoleAndNotMemberOfGroup ;
      N4L:otherTemplateProperty media:isMemberOfEnergySourceGroup ;
      N4L:templateProperty media:isEnergySource ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(60b) Strain utilizes substance as media:isEnergySource biological role, but substance is not member of media:isMemberOfEnergySourceGroup."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:UtilizationWithBiologicalRoleAndNotMemberOfGroup ;
      N4L:otherTemplateProperty media:isMemberOfNitrogenSourceGroup ;
      N4L:templateProperty media:isNitrogenSource ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(60c) Strain utilizes substance as media:isNitrogenSource biological role, but substance is not member of media:isMemberOfNitrogenSourceGroup."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:UtilizationWithBiologicalRoleAndNotMemberOfGroup ;
      N4L:otherTemplateProperty media:isMemberOfOrganicCompoundGroup ;
      N4L:templateProperty media:isCarbonSource ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(60) Strain utilizes substance as media:isCarbonSource biological role, but substance is not member of media:isMemberOfOrganicCompoundGroup."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:UtilizationWithBiologicalRoleAndNotMemberOfGroup ;
      N4L:otherTemplateProperty media:isMemberOfPhosphorusGroup ;
      N4L:templateProperty media:isPhosphorusSource ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# C(60d) Strain utilizes substance as media:isPhosphorusSource biological role, but substance is not member of media:isMemberOfPhosphorusGroup."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type N4L:UtilizationWithBiologicalRoleAndNotMemberOfGroup ;
      N4L:otherTemplateProperty media:isMemberOfSulfurGroup ;
      N4L:templateProperty media:isSulfurSource ;
      rdfs:comment "# C(60e) Strain utilizes substance as media:isSulfurSource biological role, but substance is not member of media:isMemberOfSulfurGroup."^^xsd:string ;
    ] ;
  spin:constraint [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b2479 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b2479 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b2479 ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b2479 ;
          ]
          [
            sp:object "167:A strain can not have anaerobic respiration phenotype and respiration under chemical entity X [optionally concentration value and unit are given] that is not member of Anaerobic Exogenous Electron Acceptor Group." ;
            sp:predicate rdfs:label ;
            sp:subject _:b2479 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject spin:_this ;
          ]
          [
            sp:object N4L:AnaerobicRespiration ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "res"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespiration ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject [
                sp:varName "res"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                      sp:predicate rdfs:subClassOf ;
                      sp:subject [
                          sp:varName "type"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object owl:Restriction ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object media:isMemberOfAnaerobicExogenousElectronAcceptorGroup ;
                      sp:predicate owl:onProperty ;
                      sp:subject [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "group"^^xsd:string ;
                        ] ;
                      sp:predicate owl:allValuesFrom ;
                      sp:subject [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_15379" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "p"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "res"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "sub"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
    ] ;
  spin:constraint [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b8564 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b8564 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b8564 ;
          ]
          [
            sp:object [
                sp:varName "dres2"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b8564 ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b8564 ;
          ]
          [
            sp:object "42:Strain has asserted MIC for one substance that has different values, but may have the same unit." ;
            sp:predicate rdfs:label ;
            sp:subject _:b8564 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "c1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMinimumInhibitoryConcentration ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "val1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "c1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "c2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMinimumInhibitoryConcentration ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "val2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "c2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "c1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "c2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "val1"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "val2"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "c1"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "c2"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "c1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "c2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasOrganismObservation ;
                  sp:subject spin:_this ;
                ]
                [
                  sp:object [
                      sp:varName "g1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasGrowthObservation ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "c1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasSubstanceCondition ;
                  sp:subject [
                      sp:varName "g1"^^xsd:string ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "obs2"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasOrganismObservation ;
                  sp:subject spin:_this ;
                ]
                [
                  sp:object [
                      sp:varName "g2"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasGrowthObservation ;
                  sp:subject [
                      sp:varName "obs2"^^xsd:string ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "c2"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasSubstanceCondition ;
                  sp:subject [
                      sp:varName "g2"^^xsd:string ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "dres2"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs2"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
    ] ;
  spin:constraint [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b22093 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b22093 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b22093 ;
          ]
          [
            sp:object [
                sp:varName "dres2"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b22093 ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b22093 ;
          ]
          [
            sp:object "43:Strain is resistant and susceptible to the same substance that is antimicrobial agent as role, but without data value and unit ." ;
            sp:predicate rdfs:label ;
            sp:subject _:b22093 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "obs2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "g1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowthObservation ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "g1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "res"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasResistantPhenotype ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowthObservation ;
            sp:subject [
                sp:varName "obs2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "susc"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSusceptiblePhenotype ;
            sp:subject [
                sp:varName "obs2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "g2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "agent1"^^xsd:string ;
              ] ;
            sp:predicate media:isAntimicrobialAgent ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "agent2"^^xsd:string ;
              ] ;
            sp:predicate media:isAntimicrobialAgent ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:isBlank ;
                    sp:arg1 [
                        sp:varName "type"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "val1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasEnvironmentalConditionValue ;
                      sp:subject [
                          sp:varName "cond1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "val2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasEnvironmentalConditionValue ;
                      sp:subject [
                          sp:varName "cond2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "g1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "g2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "cond1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "cond2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "res"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "susc"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "agent1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "agent2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres2"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs2"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
    ] ;
  spin:constraint [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b26085 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b26085 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b26085 ;
          ]
          [
            sp:object [
                sp:varName "v1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b26085 ;
          ]
          [
            sp:object "204:A strain can not have optimal growth under two different values of ph conditions." ;
            sp:predicate rdfs:label ;
            sp:subject _:b26085 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "g1"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:OptimalGrowth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "g1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPHCondition ;
            sp:subject [
                sp:varName "g1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:PHCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "v1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g2"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:OptimalGrowth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "g2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPHCondition ;
            sp:subject [
                sp:varName "g2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:PHCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "v2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:gt ;
                    sp:arg1 [
                        sp:varName "v1"^^xsd:string ;
                      ] ;
                    sp:arg2 [
                        sp:varName "v2"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:lt ;
                    sp:arg1 [
                        sp:varName "v1"^^xsd:string ;
                      ] ;
                    sp:arg2 [
                        sp:varName "v2"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
    ] ;
  spin:constraint [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b31213 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b31213 ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b31213 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b31213 ;
          ]
          [
            sp:object [
                sp:varName "dres2"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b31213 ;
          ]
          [
            sp:object "55:Asserted MIC can not be lower than any concentration needed for uninhibited growth." ;
            sp:predicate rdfs:label ;
            sp:subject _:b31213 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasUninhibitedGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:UninhibitedGrowth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "val1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMinimumInhibitoryConcentration ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "val2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:gt ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "val1"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "val2"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "cond1"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "cond2"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "growth"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "cond1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "cond2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "obs2"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasOrganismObservation ;
                  sp:subject spin:_this ;
                ]
                [
                  sp:object [
                      sp:varName "dres2"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs2"^^xsd:string ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "g2"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasGrowthObservation ;
                  sp:subject [
                      sp:varName "obs2"^^xsd:string ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "cond2"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasSubstanceCondition ;
                  sp:subject [
                      sp:varName "g2"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
    ] ;
  spin:constraint [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b31627 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b31627 ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b31627 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b31627 ;
          ]
          [
            sp:object "301: A strain can not respire substance that is not member of anaerobic exogenous electron acceptor group." ;
            sp:predicate rdfs:label ;
            sp:subject _:b31627 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "res1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespiration ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespirationOfSubstance ;
            sp:subject [
                sp:varName "res1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                      sp:predicate rdfs:subClassOf ;
                      sp:subject [
                          sp:varName "type"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object owl:Restriction ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object media:isMemberOfAnaerobicExogenousElectronAcceptorGroup ;
                      sp:predicate owl:onProperty ;
                      sp:subject [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "g1"^^xsd:string ;
                        ] ;
                      sp:predicate owl:allValuesFrom ;
                      sp:subject [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_15379" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
    ] ;
  spin:constraint [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b33560 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b33560 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b33560 ;
          ]
          [
            sp:object [
                sp:varName "v1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b33560 ;
          ]
          [
            sp:object "198:A strain can not have optimal growth under two different values of temperature conditions." ;
            sp:predicate rdfs:label ;
            sp:subject _:b33560 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "g1"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:OptimalGrowth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "g1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasTemperatureCondition ;
            sp:subject [
                sp:varName "g1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:TemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "v1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g2"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:OptimalGrowth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "g2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasTemperatureCondition ;
            sp:subject [
                sp:varName "g2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:TemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "v2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:gt ;
                    sp:arg1 [
                        sp:varName "v1"^^xsd:string ;
                      ] ;
                    sp:arg2 [
                        sp:varName "v2"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:lt ;
                    sp:arg1 [
                        sp:varName "v1"^^xsd:string ;
                      ] ;
                    sp:arg2 [
                        sp:varName "v2"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
    ] ;
  spin:constraint [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b37510 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b37510 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b37510 ;
          ]
          [
            sp:object [
                sp:varName "v1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b37510 ;
          ]
          [
            sp:object "201a:A strain can not have no growth under temperature value that is between two temperature values of growth observations." ;
            sp:predicate rdfs:label ;
            sp:subject _:b37510 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "g1"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:NoGrowth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "g1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasTemperatureCondition ;
            sp:subject [
                sp:varName "g1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:TemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "v1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g2"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Growth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "g2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasTemperatureCondition ;
            sp:subject [
                sp:varName "g2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:TemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "v2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g3"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Growth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "g3"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond3"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasTemperatureCondition ;
            sp:subject [
                sp:varName "g3"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:TemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond3"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "v3"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond3"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:and ;
                    sp:arg1 [
                        rdf:type sp:gt ;
                        sp:arg1 [
                            sp:varName "v2"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            sp:varName "v1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:gt ;
                        sp:arg1 [
                            sp:varName "v1"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            sp:varName "v3"^^xsd:string ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:and ;
                    sp:arg1 [
                        rdf:type sp:lt ;
                        sp:arg1 [
                            sp:varName "v2"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            sp:varName "v1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:lt ;
                        sp:arg1 [
                            sp:varName "v1"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            sp:varName "v3"^^xsd:string ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
    ] ;
  spin:constraint [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b38132 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b38132 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b38132 ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b38132 ;
          ]
          [
            sp:object "183:A strain can not have growth in anoxic condition and has respiration O2." ;
            sp:predicate rdfs:label ;
            sp:subject _:b38132 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "res"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespiration ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject [
                sp:varName "res"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "obs2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "gr"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowth ;
            sp:subject [
                sp:varName "obs2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAnoxicCondition ;
            sp:subject [
                sp:varName "gr"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:eq ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_15379" ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
    ] ;
  spin:constraint [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b40347 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b40347 ;
          ]
          [
            sp:object N4L:hasSubOptimalGrowth ;
            sp:predicate spin:violationValue ;
            sp:subject _:b40347 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b40347 ;
          ]
          [
            sp:object "196:Strain can not have suboptimal growth in anoxic condition." ;
            sp:predicate rdfs:label ;
            sp:subject _:b40347 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubOptimalGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAnoxicCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b43327 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b43327 ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b43327 ;
          ]
          [
            sp:object [
                sp:varName "dres"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b43327 ;
          ]
          [
            sp:object "61:Given strain can not have utilization of substance  without asserting (inferring) a biological role." ;
            sp:predicate rdfs:label ;
            sp:subject _:b43327 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "utl"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasUtilization ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject [
                sp:varName "utl"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "cs"^^xsd:string ;
                        ] ;
                      sp:predicate media:hasBiologicalRole ;
                      sp:subject [
                          sp:varName "sub1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "utl"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
    ] ;
  spin:constraint [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b46367 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b46367 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b46367 ;
          ]
          [
            sp:object [
                sp:varName "dres2"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b46367 ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b46367 ;
          ]
          [
            sp:object "64:Strain is resistant and susceptible to the same antimicrobial mixture (not media type) ." ;
            sp:predicate rdfs:label ;
            sp:subject _:b46367 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "obs2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "g1"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "g1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "res"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasResistantPhenotype ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g2"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "susc"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSusceptiblePhenotype ;
            sp:subject [
                sp:varName "obs2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "g2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "compCond2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:not ;
                sp:arg1 [
                    rdf:type sp:isBlank ;
                    sp:arg1 [
                        sp:varName "type"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            sp:object media:AntimicrobialMixture ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "g1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "g2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "compCond1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "compCond2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "res"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "susc"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres2"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs2"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
    ] ;
  spin:constraint [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b49945 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b49945 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b49945 ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b49945 ;
          ]
          [
            sp:object "53:if a strain has uninhibited growth under given chemical entity X [optionally concentration value and unit are given] that is member of antimicrobial agent group, then that strain can not have growth inhibitor as given chemical entity X [optionally concentration value and unit are given]." ;
            sp:predicate rdfs:label ;
            sp:subject _:b49945 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasUninhibitedGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowthInhibitor ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAntimicrobialGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "growth"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "cond1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
    ] ;
  spin:constraint [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b55646 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b55646 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b55646 ;
          ]
          [
            sp:object [
                sp:varName "dres2"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b55646 ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b55646 ;
          ]
          [
            sp:object "63:A strain can not have inhibited and uninhibited growth under that the same mixture that is component (not media)." ;
            sp:predicate rdfs:label ;
            sp:subject _:b55646 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "g1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowthObservation ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:InhibitedGrowth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "g1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "g1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "obs2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "g2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowthObservation ;
            sp:subject [
                sp:varName "obs2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:UninhibitedGrowth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "g2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "g2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "compCond2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "compCond2"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "compCond1"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            sp:object media:AntimicrobialMixture ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "g2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "g1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "compCond1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "compCond2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres2"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs2"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
    ] ;
  spin:constraint [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b59969 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b59969 ;
          ]
          [
            sp:object N4L:hasSubOptimalGrowth ;
            sp:predicate spin:violationValue ;
            sp:subject _:b59969 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b59969 ;
          ]
          [
            sp:object "197:Strain can not have suboptimal growth in air condition and no growth in anoxic condition." ;
            sp:predicate rdfs:label ;
            sp:subject _:b59969 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "g1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubOptimalGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAirCondition ;
            sp:subject [
                sp:varName "g1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAnoxicCondition ;
            sp:subject [
                sp:varName "g2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
    ] ;
  spin:constraint [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b61273 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b61273 ;
          ]
          [
            sp:object N4L:hasNoGrowth ;
            sp:predicate spin:violationValue ;
            sp:subject _:b61273 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b61273 ;
          ]
          [
            sp:object "16a:Given strain can not have growth and no growth in aerobic condition" ;
            sp:predicate rdfs:label ;
            sp:subject _:b61273 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "go1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAerobicCondition ;
            sp:subject [
                sp:varName "go1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "go2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAerobicCondition ;
            sp:subject [
                sp:varName "go2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
    ] ;
  spin:constraint [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b93072 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b93072 ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b93072 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b93072 ;
          ]
          [
            sp:object "40:Asserted MIC can not be higher than any concentration needed for inhibited growth." ;
            sp:predicate rdfs:label ;
            sp:subject _:b93072 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasInhibitedGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:InhibitedGrowth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "val1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMinimumInhibitoryConcentration ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "val2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:lt ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "val1"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "val2"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "cond1"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "cond2"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "growth"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "cond1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "cond2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
    ] ;
  spin:constraint [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b95631 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b95631 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b95631 ;
          ]
          [
            sp:object [
                sp:varName "v1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b95631 ;
          ]
          [
            sp:object "203:A strain can not have no growth under ph value that is between two ph values of growth observations." ;
            sp:predicate rdfs:label ;
            sp:subject _:b95631 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "g1"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:NoGrowth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "g1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPHCondition ;
            sp:subject [
                sp:varName "g1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:PHCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "v1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g2"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Growth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "g2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPHCondition ;
            sp:subject [
                sp:varName "g2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:PHCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "v2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g3"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Growth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "g3"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond3"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPHCondition ;
            sp:subject [
                sp:varName "g3"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:PHCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond3"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "v3"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond3"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:and ;
                    sp:arg1 [
                        rdf:type sp:gt ;
                        sp:arg1 [
                            sp:varName "v2"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            sp:varName "v1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:gt ;
                        sp:arg1 [
                            sp:varName "v1"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            sp:varName "v3"^^xsd:string ;
                          ] ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:and ;
                    sp:arg1 [
                        rdf:type sp:lt ;
                        sp:arg1 [
                            sp:varName "v2"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            sp:varName "v1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 [
                        rdf:type sp:lt ;
                        sp:arg1 [
                            sp:varName "v1"^^xsd:string ;
                          ] ;
                        sp:arg2 [
                            sp:varName "v3"^^xsd:string ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
    ] ;
  spin:rule [
      rdf:type N4L:infersGrowthObservationInAerobicCondition ;
      N4L:otherTemplateProperty N4L:hasAirCondition ;
      N4L:templateProperty N4L:hasMicroaerobicCondition ;
      arg:property N4L:hasGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(293) infers observation (N4L:hasGrowth, N4L:hasAerobicCondition) based on (N4L:hasGrowth, N4L:hasMicroaerobicCondition) or (N4L:hasGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersGrowthObservationInAerobicCondition ;
      N4L:otherTemplateProperty N4L:hasAirCondition ;
      N4L:templateProperty N4L:hasMicroaerobicCondition ;
      arg:property N4L:hasOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(291) infers observation (N4L:hasOptimalGrowth, N4L:hasAerobicCondition) based on (N4L:hasOptimalGrowth, N4L:hasMicroaerobicCondition) or (N4L:hasOptimalGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersGrowthObservationInAerobicCondition ;
      N4L:otherTemplateProperty N4L:hasAirCondition ;
      N4L:templateProperty N4L:hasMicroaerobicCondition ;
      arg:property N4L:hasSubOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(292) infers observation (N4L:hasSubOptimalGrowth, N4L:hasAerobicCondition) based on (N4L:hasSubOptimalGrowth, N4L:hasMicroaerobicCondition) or (N4L:hasSubOptimalGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersNoUtilizationBasedOnNoAssimilationAndSubstanceGroupMembership ;
      N4L:templateProperty media:isMemberOfNitrogenSourceGroup ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(260b) If a strain does not assimilate chemical entity Y and that chemical entity is member of nitrogen source group then the strain does not utilize that chemical entity."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersNoUtilizationBasedOnNoAssimilationAndSubstanceGroupMembership ;
      N4L:templateProperty media:isMemberOfOrganicCompoundGroup ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(260a) If a strain does not assimilate chemical entity Y and that chemical entity is member of organic compound group then the strain does not utilize that chemical entity."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersNoUtilizationBasedOnNoAssimilationAndSubstanceGroupMembership ;
      N4L:templateProperty media:isMemberOfPhosphorusGroup ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(260c) If a strain does not assimilate chemical entity Y and that chemical entity is member of phosphorus source group then the strain does not utilize that chemical entity."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersNoUtilizationBasedOnNoAssimilationAndSubstanceGroupMembership ;
      N4L:templateProperty media:isMemberOfSulfurGroup ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(260d) If a strain does not assimilate chemical entity Y and that chemical entity is member of sulfur source group then the strain does not utilize that chemical entity."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnAerobicAndOneOtherCondition ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:otherTemplateProperty N4L:composedOf ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:sixthTemplateProperty N4L:hasMicroaerophilicPhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasMicroaerobicCondition ;
      arg:property N4L:hasAnaerobePhenotype ;
      sp:arg1 N4L:hasAnoxicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(281) Infers N4L:hasMicroaerophilicPhenotype and (N4L:composedOf, N4L:hasAerobicCondition) based on (N4L:hasOptimalGrowth, N4L:hasAerobicCondition) and (N4L:hasGrowth, N4L:hasMicroaerobicCondition)"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnAerobicAndOneOtherCondition ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:otherTemplateProperty N4L:composedOf ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:sixthTemplateProperty N4L:hasStrictAerobePhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasAirCondition ;
      arg:property N4L:hasAnaerobePhenotype ;
      sp:arg1 N4L:hasAnoxicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(287) Infers N4L:hasStrictAerobePhenotype and (N4L:composedOf, N4L:hasAerobicCondition) based on (N4L:hasOptimalGrowth, N4L:hasAerobicCondition) and (N4L:hasGrowth, N4L:hasAirCondition)"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnAerobicAndOneOtherCondition ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:otherTemplateProperty N4L:composedOf ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:sixthTemplateProperty N4L:hasMicroaerophilicPhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasAirCondition ;
      arg:property N4L:hasAnaerobePhenotype ;
      sp:arg1 N4L:hasAnoxicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(286) Infers N4L:hasMicroaerophilicPhenotype and (N4L:composedOf, N4L:hasAerobicCondition) based on (N4L:hasOptimalGrowth, N4L:hasAerobicCondition) and (N4L:hasNoGrowth, N4L:hasAirCondition)"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnAerobicAndOneOtherCondition ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:otherTemplateProperty N4L:composedOf ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:sixthTemplateProperty N4L:hasStrictAerobePhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasMicroaerobicCondition ;
      arg:property N4L:hasNoGrowth ;
      sp:arg1 N4L:hasAnaerobePhenotype ;
      sp:arg2 N4L:hasAnoxicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(280) Infers N4L:hasStrictAerobePhenotype and (N4L:composedOf, N4L:hasAerobicCondition) based on (N4L:hasOptimalGrowth, N4L:hasAerobicCondition) and (N4L:hasNoGrowth, N4L:hasMicroaerobicCondition)"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnAerobicAndOneOtherCondition ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:otherTemplateProperty N4L:composedOf ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:sixthTemplateProperty N4L:hasStrictAnaerobePhenotype ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasAirCondition ;
      arg:property N4L:hasAerobePhenotype ;
      sp:arg1 N4L:hasAnoxicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(282) Infers N4L:hasStrictAnaerobePhenotype and (N4L:composedOf, N4L:hasAerobicCondition) based on (N4L:hasNoGrowth, N4L:hasAerobicCondition) and (N4L:hasNoGrowth, N4L:hasAirCondition)"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnAerobicAndOneOtherCondition ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:otherTemplateProperty N4L:hasOptimalGrowth ;
      N4L:secondTemplateProperty N4L:hasOptimalGrowth ;
      N4L:sixthTemplateProperty N4L:hasMicroaerophilicPhenotype ;
      N4L:templateProperty N4L:hasGrowth ;
      N4L:thirdTemplateProperty N4L:hasMicroaerobicCondition ;
      arg:property N4L:hasAnaerobePhenotype ;
      sp:arg1 N4L:hasAnoxicCondition ;
      sp:arg2 N4L:hasAirCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(278) Infers N4L:hasMicroaerophilicPhenotype and (N4L:hasOptimalGrowth, N4L:hasAerobicCondition) based on (N4L:hasGrowth, N4L:hasAerobicCondition) and (N4L:hasOptimalGrowth, N4L:hasMicroaerobicCondition)"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnOneCondition ;
      N4L:sixthTemplateProperty N4L:hasAerobePhenotype ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      arg:property N4L:composedOf ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(41) Infers N4L:hasAerobePhenotype based on (N4L:hasNoGrowth, N4L:hasAnoxicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnOneCondition ;
      N4L:sixthTemplateProperty N4L:hasAerobePhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasAerobicCondition ;
      arg:property N4L:composedOf ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(290) Infers N4L:hasAerobePhenotype based on (N4L:hasOptimalGrowth, N4L:hasAerobicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnOneCondition ;
      N4L:sixthTemplateProperty N4L:hasAerotolerantAnaerobePhenotype ;
      N4L:templateProperty N4L:hasSubOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasAerobicCondition ;
      arg:property N4L:hasSubOptimalGrowth ;
      rdfs:comment "# R(400) Infers N4L:hasAerotolerantAnaerobePhenotype and (N4L:hasSubOptimalGrowth, N4L:hasAerobicCondition) based on (N4L:hasSubOptimalGrowth, N4L:hasAerobicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnOneCondition ;
      N4L:sixthTemplateProperty N4L:hasAerotolerantAnaerobePhenotype ;
      N4L:templateProperty N4L:hasSubOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasAirCondition ;
      arg:property N4L:hasSubOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(295) Infers N4L:hasAerotolerantAnaerobePhenotype and (N4L:hasSubOptimalGrowth, N4L:hasAerobicCondition) based on (N4L:hasSubOptimalGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnOneCondition ;
      N4L:sixthTemplateProperty N4L:hasAerotolerantAnaerobePhenotype ;
      N4L:templateProperty N4L:hasSubOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasMicroaerobicCondition ;
      arg:property N4L:hasSubOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(294) Infers N4L:hasAerotolerantAnaerobePhenotype and (N4L:hasSubOptimalGrowth, N4L:hasAerobicCondition) based on (N4L:hasSubOptimalGrowth, N4L:hasMicroaerobicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnOneCondition ;
      N4L:sixthTemplateProperty N4L:hasAnaerobePhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      arg:property N4L:composedOf ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(19) Infers N4L:hasAnaerobePhenotype based on (N4L:hasOptimalGrowth, N4L:hasAnoxicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnOneCondition ;
      N4L:sixthTemplateProperty N4L:hasMicroaerophilicPhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasMicroaerobicCondition ;
      arg:property N4L:hasOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(43) Infers N4L:hasMicroaerophilicPhenotype and (N4L:composedOf, N4L:hasAerobicCondition) based on (N4L:hasOptimalGrowth, N4L:hasMicroaerobicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnOneCondition ;
      N4L:sixthTemplateProperty N4L:hasStrictAerobePhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasAirCondition ;
      arg:property N4L:hasOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(42) Infers N4L:hasStrictAerobePhenotype and (N4L:hasOptimalGrowth, N4L:hasAerobicCondition) based on (N4L:hasOptimalGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnThreeConditions ;
      N4L:fifthTemplateProperty N4L:hasAirCondition ;
      N4L:fourthTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:otherTemplateProperty N4L:hasNoGrowth ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:sixthTemplateProperty N4L:hasStrictAnaerobePhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(48) Infers N4L:hasStrictAnaerobePhenotype phenotype based on (N4L:hasOptimalGrowth, N4L:hasAnoxicCondition), (N4L:hasNoGrowth,N4L:hasMicroaerobicCondition), and (N4L:hasNoGrowth,N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnThreeConditions ;
      N4L:fifthTemplateProperty N4L:hasAirCondition ;
      N4L:fourthTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:otherTemplateProperty N4L:hasOptimalGrowth ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:sixthTemplateProperty N4L:hasStrictAerobePhenotype ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(1) Infers N4L:hasStrictAerobePhenotype phenotype based on (N4L:hasNoGrowth, N4L:hasAnoxicCondition), (N4L:hasNoGrowth,N4L:hasMicroaerobicCondition), and (N4L:hasOptimalGrowth,N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasAerobicCondition ;
      N4L:otherTemplateProperty N4L:composedOf ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:sixthTemplateProperty N4L:hasAerotolerantAnaerobePhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      arg:property N4L:hasAerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(33) Infers N4L:hasAerotolerantAnaerobePhenotype and observation (N4L:composedOf, N4L:hasAerobicCondition), based on (N4L:hasOptimalGrowth, N4L:hasAnoxicCondition), and (N4L:hasGrowth, N4L:hasAerobicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasAerobicCondition ;
      N4L:otherTemplateProperty N4L:composedOf ;
      N4L:secondTemplateProperty N4L:hasSubOptimalGrowth ;
      N4L:sixthTemplateProperty N4L:hasAerotolerantAnaerobePhenotype ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasAirCondition ;
      arg:property N4L:hasAerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(296) Infers N4L:hasAerotolerantAnaerobePhenotype and observation (N4L:composedOf, N4L:hasAerobicCondition), based on (N4L:hasNoGrowth, N4L:hasAirCondition), and (N4L:hasSubOptimalGrowth, N4L:hasAerobicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasAirCondition ;
      N4L:otherTemplateProperty N4L:composedOf ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:sixthTemplateProperty N4L:hasMicroaerophilicPhenotype ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      arg:property N4L:hasAnaerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(30) Infers N4L:hasMicroaerophilicPhenotype and observation (N4L:composedOf, N4L:hasAerobicCondition), based on (N4L:hasNoGrowth, N4L:hasAnoxicCondition), and (N4L:hasNoGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasAirCondition ;
      N4L:otherTemplateProperty N4L:hasGrowth ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:sixthTemplateProperty N4L:hasAerotolerantAnaerobePhenotype ;
      N4L:templateProperty N4L:hasGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      arg:property N4L:hasAerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(7) Infers N4L:hasAerotolerantAnaerobePhenotype and observation (N4L:composedOf, N4L:hasAerobicCondition), based on (N4L:hasGrowth, N4L:hasAnoxicCondition), and (N4L:hasGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasAirCondition ;
      N4L:otherTemplateProperty N4L:hasGrowth ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:sixthTemplateProperty N4L:hasAerotolerantAnaerobePhenotype ;
      N4L:templateProperty N4L:hasGrowth ;
      N4L:thirdTemplateProperty N4L:hasMicroaerobicCondition ;
      arg:property N4L:hasAerobePhenotype ;
      rdfs:comment "# R(7a) Infers N4L:hasAerotolerantAnaerobePhenotype and observation (N4L:hasGrowth, N4L:hasAerobicCondition), based on (N4L:hasGrowth, N4L:hasMicroaerobicCondition), and (N4L:hasGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasAirCondition ;
      N4L:otherTemplateProperty N4L:hasGrowth ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:sixthTemplateProperty N4L:hasAerotolerantAnaerobePhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      arg:property N4L:hasAerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(5) Infers phenotype N4L:hasAerotolerantAnaerobePhenotype and observation (N4L:hasGrowth, N4L:hasAerobicCondition), based on (N4L:hasOptimalGrowth, N4L:hasAnoxicCondition), and (N4L:hasGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasAirCondition ;
      N4L:otherTemplateProperty N4L:hasGrowth ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:sixthTemplateProperty N4L:hasAerotolerantAnaerobePhenotype ;
      N4L:templateProperty N4L:hasSubOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasAerobicCondition ;
      arg:property N4L:hasAerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(295a) Infers N4L:hasAerotolerantAnaerobePhenotype and observation (N4L:hasGrowth, N4L:hasAerobicCondition), based on (N4L:hasSubOptimalGrowth, N4L:hasAerobicCondition), and (N4L:hasGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasAirCondition ;
      N4L:otherTemplateProperty N4L:hasGrowth ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:sixthTemplateProperty N4L:hasStrictAerobePhenotype ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      arg:property N4L:hasAnaerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(31a) Infers N4L:hasStrictAerobePhenotype and observation (N4L:hasGrowth, N4L:hasAerobicCondition), based on (N4L:hasNoGrowth, N4L:hasAnoxicCondition), and (N4L:hasGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasAirCondition ;
      N4L:otherTemplateProperty N4L:hasGrowth ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:sixthTemplateProperty N4L:hasStrictAerobePhenotype ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasMicroaerobicCondition ;
      arg:property N4L:hasAnaerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(32a) Infers N4L:hasStrictAerobePhenotype and observation (N4L:hasGrowth, N4L:hasAerobicCondition), based on (N4L:hasNoGrowth, N4L:hasMicroaerobicCondition), and (N4L:hasGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasAirCondition ;
      N4L:otherTemplateProperty N4L:hasNoGrowth ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:sixthTemplateProperty N4L:hasStrictAnaerobePhenotype ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasMicroaerobicCondition ;
      arg:property N4L:hasAerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(3) Infers phenotype N4L:hasStrictAnaerobePhenotype and observation (N4L:hasNoGrowth, N4L:hasAerobicCondition), based on (N4L:hasNoGrowth, N4L:hasMicroaerobicCondition), and (N4L:hasNoGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasAirCondition ;
      N4L:otherTemplateProperty N4L:hasOptimalGrowth ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:sixthTemplateProperty N4L:hasMicroaerophilicPhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasMicroaerobicCondition ;
      arg:property N4L:hasAnaerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(35) Infers N4L:hasMicroaerophilicPhenotype and observation (N4L:hasOptimalGrowth, N4L:hasAerobicCondition), based on (N4L:hasOptimalGrowth, N4L:hasMicroaerobicCondition), and (N4L:hasNoGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasAirCondition ;
      N4L:otherTemplateProperty N4L:hasOptimalGrowth ;
      N4L:secondTemplateProperty N4L:hasOptimalGrowth ;
      N4L:sixthTemplateProperty N4L:hasStrictAerobePhenotype ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      arg:property N4L:hasAnaerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(31) Infers N4L:hasStrictAerobePhenotype and observation (N4L:hasNoGrowth, N4L:hasMicroaerobicCondition), based on (N4L:hasNoGrowth, N4L:hasAnoxicCondition), and (N4L:hasOptimalGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasAirCondition ;
      N4L:otherTemplateProperty N4L:hasOptimalGrowth ;
      N4L:secondTemplateProperty N4L:hasOptimalGrowth ;
      N4L:sixthTemplateProperty N4L:hasStrictAerobePhenotype ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasMicroaerobicCondition ;
      arg:property N4L:hasAnaerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(32) Infers N4L:hasStrictAerobePhenotype and observation (N4L:hasOptimalGrowth, N4L:hasAerobicCondition), based on (N4L:hasNoGrowth, N4L:hasMicroaerobicCondition), and (N4L:hasOptimalGrowth, N4L:hasAirCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasAnoxicCondition ;
      N4L:otherTemplateProperty N4L:composedOf ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:sixthTemplateProperty N4L:hasAnaerobePhenotype ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasAirCondition ;
      arg:property N4L:hasAerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(7e) Infers N4L:hasAnaerobePhenotype and observation (N4L:composedOf, N4L:hasAerobicCondition), based on (N4L:hasNoGrowth, N4L:hasAirCondition), and (N4L:hasGrowth, N4L:hasAnoxicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasAnoxicCondition ;
      N4L:otherTemplateProperty N4L:composedOf ;
      N4L:secondTemplateProperty N4L:hasOptimalGrowth ;
      N4L:sixthTemplateProperty N4L:hasAnaerobePhenotype ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasAirCondition ;
      arg:property N4L:hasAerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(7d) Infers N4L:hasAnaerobePhenotype and observation (N4L:composedOf, N4L:hasAerobicCondition), based on (N4L:hasNoGrowth, N4L:hasAirCondition), and (N4L:hasOptimalGrowth, N4L:hasAnoxicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:otherTemplateProperty N4L:composedOf ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:sixthTemplateProperty N4L:hasStrictAerobePhenotype ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      arg:property N4L:hasAnaerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(4) Infers phenotype N4L:hasStrictAerobePhenotype and observation (N4L:hasGrowthObservation, N4L:hasAirCondition), based on (N4L:hasNoGrowth, N4L:hasAnoxicCondition), and (N4L:hasNoGrowth, N4L:hasMicroaerobicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:otherTemplateProperty N4L:composedOf ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:sixthTemplateProperty N4L:hasStrictAnaerobePhenotype ;
      N4L:templateProperty N4L:hasGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      arg:property N4L:hasAerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(34a) Infers phenotype N4L:hasStrictAnaerobePhenotype and observation (N4L:composedOf, N4L:hasAerobicCondition), based on (N4L:hasGrowth, N4L:hasAnoxicCondition), and (N4L:hasNoGrowth, N4L:hasMicroaerobicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:otherTemplateProperty N4L:composedOf ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:sixthTemplateProperty N4L:hasStrictAnaerobePhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      arg:property N4L:hasAerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(34) Infers phenotype N4L:hasStrictAnaerobePhenotype and observation (N4L:composedOf, N4L:hasAerobicCondition), based on (N4L:hasOptimalGrowth, N4L:hasAnoxicCondition), and (N4L:hasNoGrowth, N4L:hasMicroaerobicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:otherTemplateProperty N4L:hasGrowth ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:sixthTemplateProperty N4L:hasAerotolerantAnaerobePhenotype ;
      N4L:templateProperty N4L:hasGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      arg:property N4L:hasAerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(35a) Infers N4L:hasAerotolerantAnaerobePhenotype and observation (N4L:hasGrowth, N4L:hasAerobicCondition), based on (N4L:hasGrowth, N4L:hasAnoxicCondition), and (N4L:hasGrowth, N4L:hasMicroaerobicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:otherTemplateProperty N4L:hasGrowth ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:sixthTemplateProperty N4L:hasAerotolerantAnaerobePhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      arg:property N4L:hasAerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(6) Infers N4L:hasAerotolerantAnaerobePhenotype and observation (N4L:hasGrowth, N4L:hasAerobicCondition), based on (N4L:hasOptimalGrowth, N4L:hasAnoxicCondition), and (N4L:hasGrowth, N4L:hasMicroaerobicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:otherTemplateProperty N4L:hasGrowth ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:sixthTemplateProperty N4L:hasAerotolerantAnaerobePhenotype ;
      N4L:templateProperty N4L:hasSubOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasAerobicCondition ;
      arg:property N4L:hasAerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(297) Infers N4L:hasAerotolerantAnaerobePhenotype and observation (N4L:hasGrowth, N4L:hasAerobicCondition), based on (N4L:hasSubOptimalGrowth, N4L:hasAerobicCondition), and (N4L:hasGrowth, N4L:hasMicroaerobicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:otherTemplateProperty N4L:hasGrowth ;
      N4L:secondTemplateProperty N4L:hasGrowth ;
      N4L:sixthTemplateProperty N4L:hasMicroaerophilicPhenotype ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      arg:property N4L:hasAnaerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(29a) Infers N4L:hasMicroaerophilicPhenotype and observation (N4L:hasGrowthObservation, N4L:hasAirCondition), based on (N4L:hasNoGrowth, N4L:hasAnoxicCondition), and (N4L:hasGrowth, N4L:hasMicroaerobicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersOxygenPhenotypeBasedOnTwoConditions ;
      N4L:fifthTemplateProperty N4L:hasAerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:otherTemplateProperty N4L:hasOptimalGrowth ;
      N4L:secondTemplateProperty N4L:hasOptimalGrowth ;
      N4L:sixthTemplateProperty N4L:hasMicroaerophilicPhenotype ;
      N4L:templateProperty N4L:hasNoGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      arg:property N4L:hasAnaerobePhenotype ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(29)  Infers N4L:hasMicroaerophilicPhenotype and observation (N4L:hasOptimalGrowth, N4L:hasAerobicCondition), based on (N4L:hasNoGrowth, N4L:hasAnoxicCondition), and (N4L:hasOptimalGrowth, N4L:hasMicroaerobicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersPHPhenotype ;
      N4L:otherTemplateProperty N4L:hasHighPHCondition ;
      N4L:secondTemplateProperty N4L:hasAlkalophilePhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      rdfs:comment "# R(22) Infers N4L:hasAlkalophilePhenotype based on observation (N4L:hasOptimalGrowth, N4L:hasHighPHCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersPHPhenotype ;
      N4L:otherTemplateProperty N4L:hasLowPHCondition ;
      N4L:secondTemplateProperty N4L:hasAcidophilePhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(23) Infers N4L:hasAcidophilePhenotype based on observation (N4L:hasOptimalGrowth, N4L:hasLowPHCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersPHPhenotype ;
      N4L:otherTemplateProperty N4L:hasNeutralPHCondition ;
      N4L:secondTemplateProperty N4L:hasNeutrophilePhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      rdfs:comment "# R(26) Infers N4L:hasNeutrophilePhenotype based on observation (N4L:hasOptimalGrowth, N4L:hasNeutralPHCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersStrictAnaerobeBasedOnAerobicCondition ;
      N4L:fifthTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasAerobicCondition ;
      N4L:otherTemplateProperty N4L:composedOf ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:seventhTemplateProperty N4L:hasAirCondition ;
      N4L:sixthTemplateProperty N4L:composedOf ;
      N4L:templateProperty N4L:hasGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(7c) Infers N4L:hasAnaerobePhenotype based on (N4L:hasGrowth, N4L:hasAnoxicCondition) and (N4L:hasNoGrowth, N4L:hasAerobicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersStrictAnaerobeBasedOnAerobicCondition ;
      N4L:fifthTemplateProperty N4L:hasMicroaerobicCondition ;
      N4L:fourthTemplateProperty N4L:hasAerobicCondition ;
      N4L:otherTemplateProperty N4L:composedOf ;
      N4L:secondTemplateProperty N4L:hasNoGrowth ;
      N4L:seventhTemplateProperty N4L:hasAirCondition ;
      N4L:sixthTemplateProperty N4L:composedOf ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasAnoxicCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(7b) Infers N4L:hasAnaerobePhenotype based on (N4L:hasOptimalGrowth, N4L:hasAnoxicCondition) and (N4L:hasNoGrowth, N4L:hasAerobicCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersTemperaturePhenotypeBasedOnOneCondition ;
      N4L:sixthTemplateProperty N4L:hasExtremePsychrophilePhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasExtremeLowTemperatureCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(21) Infers N4L:hasExtremePsychrophilePhenotype phenotype based on observation (N4L:hasOptimalGrowth, N4L:hasExtremeLowTemperatureCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersTemperaturePhenotypeBasedOnOneCondition ;
      N4L:sixthTemplateProperty N4L:hasHyperthermophilePhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasExtremeHighTemperatureCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(20) Infers N4L:hasHyperthermophilePhenotype phenotype based on observation (N4L:hasOptimalGrowth, N4L:hasExtremeHighTemperatureCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersTemperaturePhenotypeBasedOnOneCondition ;
      N4L:sixthTemplateProperty N4L:hasMesophilePhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasMidRangeTemperatureCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(24) Infers N4L:hasMesophilePhenotype phenotype based on observation (N4L:hasOptimalGrowth, N4L:hasMidRangeTemperatureCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersTemperaturePhenotypeBasedOnOneCondition ;
      N4L:sixthTemplateProperty N4L:hasPsychrophilePhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasModerateLowTemperatureCondition ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(25) Infers N4L:hasPsychrophilePhenotype phenotype based on observation (N4L:hasOptimalGrowth, N4L:hasModerateLowTemperatureCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersTemperaturePhenotypeBasedOnOneCondition ;
      N4L:sixthTemplateProperty N4L:hasThermophilePhenotype ;
      N4L:templateProperty N4L:hasOptimalGrowth ;
      N4L:thirdTemplateProperty N4L:hasModerateHighTemperatureCondition ;
      rdfs:comment "# R(8) Infers N4L:hasThermophilePhenotype phenotype based on observation (N4L:hasOptimalGrowth, N4L:hasModerateHighTemperatureCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersTemperaturePhenotypeBasedOnTwoConditions ;
      N4L:fourthTemplateProperty N4L:hasExtremeHighTemperatureCondition ;
      N4L:otherTemplateProperty N4L:hasOptimalGrowth ;
      N4L:secondTemplateProperty N4L:hasMidRangeTemperatureCondition ;
      N4L:templateProperty N4L:hasThermotolerantPhenotype ;
      N4L:thirdTemplateProperty N4L:hasGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(10a) Infers N4L:hasThermotolerantPhenotype phenotype based on observations (N4L:hasOptimalGrowth, N4L:hasMidRangeTemperatureCondition), and (N4L:hasGrowth, N4L:hasExtremeHighTemperatureCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersTemperaturePhenotypeBasedOnTwoConditions ;
      N4L:fourthTemplateProperty N4L:hasMidRangeTemperatureCondition ;
      N4L:otherTemplateProperty N4L:hasGrowth ;
      N4L:secondTemplateProperty N4L:hasExtremeLowTemperatureCondition ;
      N4L:templateProperty N4L:hasPsychrotolerantPhenotype ;
      N4L:thirdTemplateProperty N4L:hasOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(9a) Infers N4L:hasPsychrotolerantPhenotype phenotype based on observations (N4L:hasGrowth, N4L:hasExtremeLowTemperatureCondition), and (N4L:hasOptimalGrowth, N4L:hasMidRangeTemperatureCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersTemperaturePhenotypeBasedOnTwoConditions ;
      N4L:fourthTemplateProperty N4L:hasMidRangeTemperatureCondition ;
      N4L:otherTemplateProperty N4L:hasGrowth ;
      N4L:secondTemplateProperty N4L:hasHighTemperatureCondition ;
      N4L:templateProperty N4L:hasThermotolerantPhenotype ;
      N4L:thirdTemplateProperty N4L:hasOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(10b) Infers N4L:hasThermotolerantPhenotype phenotype based on observations (N4L:hasGrowth, N4L:hasHighTemperatureCondition), and (N4L:hasOptimalGrowth, N4L:hasMidRangeTemperatureCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersTemperaturePhenotypeBasedOnTwoConditions ;
      N4L:fourthTemplateProperty N4L:hasMidRangeTemperatureCondition ;
      N4L:otherTemplateProperty N4L:hasGrowth ;
      N4L:secondTemplateProperty N4L:hasLowTemperatureCondition ;
      N4L:templateProperty N4L:hasPsychrotolerantPhenotype ;
      N4L:thirdTemplateProperty N4L:hasOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(9) Infers N4L:hasPsychrotolerantPhenotype phenotype based on observations (N4L:hasGrowth, N4L:hasLowTemperatureCondition), and (N4L:hasOptimalGrowth, N4L:hasMidRangeTemperatureCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersTemperaturePhenotypeBasedOnTwoConditions ;
      N4L:fourthTemplateProperty N4L:hasMidRangeTemperatureCondition ;
      N4L:otherTemplateProperty N4L:hasGrowth ;
      N4L:secondTemplateProperty N4L:hasModerateHighTemperatureCondition ;
      N4L:templateProperty N4L:hasThermotolerantPhenotype ;
      N4L:thirdTemplateProperty N4L:hasOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(10) Infers N4L:hasThermotolerantPhenotype phenotype based on observations (N4L:hasGrowth, N4L:hasModerateHighTemperatureCondition), and (N4L:hasOptimalGrowth, N4L:hasMidRangeTemperatureCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersTemperaturePhenotypeBasedOnTwoConditions ;
      N4L:fourthTemplateProperty N4L:hasMidRangeTemperatureCondition ;
      N4L:otherTemplateProperty N4L:hasGrowth ;
      N4L:secondTemplateProperty N4L:hasModerateLowTemperatureCondition ;
      N4L:templateProperty N4L:hasPsychrotolerantPhenotype ;
      N4L:thirdTemplateProperty N4L:hasOptimalGrowth ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(9b) Infers N4L:hasPsychrotolerantPhenotype phenotype based on observations (N4L:hasGrowth, N4L:hasModerateLowTemperatureCondition), and (N4L:hasOptimalGrowth, N4L:hasMidRangeTemperatureCondition)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersUtilizationBasedOnAssimilationAndSubstanceGroupMembership ;
      N4L:otherTemplateProperty media:isCarbonSource ;
      N4L:templateProperty media:isMemberOfOrganicCompoundGroup ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(259a) If a strain assimilates chemical entity Y and that chemical entity is member of a Organic Compound Group then the strain utilizes that chemical entity, and chemical entity is carbon source as biological role."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersUtilizationBasedOnAssimilationAndSubstanceGroupMembership ;
      N4L:otherTemplateProperty media:isNitrogenSource ;
      N4L:templateProperty media:isMemberOfNitrogenSourceGroup ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(259b) If a strain assimilates chemical entity Y and that chemical entity is member of a nitrogen source group then the strain utilizes that chemical entity, and chemical entity is nitrogen source as biological role."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersUtilizationBasedOnAssimilationAndSubstanceGroupMembership ;
      N4L:otherTemplateProperty media:isPhosphorusSource ;
      N4L:templateProperty media:isMemberOfPhosphorusGroup ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(259c) If a strain assimilates chemical entity Y and that chemical entity is member of a phosphorus source group then the strain utilizes that chemical entity, and chemical entity is phosphorus source as biological role."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type N4L:infersUtilizationBasedOnAssimilationAndSubstanceGroupMembership ;
      N4L:otherTemplateProperty media:isSulfurSource ;
      N4L:templateProperty media:isMemberOfSulfurGroup ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "# R(259d) If a strain assimilates chemical entity Y and that chemical entity is member of a sulfur source group then the strain utilizes that chemical entity, and chemical entity is sulfur source as biological role."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "compCond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowthInhibitor ;
            sp:subject spin:_this ;
          ]
          [
            sp:object media:Component ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "compCond"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "agent"^^xsd:string ;
              ] ;
            sp:predicate media:isAntimicrobialAgent ;
            sp:subject [
                sp:varName "compCond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasInhibitedGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:InhibitedGrowth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ingredient"^^xsd:string ;
              ] ;
            sp:predicate media:containsIngredient ;
            sp:subject [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate media:hasSubstance ;
            sp:subject [
                sp:varName "ingredient"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAntimicrobialGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "compCond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "compCond1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_antimicrobialAgent_R266" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "compCond1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasGrowthInhibitor ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "agent1"^^xsd:string ;
                        ] ;
                      sp:predicate media:isAntimicrobialAgent ;
                      sp:subject [
                          sp:varName "compCond1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(266) if a strain has inhibited growth under given mixture X  and that mixture has at least one substance that is member of antimicrobial group, then the strain has growth inhibitor as given mixture X. #"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowthInhibitor ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "agent"^^xsd:string ;
              ] ;
            sp:predicate media:isAntimicrobialAgent ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasInhibitedGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAntimicrobialGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "cond1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_antimicrobialAgent_R105" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "cond1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasGrowthInhibitor ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "agent2"^^xsd:string ;
                        ] ;
                      sp:predicate media:isAntimicrobialAgent ;
                      sp:subject [
                          sp:varName "cond1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(105)  if a strain has inhibited growth under given chemical entity X [optionally concentration value and unit are given] that is member of antimicrobial group, then that strain has growth inhibitor as given chemical entity X [optionally concentration value and unit are given] that is antimicrobial agent as biological role.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "g"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowthObservation ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "g"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "agent"^^xsd:string ;
              ] ;
            sp:predicate media:isAntimicrobialAgent ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSusceptiblePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Susceptible ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "g1"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "g1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAntimicrobialGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMinimumInhibitoryConcentration ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "val"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredSusceptiblePhenotype_R116" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "g1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "g"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "cond1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAntimicrobialAgent_R116" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "s2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasSusceptiblePhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(116) Infers susceptible phenotype based on given MIC for given substance that is member of antimicrobial agent group. The substance has biological role antimicrobial agent.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Growth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "agent"^^xsd:string ;
              ] ;
            sp:predicate media:isAntimicrobialAgent ;
            sp:subject [
                sp:varName "compCond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasUninhibitedGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ingredient"^^xsd:string ;
              ] ;
            sp:predicate media:containsIngredient ;
            sp:subject [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate media:hasSubstance ;
            sp:subject [
                sp:varName "ingredient"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAntimicrobialGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "compCond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "compCond1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_antimicrobialAgent_R264" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "growth1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(264) if a strain has uninhibited growth under given mixture X . That mixture has at least one substance that is member of antimicrobial group, then the strain has growth observation under that mixture X and that mixture X is antimicrobial agent as biological role.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Growth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "agent"^^xsd:string ;
              ] ;
            sp:predicate media:isAntimicrobialAgent ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasUninhibitedGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAntimicrobialGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "cond1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_antimicrobialAgent_R57" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "growth1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(57) if a strain has uninhibited growth under given chemical entity X [ optionally concentration value and unit are given ] that is member of antimicrobial group, then the strain has growth observation under that chemical entity X [ optionally concentration value and unit are given ] and that chemical entity X is antimicrobial agent as biological role and strain is resistant to given chemical entity X.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasInhibitedGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:InhibitedGrowth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "agent"^^xsd:string ;
              ] ;
            sp:predicate media:isAntimicrobialAgent ;
            sp:subject [
                sp:varName "compCond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ingredient"^^xsd:string ;
              ] ;
            sp:predicate media:containsIngredient ;
            sp:subject [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate media:hasSubstance ;
            sp:subject [
                sp:varName "ingredient"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAntimicrobialGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "compCond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "compCond1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_antimicrobialAgent_R263" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "growth2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasInhibitedGrowth ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(263) If a strain has no-growth under given mixture that has at least one ingredinet that is member of  antimicrobial agent gorup, then the strain has inhibited growth under that mixture and the mixture must be antimibrobial agent as biological role.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasInhibitedGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:InhibitedGrowth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "agent"^^xsd:string ;
              ] ;
            sp:predicate media:isAntimicrobialAgent ;
            sp:subject [
                sp:varName "compCond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubOptimalGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ingredient"^^xsd:string ;
              ] ;
            sp:predicate media:containsIngredient ;
            sp:subject [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate media:hasSubstance ;
            sp:subject [
                sp:varName "ingredient"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAntimicrobialGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "compCond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "compCond1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_antimicrobialAgent_R265" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "growth1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasInhibitedGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(265) if a strain has sub-optimal growth under given mixture X . That mixture has at least one substance that is member of antimicrobial group, then the strain has inhibited growth observation under that mixture X and that mixture X is antimicrobial agent as biological role.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasInhibitedGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:InhibitedGrowth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "agent"^^xsd:string ;
              ] ;
            sp:predicate media:isAntimicrobialAgent ;
            sp:subject [
                sp:varName "compCond"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:AntibacterialAgent ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:GrowthObservation ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "s"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSusceptiblePhenotype ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Susceptible ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ingredient"^^xsd:string ;
              ] ;
            sp:predicate media:containsIngredient ;
            sp:subject [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate media:hasSubstance ;
            sp:subject [
                sp:varName "ingredient"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAntimicrobialGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "compCond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "compCond1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_antimicrobialAgent_R262" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs12"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "s2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasInhibitedGrowth ;
                      sp:subject [
                          sp:varName "obs12"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "s"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(262) If a strain is susceptible to a chemical mixture X and that mixture has an ingredient  X that is member of antimicrobial agent group, then for that strain there is inhibited growth observation under the mixture X  and that mixture X is  antimicrobial agent as biological role.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasInhibitedGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:InhibitedGrowth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "agent"^^xsd:string ;
              ] ;
            sp:predicate media:isAntimicrobialAgent ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAntimicrobialGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "cond1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_antimicrobialAgent_R110" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "growth2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasInhibitedGrowth ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(110) if a strain has no growth observation under given chemical entity X [ optionally concentration value and unit are given ] that is a MEMBER OF antimicrobial agent GROUP, then the strain has inhibited growth observation under that chemical entity X [ optionally concentration value and unit are given ] and X is antimicrobial agent as biological role.  #"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasInhibitedGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:InhibitedGrowth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "agent"^^xsd:string ;
              ] ;
            sp:predicate media:isAntimicrobialAgent ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubOptimalGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAntimicrobialGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "cond1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_antimicrobialAgent_R109" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "growth1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasInhibitedGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(109)  if a strain has suboptimal growth observation under given chemical entity X [ optionally concentration value and unit are given ] that is antimicrobial agent group, then the strain has inhibited growth observation under that chemical entity X [ optionally concentration value and unit are given ] and the chemical entity X is antimicrobial agent as biological role. #"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasInhibitedGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "agent"^^xsd:string ;
              ] ;
            sp:predicate media:isAntimicrobialAgent ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:GrowthObservation ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "s"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSusceptiblePhenotype ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Susceptible ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAntimicrobialGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "cond1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_antimicrobialAgent_R62" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "s2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasInhibitedGrowth ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "s"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(62) If a strain is susceptible to a chemical entity X and that chemical entity X [ optionally concentration value and unit are given ] is member of antimicrobial agent group, then for that strain there is inhibited growth observation under the chemical entity X [ optionally concentration value and unit are given ] and  the chemical entity X is antimicrobial agent as biological role .#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasUninhibitedGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:UninhibitedGrowth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "agent"^^xsd:string ;
              ] ;
            sp:predicate media:isAntimicrobialAgent ;
            sp:subject [
                sp:varName "compCond"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:AntibacterialAgent ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:GrowthObservation ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "s"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasResistantPhenotype ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Resistant ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ingredient"^^xsd:string ;
              ] ;
            sp:predicate media:containsIngredient ;
            sp:subject [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate media:hasSubstance ;
            sp:subject [
                sp:varName "ingredient"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAntimicrobialGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "compCond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "compCond1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_antimicrobialAgent_R261" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs12"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "s2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasUninhibitedGrowth ;
                      sp:subject [
                          sp:varName "obs12"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "s"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(261) If a strain is resistant to a chemical mixture X and that mixture has an ingredient  X that is member of antimicrobial agent group, then for that strain there is uninhibited growth observation under the mixture X  and that mixture X is  antimicrobial agent as biological role.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasUninhibitedGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:UninhibitedGrowth ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "agent"^^xsd:string ;
              ] ;
            sp:predicate media:isAntimicrobialAgent ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:AntibacterialAgent ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:GrowthObservation ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "s"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasResistantPhenotype ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Resistant ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAntimicrobialGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "cond1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_antimicrobialAgent_R107" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs12"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "s2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasUninhibitedGrowth ;
                      sp:subject [
                          sp:varName "obs12"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "s"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(107) If a strain is resistant to a chemical entity X [ optionally concentration value and unit are given ] and that chemical entity X is member of antimicrobial agent group, then for that strain there is uninhibited growth observation under the chemical entity X [ optionally concentration value and unit are given ] and that chemical entity X is  antimicrobial agent as biological role.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "ng1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond4"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMicroaerobicCondition ;
            sp:subject [
                sp:varName "ng1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ng2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond5"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAirCondition ;
            sp:subject [
                sp:varName "ng2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasStrictAnaerobePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "og1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAerobicCondition ;
            sp:subject [
                sp:varName "og1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredStrictAnaerobePhenotype_R43a" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredNoGrowthInMicroaerobic_R43a" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "ng1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredNoGrowthInAir_R43a" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "ng2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredMicroaerobicCondition_R43a" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond4"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAirCondition_R43a" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond5"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "ng11"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasNoGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond41"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasMicroaerobicCondition ;
                      sp:subject [
                          sp:varName "ng11"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "ng21"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasNoGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond51"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAirCondition ;
                      sp:subject [
                          sp:varName "ng21"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "p1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasStrictAnaerobePhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "og3"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:composedOf ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond3"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAnoxicCondition ;
                      sp:subject [
                          sp:varName "og3"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:composedOf ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasMicroaerobicCondition ;
                      sp:subject [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:composedOf ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAirCondition ;
                      sp:subject [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(43a) If strain has no growth in aerobic condition then strain is strict anaerobe and has no growth in microaerobic and air conditions."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "og3"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowthObservation ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond3"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAirCondition ;
            sp:subject [
                sp:varName "og3"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasStrictAerobePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "og1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAerobicCondition ;
            sp:subject [
                sp:varName "og1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMicroaerobicCondition ;
            sp:subject [
                sp:varName "og2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredStrictAerobePhenotype_R277" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredGrowth_R277" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og3"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAirCondition_R277" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond3"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "og3"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasGrowthObservation ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond3"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAirCondition ;
                      sp:subject [
                          sp:varName "og3"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "p"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasStrictAerobePhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "og11"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:composedOf ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond11"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAnoxicCondition ;
                      sp:subject [
                          sp:varName "og11"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "p1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasStrictAnaerobePhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(277) If strain has no growth in microaerobic and growth in aerobic then strain has strict aerobe phenotype."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "og3"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond3"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAirCondition ;
            sp:subject [
                sp:varName "og3"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasStrictAnaerobePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "og1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAerobicCondition ;
            sp:subject [
                sp:varName "og1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMicroaerobicCondition ;
            sp:subject [
                sp:varName "og2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredStrictAnaerobePhenotype_R279" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredNoGrowth_R279" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og3"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAirCondition_R279" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond3"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "og31"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasNoGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond31"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAirCondition ;
                      sp:subject [
                          sp:varName "og31"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "p1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasStrictAnaerobePhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "ng11"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:composedOf ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond31"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAnoxicCondition ;
                      sp:subject [
                          sp:varName "ng11"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "ng31"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasNoGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond51"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAirCondition ;
                      sp:subject [
                          sp:varName "ng31"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "p1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasStrictAerobePhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(279) If strain has no growth in microaerobic and no growth in aerobic then strain has strict anaerobe phenotype."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAerotolerantAnaerobePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "go1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAerobicCondition ;
            sp:subject [
                sp:varName "go1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "go2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAnoxicCondition ;
            sp:subject [
                sp:varName "go2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAerotolerantAnaerobe_R274" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "go1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:composedOf ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAirCondition ;
                      sp:subject [
                          sp:varName "go1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "go1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:composedOf ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasMicroaerobicCondition ;
                      sp:subject [
                          sp:varName "go1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "p1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAerotolerantAnaerobePhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(274) If a strain grows in anoxic and aerobic conditions, then strain is aerotolerant anaerobe."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "res"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasFermentation ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasFermentationOfSubstance ;
            sp:subject [
                sp:varName "res"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "acceptorRole"^^xsd:string ;
              ] ;
            sp:predicate media:isFermentationSubstrate ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "res1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasFermentation ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasFermentationOfSubstance ;
            sp:subject [
                sp:varName "res1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfOrganicCompoundGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g1"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "res1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "res"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredFermentationSubstrateRole_R302" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "acceptorRole"^^xsd:string ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(302) If an organism ferments substance that is member of organic compound group, then the given substance has fermentation substrate as biological role."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "res"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespiration ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespirationOfSubstance ;
            sp:subject [
                sp:varName "res"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "acceptorRole"^^xsd:string ;
              ] ;
            sp:predicate media:isExogenousElectronAcceptor ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "res1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespiration ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespirationOfSubstance ;
            sp:subject [
                sp:varName "res1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object obo:CHEBI_15379 ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "res1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "res"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredExogenousElectronAcceptorRole_R301" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "acceptorRole"^^xsd:string ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(301) If an organism respires О2 (CHEBI_153679), then the O2 has biological role exogenous electro acceptor."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "res"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespiration ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespirationOfSubstance ;
            sp:subject [
                sp:varName "res"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "acceptorRole"^^xsd:string ;
              ] ;
            sp:predicate media:isExogenousElectronAcceptor ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "res1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespiration ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespirationOfSubstance ;
            sp:subject [
                sp:varName "res1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAnaerobicExogenousElectronAcceptorGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g1"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "res1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "res"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredExogenousElectronAcceptorRole_R300" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "acceptorRole"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(300) If an organism respires substance that is member of anaerobic exogenous electron acceptor group, then the given substance has exogenous electron acceptor as biological role."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAnaerobePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Anaerobe ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "og"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAnoxicCondition ;
            sp:subject [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Anoxic ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAnaerobePhenotype_R51" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "og1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:composedOf ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAerobicCondition ;
                      sp:subject [
                          sp:varName "og1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:composedOf ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasMicroaerobicCondition ;
                      sp:subject [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "og3"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:composedOf ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond3"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAirCondition ;
                      sp:subject [
                          sp:varName "og3"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "s"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAnaerobePhenotype ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "res1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasRespiration ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "sub"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasCellularActivityOfSubstance ;
                      sp:subject [
                          sp:varName "res1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(51) If an organism grows in anoxic conditions, then the organism is anaerobe. This rule excludes the same observation who respires CHEBI_ID that is not oxygen.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAnaerobicRespirationPhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:AnaerobicRespiration ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "res"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespiration ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespirationOfSubstance ;
            sp:subject [
                sp:varName "res"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAnaerobicExogenousElectronAcceptorGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g1"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAnaerobicRespirationPhenotype_R50" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "s"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAnaerobicRespirationPhenotype ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object obo:CHEBI_15379 ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "sub"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "go2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasGrowthObservation ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAnoxicCondition ;
                      sp:subject [
                          sp:varName "go2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(50) If an organism respires substance that is different than O2 and is member of Anaerobic Exogenous Electron Acceptor Group, then the organism has Anaerobic respiration phenotype."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasResistantPhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Resistant ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasUninhibitedGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAntimicrobialGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredResistantPhenotype_R58" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "s2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasResistantPhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object N4L:Resistant ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "s2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(58) if strain has uninhibited growth under given chemical entity X [optionally given concentration, value  and unit] and that chemical entity X is member of antimicrobial group then given strain is resistant to given chemical entity and that chemical entity is antimicrobial agent as biological role.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasResistantPhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Resistant ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "agent"^^xsd:string ;
              ] ;
            sp:predicate media:isAntimicrobialAgent ;
            sp:subject [
                sp:varName "compCond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasUninhibitedGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ingredient"^^xsd:string ;
              ] ;
            sp:predicate media:containsIngredient ;
            sp:subject [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate media:hasSubstance ;
            sp:subject [
                sp:varName "ingredient"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAntimicrobialGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "compCond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_resistantPhenotype_R269" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "compCond1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_antimicrobialAgent_R269" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "s2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasResistantPhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object N4L:Resistant ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "s2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(269) if strain has uninhibited growth under given mixture X  and that mixture X has a substance that is member of antimicrobial group then given strain is resistant to given mixture and that mixture is antimicrobial agent as biological role.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSusceptiblePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Susceptible ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "agent"^^xsd:string ;
              ] ;
            sp:predicate media:isAntimicrobialAgent ;
            sp:subject [
                sp:varName "compCond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasInhibitedGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasComponentCondition ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ingredient"^^xsd:string ;
              ] ;
            sp:predicate media:containsIngredient ;
            sp:subject [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate media:hasSubstance ;
            sp:subject [
                sp:varName "ingredient"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAntimicrobialGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "compCond1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "compCond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_susceptiblePhenotype_R268" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "compCond1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_antimicrobialAgent_R268" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs11"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "s11"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasSusceptiblePhenotype ;
                      sp:subject [
                          sp:varName "obs11"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(268) If strain has inhibited growth under mixture X and that mixture  X has a substance that is member of antimicrobial agent group, then the strain has susceptible phenotype and given mixture X  and the mixture is antimicrobial agent as biological role.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSusceptiblePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Susceptible ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "agent"^^xsd:string ;
              ] ;
            sp:predicate media:isAntimicrobialAgent ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasInhibitedGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfAntimicrobialGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_susceptiblePhenotype_R60" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "cond1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_antimicrobialAgent_R60" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "agent"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs11"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "s1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasSusceptiblePhenotype ;
                      sp:subject [
                          sp:varName "obs11"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "growth11"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:composedOf ;
                      sp:subject [
                          sp:varName "obs11"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond11"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasSubstanceCondition ;
                      sp:subject [
                          sp:varName "growth11"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "agent11"^^xsd:string ;
                        ] ;
                      sp:predicate media:isAntimicrobialAgent ;
                      sp:subject [
                          sp:varName "cond11"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(60) If strain has inhibited growth under chemical entity X [optionally concentration, value and unit are given] and that chemical entity X is member of antimicrobial agent group, then the strain has susceptible phenotype and given chemical entity X is antimicrobial agent as biological role.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "util"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoUtilization ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject [
                sp:varName "util"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "csGroup"^^xsd:string ;
              ] ;
            sp:predicate media:isMemberOfOrganicCompoundGroup ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "csGroup"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "ng"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "ng"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfOrganicCompoundGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredNoUtilization_R235" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "util"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "sub1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredCarbonSourceGroup_R235" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "csGroup"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "util2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasNoUtilization ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "sub2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasCellularActivityOfSubstance ;
                      sp:subject [
                          sp:varName "util2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(235) If a strain does not grow in environmental condition y and y is member of organic compound group then the strain has no utilization of y ."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "util"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasUtilization ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject [
                sp:varName "util"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cs"^^xsd:string ;
              ] ;
            sp:predicate media:isCarbonSource ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:CarbonSource ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "gr"^^xsd:string ;
              ] ;
            sp:predicate media:isMemberOfOrganicCompoundGroup ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "gr"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "g"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "g"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfOrganicCompoundGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredUtilization_R234" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "util"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "sub1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredCarbonSourceRole_R234" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "sub1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredCarbonSourceGroup_R234" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "gr"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "util2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasUtilization ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "sub2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasCellularActivityOfSubstance ;
                      sp:subject [
                          sp:varName "util2"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "gr2"^^xsd:string ;
                        ] ;
                      sp:predicate media:isMemberOfOrganicCompoundGroup ;
                      sp:subject [
                          sp:varName "sub2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      spin:thisUnbound "true"^^xsd:boolean ;
      rdfs:comment "R(234) If a strain grows in environmental condition y and y is member of organic compound group then the strain has utilization of y and y has biological role named as carbon source."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "gr"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "gr"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCondition ;
            sp:subject [
                sp:varName "gr"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:OxygenCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "val"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "unit"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasUnit ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "gr1"^^xsd:string ;
              ] ;
            sp:predicate N4L:composedOf ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "gr1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubstanceCondition ;
            sp:subject [
                sp:varName "gr1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object obo:CHEBI_15379 ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "val"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasEnvironmentalConditionValue ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "unit1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasUnit ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "unit1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "unit"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOxygenCondition_R276" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredGrowthObservation_R276" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "gr"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(276) Maps growth observation under chemical entity CHEBI_15379 (O2), value and unit to correspoding oxygen condition concepts (Anoxic, Aerobic, Microaerobic, Air)."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "nog"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMicroaerobicCondition ;
            sp:subject [
                sp:varName "nog"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAirCondition ;
            sp:subject [
                sp:varName "g"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "nog1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond5"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAerobicCondition ;
            sp:subject [
                sp:varName "nog1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredNoGrowthInMicroaerobic_R283" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "nog"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredMicroaerobicCondition_R283" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredNoGrowthInAir_R283" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "g"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAirCondition_R283" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "og11"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasNoGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond11"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasMicroaerobicCondition ;
                      sp:subject [
                          sp:varName "og11"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "g11"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasNoGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond21"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAirCondition ;
                      sp:subject [
                          sp:varName "g11"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(283) If an organism does not grow in aerobic condition then the organism has no-growth in microaerobic and air condition."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAcidophilePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Acidophile ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPHCondition ;
            sp:subject [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:LowPHCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Acidophile ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOptimalGrowth_R37" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredLowPHCondition_R37" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "phc"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasPhEnvironmentalCondition ;
                  sp:subject [
                      sp:varName "cond"^^xsd:string ;
                    ] ;
                ]
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:and ;
                      sp:arg1 [
                          rdf:type sp:ge ;
                          sp:arg1 [
                              sp:varName "phc"^^xsd:string ;
                            ] ;
                          sp:arg2 0.0 ;
                        ] ;
                      sp:arg2 [
                          rdf:type sp:lt ;
                          sp:arg1 [
                              sp:varName "phc"^^xsd:string ;
                            ] ;
                          sp:arg2 6.0 ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "og1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOptimalGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "ph12"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAcidophilePhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasPHCondition ;
                      sp:subject [
                          sp:varName "og1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(37) Organism that is Acidophile has optimal growth in low ph temperature."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasHyperthermophilePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Hyperthermophile ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasExtremeHighTemperatureCondition ;
            sp:subject [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:ExtremeHighTemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "p1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Hyperthermophile ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOptimalGrowth_R45" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredExtremeHighTemperatureCondition_R45" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "p1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOptimalGrowth ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasExtremeHighTemperatureCondition ;
                      sp:subject [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(45) if an organism is Hyperthermophile then optimally grows in extreme-high temperature conditions."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMesophilePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMidRangeTemperatureCondition ;
            sp:subject [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:MidRangeTemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "ph"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Mesophile ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "ph"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "ph"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "ph"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOptimalGrowth_R14" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "ph"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredMidRangeTemperatureCondition_R14" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "p1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasMesophilePhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "og1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOptimalGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasMidRangeTemperatureCondition ;
                      sp:subject [
                          sp:varName "og1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(14) If an organism is Mesophile then grows optimally in mid-range temperature conditions.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMicroaerophilicPhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Microaerophilic ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "nog1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "nog2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAnoxicCondition ;
            sp:subject [
                sp:varName "nog1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Anoxic ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond3"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAirCondition ;
            sp:subject [
                sp:varName "nog2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Air ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond3"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMicroaerobicCondition ;
            sp:subject [
                sp:varName "g"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Microaerobic ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Microaerophilic ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredNoGrowth1_R28" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "nog1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredNoGrowth2_R28" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "nog2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOptimalGrowth_R28" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "g"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAnoxicCondition_R28" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredMicroaerobicCondition_R28" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAirCondition_R28" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond3"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "ph12"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasMicroaerophilicPhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "og1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasNoGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasNoGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond31"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAnoxicCondition ;
                      sp:subject [
                          sp:varName "og1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond32"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAirCondition ;
                      sp:subject [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "sog1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOptimalGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond21"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasMicroaerobicCondition ;
                      sp:subject [
                          sp:varName "sog1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:StrictAerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "s1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:StrictAnaerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "s1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:AerotolerantAnaerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "s1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:FacultativeAnaerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "s1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(28) If organism is microaerophilic then organism grows optimally in microaerobic condition and does not grow in anoxic and air conditions.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNeutrophilePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Neutrophile ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPHCondition ;
            sp:subject [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:NeutralPHCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Neutrophile ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOptimalGrowth_R39" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredNeutralPHCondition_R39" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "phc"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasPhEnvironmentalCondition ;
                  sp:subject [
                      sp:varName "cond"^^xsd:string ;
                    ] ;
                ]
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:and ;
                      sp:arg1 [
                          rdf:type sp:ge ;
                          sp:arg1 [
                              sp:varName "phc"^^xsd:string ;
                            ] ;
                          sp:arg2 6.0 ;
                        ] ;
                      sp:arg2 [
                          rdf:type sp:le ;
                          sp:arg1 [
                              sp:varName "phc"^^xsd:string ;
                            ] ;
                          sp:arg2 8.0 ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "ph12"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasNeutrophilePhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "og1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOptimalGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasPHCondition ;
                      sp:subject [
                          sp:varName "og1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(39) Organism that is Neutrophile has optimal growth in neutral ph conditions.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPsychrophilePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Psychrophile ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasModerateLowTemperatureCondition ;
            sp:subject [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:ModerateLowTemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "p1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Psychrophile ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "p1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOptimalGrowth_R15" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredModerateLowTemperatureCondition_R15" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "ph12"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasPsychrophilePhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOptimalGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasModerateLowTemperatureCondition ;
                      sp:subject [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "p2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasPhenotype ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object N4L:ExtremePsychrophile ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "p2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(15) If an organism is Psychrophile then grows optimally in moderate-low temperature conditions.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasStrictAerobePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "nog1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "nog2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAnoxicCondition ;
            sp:subject [
                sp:varName "nog1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMicroaerobicCondition ;
            sp:subject [
                sp:varName "nog2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond3"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAirCondition ;
            sp:subject [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Anoxic ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Microaerobic ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Air ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond3"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "p1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:StrictAerobe ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "p1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOptimalGrowth_R47" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredNoGrowth1_R47" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "nog1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredNoGrowth2_R47" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "nog2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAnoxicCondition_R47" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredMicroaerobicCondition_R47" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAirCondition_R47" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond3"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:StrictAnaerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "p1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:AerotolerantAnaerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "p1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:Microaerophilic ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "p1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:FacultativeAnaerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "p1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(47) if an organism is asseted as strict aerobe, then the organism must grow optimally in air condition and does not grow in anoxic and microaerobic conditions.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasStrictAnaerobePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAnoxicCondition ;
            sp:subject [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "nog2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "nog1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMicroaerobicCondition ;
            sp:subject [
                sp:varName "nog1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond3"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAirCondition ;
            sp:subject [
                sp:varName "nog2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Anoxic ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Microaerobic ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Air ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond3"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "p1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:StrictAnaerobe ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "p1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOptimalGrowth_R46" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredNoGrowth1_R46" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "nog1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredNoGrowth2_R46" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "nog2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAnoxicCondition_R46" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredMicroaerobicCondition_R46" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAirCondition_R46" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond3"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:StrictAerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "p1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:FacultativeAnaerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "p1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:Microaerophilic ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "p1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:AerotolerantAnaerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "p1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(46) if an organism is asserted as strict anaerobe, then the organism must grow optimally in anoxic condition and does not grow in air and microaerobic conditions.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasThermophilePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Thermophile ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasModerateHighTemperatureCondition ;
            sp:subject [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:ModerateHighTemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "p1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Thermophile ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOptimalGrowth_R18" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredModerateHighTemperatureCondition_R18" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "p1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOptimalGrowth ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasModerateHighTemperatureCondition ;
                      sp:subject [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "p2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasPhenotype ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object N4L:Hyperthermophile ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "p2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(18) If an organism is Thermophile then the strain has optimal growth in moderate high temperature conditions .#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasThermotolerantPhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Thermotolerant ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasModerateHighTemperatureCondition ;
            sp:subject [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:ModerateHighTemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMidRangeTemperatureCondition ;
            sp:subject [
                sp:varName "og1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:MidRangeTemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "p1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Thermotolerant ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredSubOptimalGrowth_R17" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOptimalGrowth_R17" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredModerateHighTemperatureCondition_R17" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "p1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredMidRangeTemperatureCondition_R17" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "p1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "ph12"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasThermotolerantPhenotype ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasSubOptimalGrowth ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasModerateHighTemperatureCondition ;
                      sp:subject [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "org3"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOptimalGrowth ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond3"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasMidRangeTemperatureCondition ;
                      sp:subject [
                          sp:varName "org3"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(17) If an organism is Thermotolerant then has suboptimal growth in moderate high temperature conditions and optimally grows in mid-range temperature conditions.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAlkalophilePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Alkalophile ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "p1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPHCondition ;
            sp:subject [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:HighPHCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Alkalophile ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "p1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOptimalGrowth_R38" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredHighPHCondition_R38" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "phc"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasPhEnvironmentalCondition ;
                  sp:subject [
                      sp:varName "cond"^^xsd:string ;
                    ] ;
                ]
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:and ;
                      sp:arg1 [
                          rdf:type sp:gt ;
                          sp:arg1 [
                              sp:varName "phc"^^xsd:string ;
                            ] ;
                          sp:arg2 8.0 ;
                        ] ;
                      sp:arg2 [
                          rdf:type sp:le ;
                          sp:arg1 [
                              sp:varName "phc"^^xsd:string ;
                            ] ;
                          sp:arg2 14.00 ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "ph12"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAlkalophilePhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "og1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOptimalGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasPHCondition ;
                      sp:subject [
                          sp:varName "og1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(38) Organism that is Alkalophile has optimal growth in high PH conditions."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ph1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAerobePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Aerobe ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "ph1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "nog"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAnoxicCondition ;
            sp:subject [
                sp:varName "nog"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Anoxic ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAerobicCondition ;
            sp:subject [
                sp:varName "g"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Aerobic ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Aerobe ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredNoGrowth_R11" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "nog"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAnoxicCondition_R11" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOptimalGrowth_R11" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "g"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAerobicCondition_R11" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAerobePhenotype_R11" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "ph1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "ph2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAerobePhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "og11"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasNoGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond11"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAnoxicCondition ;
                      sp:subject [
                          sp:varName "og11"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "g11"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOptimalGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAerobicCondition ;
                      sp:subject [
                          sp:varName "g11"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:FacultativeAnaerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "s1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:StrictAnaerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "s1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:AerotolerantAnaerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "s1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(11) If an organism is Aerobe then the organism has no-growth in anoxic conditions and optimally grows in aerobic condition."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ph1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAerotolerantAnaerobePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:AerotolerantAnaerobe ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "ph1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAnoxicCondition ;
            sp:subject [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMicroaerobicCondition ;
            sp:subject [
                sp:varName "g"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Anoxic ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Microaerobic ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:AerotolerantAnaerobe ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOptimalGrowth_R49" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredSuboptimalGrowth_R49" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "g"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAnoxicCondition_R49" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredMicroaerobicCondition_R49" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAerotolerantAnaerobePhenotype_R49" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "ph1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "ph12"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAerotolerantAnaerobePhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "og1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOptimalGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond31"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAnoxicCondition ;
                      sp:subject [
                          sp:varName "og1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "g1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasSubOptimalGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond21"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasMicroaerobicCondition ;
                      sp:subject [
                          sp:varName "g1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:StrictAerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "s1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:Microaerophilic ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "s1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:FacultativeAnaerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "s1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:StrictAnaerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "s1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(49) If an organism is aerotolerant anaerobe then it optimally grows in anoxic and suboptimally grows in microaerobic conditions.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ph1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAnaerobePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Anaerobe ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "ph1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "nog"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAnoxicCondition ;
            sp:subject [
                sp:varName "nog"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Anoxic ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Anaerobe ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOptimalGrowth_R12" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "nog"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAnoxicCondition_R12" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "s1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAnaerobePhenotype_R12" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "ph1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "ph2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAnaerobePhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "og1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOptimalGrowth ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAnoxicCondition ;
                      sp:subject [
                          sp:varName "og1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:FacultativeAnaerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "s1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:StrictAerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "s1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object N4L:Microaerophilic ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "s1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(12) If an organism is Anaerobe, then the organism has optimal growth in anoxic conditions.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ph1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasExtremePsychrophilePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:ExtremePsychrophile ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "ph1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasExtremeLowTemperatureCondition ;
            sp:subject [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:ExtremeLowTemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "ph"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:ExtremePsychrophile ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "ph"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "ph"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "ph1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "ph"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOptimalGrowth_R13" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "ph"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredExtremeLowTemperatureCondition_R13" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "ph12"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasExtremePsychrophilePhenotype ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOptimalGrowth ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasExtremeLowTemperatureCondition ;
                      sp:subject [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(13) If an organism is Extreme Psychrophile then grows optimally in extreme-low temperature conditions.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ph1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPsychrotolerantPhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Psychrotolerant ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "ph1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasModerateLowTemperatureCondition ;
            sp:subject [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:ModerateLowTemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMidRangeTemperatureCondition ;
            sp:subject [
                sp:varName "og1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:MidRangeTemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "ph"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Psychrotolerant ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "ph"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferrredSubOptimalGrowth_R16" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferrredOptimalGrowth_R16" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferrredModerateLowTemperatureCondition_R16" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferrredMidRangeTemperatureCondition_R16" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "ph"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "ph1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "ph12"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasPsychrotolerantPhenotype ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOptimalGrowth ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasMidRangeTemperatureCondition ;
                      sp:subject [
                          sp:varName "og2"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "org3"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasSubOptimalGrowth ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond3"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasModerateLowTemperatureCondition ;
                      sp:subject [
                          sp:varName "org3"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(16) If an organism is Psychrotolerant then has suboptiomal growth in moderate low temperature conditions, and optimally grows in mid-range temperature conditions.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ph2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAerotolerantAnaerobePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:AerotolerantAnaerobe ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "ph2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "growth1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubOptimalGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMicroaerobicCondition ;
            sp:subject [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Microaerobic ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "growth"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasSubOptimalGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAirCondition ;
            sp:subject [
                sp:varName "growth"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Air ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ph1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:AerotolerantAnaerobe ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "ph1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredSubOptimalGrowth_R55" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "growth1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAirCondition_R55" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAerotolerantAnaerobePhenotype_R55" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "ph2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "growth2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasGrowth ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasMicroaerobicCondition ;
                      sp:subject [
                          sp:varName "growth2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(55) If an organism has suboptimal growth in air conditions and organism has Aerotolerant anaerobe phenotype, then the organism has suboptimal growth in microaerobic conditions."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "subOptGrowth1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "tempCond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasModerateLowTemperatureCondition ;
            sp:subject [
                sp:varName "subOptGrowth1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:ModerateLowTemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "tempCond1"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ph1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Psychrotolerant ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "ph1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "subOptGrowth"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasGrowth ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "tempCond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasExtremeLowTemperatureCondition ;
            sp:subject [
                sp:varName "subOptGrowth"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredGrowth_R54" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "subOptGrowth1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredModerateLowTemperatureCondition_R54" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "tempCond1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "subOptGrowth2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasGrowth ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "tempCond2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasModerateLowTemperatureCondition ;
                      sp:subject [
                          sp:varName "subOptGrowth2"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object N4L:ModerateLowTemperatureCondition ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "tempCond2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(54) If an organism (that is Psychrotolerant) grows in extreme-low temperature conditions, then the organism must grow in moderate-low temperature conditions."^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "drs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasDocumentResource ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fer"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasFermentation ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Fermentation ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "fer"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "substance1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasFermentationOfSubstance ;
            sp:subject [
                sp:varName "fer"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:ChemicalEntity ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "substance1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate media:isMemberOfOrganicCompoundGroup ;
            sp:subject [
                sp:varName "substance1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fermentationRole"^^xsd:string ;
              ] ;
            sp:predicate media:isFermentationSubstrate ;
            sp:subject [
                sp:varName "substance1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "obs2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "drs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasDocumentResource ;
            sp:subject [
                sp:varName "obs2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "res"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespiration ;
            sp:subject [
                sp:varName "obs2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Respiration ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "res"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "oxygen"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespirationOfSubstance ;
            sp:subject [
                sp:varName "res"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "acceptorRole"^^xsd:string ;
              ] ;
            sp:predicate media:isExogenousElectronAcceptor ;
            sp:subject [
                sp:varName "oxygen"^^xsd:string ;
              ] ;
          ]
          [
            sp:object obo:CHEBI_15379 ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "oxygen"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "ph"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "drs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasDocumentResource ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:FacultativeAnaerobe ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "ph"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "drs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "drs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredFermentation_R27" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fer"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredChemicalEntity_R27" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "substance1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredRespiration_R27" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "res"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOxygenSubstance_R27" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "oxygen"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredFermentationObservation_R27" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredRespirationObservation_R27" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOrganicCompoundGroup_R27" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "group"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredExogenousElectronAcceptorRole_R27" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "acceptorRole"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredFermentationSubstrateRole_R27" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "fermentationRole"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs11"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "fer1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasFermentation ;
                      sp:subject [
                          sp:varName "obs11"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "subFermentation1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasFermentationOfSubstance ;
                      sp:subject [
                          sp:varName "fer1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "type"^^xsd:string ;
                        ] ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "subFermentation1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object N4L:Fermentation ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "fer1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "obs21"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "res1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasRespiration ;
                      sp:subject [
                          sp:varName "obs21"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "subRespiration1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasRespirationOfSubstance ;
                      sp:subject [
                          sp:varName "res1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object obo:CHEBI_15379 ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "subRespiration1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object N4L:Respiration ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "res1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(27)  If an organism is facultative anaerobe then the organism ferments a substance (as a member of Organic Compound Group) that has biological role fermentation substrate, and respires oxygen that has Exogenous Electron Acceptor as biological role. #"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasPhenotype ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:FacultativeAnaerobe ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "fer"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasFermentation ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "subFermentation"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasFermentationOfSubstance ;
            sp:subject [
                sp:varName "fer"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "subFermentation"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object media:isMemberOfOrganicCompoundGroup ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Fermentation ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "fer"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "obs2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "res"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespiration ;
            sp:subject [
                sp:varName "obs2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "subRespiration"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasRespirationOfSubstance ;
            sp:subject [
                sp:varName "res"^^xsd:string ;
              ] ;
          ]
          [
            sp:object obo:CHEBI_15379 ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "subRespiration"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Respiration ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "res"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs2"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredFactultativeAnaerobePhenotype_R44" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "s2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasPhenotype ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object N4L:FacultativeAnaerobe ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "s2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      rdf:type sp:TriplePath ;
                      sp:object obo:CHEBI_15379 ;
                      sp:path [
                          rdf:type sp:ModPath ;
                          sp:modMax -2 ;
                          sp:modMin 0 ;
                          sp:subPath rdfs:subClassOf ;
                        ] ;
                      sp:subject [
                          sp:varName "type"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(44) if an organism ferments a substance (that is member of organic compound group) and respires oxygen (O2) then the organism has facultative anaerobe phenotype.#"^^xsd:string ;
    ] ;
  rdfs:label "Strain"^^xsd:string ;
  rdfs:subClassOf N4L:Organism ;
.
N4L:StrictAerobe
  rdf:type rdfs:Class ;
  rdfs:label "Strict aerobe"^^xsd:string ;
  rdfs:subClassOf N4L:Aerobe ;
.
N4L:StrictAnaerobe
  rdf:type rdfs:Class ;
  rdfs:label "Strict anaerobe"^^xsd:string ;
  rdfs:subClassOf N4L:Anaerobe ;
.
N4L:Strip
  rdf:type rdfs:Class ;
  rdfs:label "Strip"^^xsd:string ;
  rdfs:subClassOf N4L:Method ;
.
N4L:SubOptimalGrowth
  rdf:type rdfs:Class ;
  rdfs:label "Sub optimal growth"^^xsd:string ;
  rdfs:subClassOf N4L:Growth ;
  owl:disjointWith N4L:UninhibitedGrowth ;
.
N4L:SubstanceProduction
  rdf:type rdfs:Class ;
  rdfs:label "Substance production observation"^^xsd:string ;
  rdfs:subClassOf N4L:CellularActivity ;
.
N4L:SubstrateUtilization
  rdf:type rdfs:Class ;
  rdfs:label "Carbon source utilization"^^xsd:string ;
  rdfs:subClassOf N4L:Metabolism ;
.
N4L:SulfurGranules
  rdf:type rdfs:Class ;
  rdfs:label "Sulfur granules"^^xsd:string ;
  rdfs:subClassOf N4L:StorageGranule ;
.
N4L:Susceptible
  rdf:type rdfs:Class ;
  rdfs:label "Susceptible"^^xsd:string ;
  rdfs:subClassOf N4L:AntimicrobialPhenotype ;
.
N4L:TemperatureCondition
  rdf:type rdfs:Class ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object N4L:ExtremeHighTemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "tv"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasTemperatureValue ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:gt ;
                sp:arg1 [
                    sp:varName "tv"^^xsd:string ;
                  ] ;
                sp:arg2 80.0 ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(92) infer extreme-high temperature condition based on temperature value.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object N4L:ExtremeLowTemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "tv"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasTemperatureValue ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:lt ;
                sp:arg1 [
                    sp:varName "tv"^^xsd:string ;
                  ] ;
                sp:arg2 0.0 ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(91) infer extreme - low temperature condition based on temperature value.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object N4L:MidRangeTemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "tv"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasTemperatureValue ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:and ;
                sp:arg1 [
                    rdf:type sp:gt ;
                    sp:arg1 [
                        sp:varName "tv"^^xsd:string ;
                      ] ;
                    sp:arg2 15.0 ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:lt ;
                    sp:arg1 [
                        sp:varName "tv"^^xsd:string ;
                      ] ;
                    sp:arg2 45.0 ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(93) infer mid-range temperature condition based on temperature value.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object N4L:ModerateHighTemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "tv"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasTemperatureValue ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:and ;
                sp:arg1 [
                    rdf:type sp:ge ;
                    sp:arg1 [
                        sp:varName "tv"^^xsd:string ;
                      ] ;
                    sp:arg2 45.0 ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:le ;
                    sp:arg1 [
                        sp:varName "tv"^^xsd:string ;
                      ] ;
                    sp:arg2 80.0 ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(94) infer moderate-high temperature condition based on temperature value.#"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object N4L:ModerateLowTemperatureCondition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "tv"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasTemperatureValue ;
            sp:subject [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:and ;
                sp:arg1 [
                    rdf:type sp:ge ;
                    sp:arg1 [
                        sp:varName "tv"^^xsd:string ;
                      ] ;
                    sp:arg2 0.0 ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:le ;
                    sp:arg1 [
                        sp:varName "tv"^^xsd:string ;
                      ] ;
                    sp:arg2 15.0 ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "s"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "R(95) infer moderate-low temperature condition based on temperature value.#"^^xsd:string ;
    ] ;
  rdfs:label "Temperature condition"^^xsd:string ;
  rdfs:subClassOf N4L:Condition ;
.
N4L:TemperaturePhenotype
  rdf:type rdfs:Class ;
  rdfs:label "Temperature phenotype"^^xsd:string ;
  rdfs:subClassOf N4L:Phenotype ;
.
N4L:Thermophile
  rdf:type rdfs:Class ;
  rdfs:label "Thermophile"^^xsd:string ;
  rdfs:subClassOf N4L:TemperaturePhenotype ;
  owl:disjointWith N4L:Mesophile ;
  owl:disjointWith N4L:Psychrophile ;
.
N4L:Thermotolerant
  rdf:type rdfs:Class ;
  rdfs:label "Thermotolerant"^^xsd:string ;
  rdfs:subClassOf N4L:Mesophile ;
  owl:disjointWith N4L:Psychrotolerant ;
.
N4L:UninhibitedGrowth
  rdf:type rdfs:Class ;
  rdfs:subClassOf N4L:InhibitedGrowthObservation ;
  owl:disjointWith N4L:InhibitedGrowth ;
  owl:disjointWith N4L:SubOptimalGrowth ;
.
N4L:Utilization
  rdf:type rdfs:Class ;
  rdfs:label "Utilization"^^xsd:string ;
  rdfs:subClassOf N4L:SubstrateUtilization ;
.
N4L:UtilizationOfGroupMembers
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b67364 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b67364 ;
          ]
          [
            sp:object [
                sp:varName "type2"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b67364 ;
          ]
          [
            sp:object [
                sp:varName "dres2"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b67364 ;
          ]
          [
            sp:object [
                sp:varName "label1"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b67364 ;
          ]
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b5593 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b5593 ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b5593 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b5593 ;
          ]
          [
            sp:object [
                sp:varName "label2"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b5593 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "utl2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thirdTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "utl2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "utl1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "secondTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thirdTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "utl1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type2"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type2"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "sub1"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "sub2"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:or ;
                      sp:arg1 [
                          rdf:type sp:regex ;
                          sp:arg1 [
                              rdf:type sp:str ;
                              sp:arg1 [
                                  sp:varName "type1"^^xsd:string ;
                                ] ;
                            ] ;
                          sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                        ] ;
                      sp:arg2 [
                          rdf:type sp:regex ;
                          sp:arg1 [
                              rdf:type sp:str ;
                              sp:arg1 [
                                  sp:varName "type1"^^xsd:string ;
                                ] ;
                            ] ;
                          sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:or ;
                      sp:arg1 [
                          rdf:type sp:regex ;
                          sp:arg1 [
                              rdf:type sp:str ;
                              sp:arg1 [
                                  sp:varName "type2"^^xsd:string ;
                                ] ;
                            ] ;
                          sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                        ] ;
                      sp:arg2 [
                          rdf:type sp:regex ;
                          sp:arg1 [
                              rdf:type sp:str ;
                              sp:arg1 [
                                  sp:varName "type2"^^xsd:string ;
                                ] ;
                            ] ;
                          sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type1"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type2"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres2"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs2"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "52: " ;
                sp:arg10 ". The strain can not have property" ;
                sp:arg11 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "secondTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg12 " for " ;
                sp:arg13 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type1"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg14 " substance and " ;
                sp:arg15 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "otherTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg16 " of " ;
                sp:arg17 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type2"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg18 " substance group." ;
                sp:arg2 "Given strain has property " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "otherTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " of a substance group  " ;
                sp:arg5 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type2"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg6 "  that has member " ;
                sp:arg7 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type1"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg8 " over property " ;
                sp:arg9 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/media/" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "52: " ;
                sp:arg10 ". The strain can not have " ;
                sp:arg11 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "secondTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg12 " of  " ;
                sp:arg13 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type1"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg14 " substance and " ;
                sp:arg15 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "otherTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg16 " of " ;
                sp:arg17 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type2"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg18 " substance group" ;
                sp:arg2 "Given strain has property " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "secondTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " of a substance  " ;
                sp:arg5 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type1"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg6 "  that is member of  " ;
                sp:arg7 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type2"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg8 "  group over property " ;
                sp:arg9 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/media/" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label2"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:secondTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:thirdTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T52: Strain has utilization or no utilization for a substance that is member of a group over property {?templateProperty} . "^^xsd:string ;
  rdfs:label "Utilization of group members"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:UtilizationVsBiologicalRole
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b61830 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b61830 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b61830 ;
          ]
          [
            sp:object [
                sp:varName "dres2"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b61830 ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b61830 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b61830 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "obs2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "utl2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thirdTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "utl2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cs2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "sub2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "utl1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "secondTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thirdTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "utl1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cs1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "utl1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "utl2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "cs1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "cs2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres2"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs2"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "10: " ;
                sp:arg10 " as biological role." ;
                sp:arg2 "Given strain can not have " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "secondTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " and " ;
                sp:arg5 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "otherTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg6 " of substance " ;
                sp:arg7 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type1"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg8 " that has property " ;
                sp:arg9 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/media/" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:secondTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:thirdTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T10: Strain has property {?otherTemplateProperty} and {?secondTemplateProperty} of {?type1} substance that has property {?templateProperty} as biological role."^^xsd:string ;
  rdfs:label "Utilization vs biological role"^^xsd:string ;
  rdfs:subClassOf N4L:UtilizationVsNoUtilizationIndependentOfBiologicalRole ;
.
N4L:UtilizationVsNoUtilizationIndependentOfBiologicalRole
  rdf:type spin:ConstructTemplate ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b7102 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b7102 ;
          ]
          [
            sp:object [
                sp:varName "dres1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b7102 ;
          ]
          [
            sp:object [
                sp:varName "dres2"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b7102 ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b7102 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b7102 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "obs2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "utl2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thirdTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "utl2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "utl1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "secondTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thirdTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "utl1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type1"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "utl1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "utl2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "cs1"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "cs2"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres2"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs2"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "62: " ;
                sp:arg2 "Given strain can not have " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "secondTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg4 " and " ;
                sp:arg5 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "otherTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/" ;
                  ] ;
                sp:arg6 " of substance " ;
                sp:arg7 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "type1"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg8 " independent of biological role." ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:secondTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:thirdTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T62: Strain has property {?otherTemplateProperty} and {?secondTemplateProperty} of {?type1} substance independent of a biological role."^^xsd:string ;
  rdfs:label "Utilization vs no utilization independent of biological role"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:UtilizationWithBiologicalRoleAndNotMemberOfGroup
  rdf:type spin:Template ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object spin:ConstraintViolation ;
            sp:predicate rdf:type ;
            sp:subject _:b67485 ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate spin:violationRoot ;
            sp:subject _:b67485 ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate spin:violationValue ;
            sp:subject _:b67485 ;
          ]
          [
            sp:object [
                sp:varName "dres"^^xsd:string ;
              ] ;
            sp:predicate spin:violationPath ;
            sp:subject _:b67485 ;
          ]
          [
            sp:object [
                sp:varName "label"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject _:b67485 ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "utl"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasUtilization ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject [
                sp:varName "utl"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "role"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:or ;
                sp:arg1 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://purl.obolibrary.org/obo/CHEBI_" ;
                  ] ;
                sp:arg2 [
                    rdf:type sp:regex ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "type"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/" ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                      sp:predicate rdfs:subClassOf ;
                      sp:subject [
                          sp:varName "type"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object owl:Restriction ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "group"^^xsd:string ;
                        ] ;
                      sp:predicate owl:allValuesFrom ;
                      sp:subject [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "otherTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:predicate owl:onProperty ;
                      sp:subject [
                          sp:varName "?0"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  rdf:type sp:Filter ;
                  sp:expression [
                      rdf:type sp:isBlank ;
                      sp:arg1 [
                          sp:varName "utl"^^xsd:string ;
                        ] ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "dres"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasDocumentResource ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 "11: " ;
                sp:arg2 "Given strain can not have utilization of a substance with biological role " ;
                sp:arg3 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "templateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/media/" ;
                  ] ;
                sp:arg4 " , but the substance is not member of a group over property " ;
                sp:arg5 [
                    rdf:type sp:strafter ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "otherTemplateProperty"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "http://doi.org/10.1601/media/" ;
                  ] ;
                sp:arg6 "." ;
              ] ;
            sp:variable [
                sp:varName "label"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T11: Strain utilizes substance as {?templateProperty} biological role, but substance is not member of {?otherTemplateProperty}."^^xsd:string ;
  rdfs:label "Utilization with biological role and not member of group"^^xsd:string ;
  rdfs:subClassOf spin:ConstructTemplates ;
.
N4L:VariableAcidProduction
  rdf:type rdfs:Class ;
  rdfs:label "Variable acid production"^^xsd:string ;
  rdfs:subClassOf N4L:AcidProduction ;
.
N4L:VariableFermentation
  rdf:type rdfs:Class ;
  rdfs:label "Variably fermentation"^^xsd:string ;
  rdfs:subClassOf N4L:Fermentation ;
.
N4L:VariableUtilization
  rdf:type rdfs:Class ;
  rdfs:label "Variable utilization"^^xsd:string ;
  rdfs:subClassOf N4L:Utilization ;
.
N4L:VeryHighTemperatureCondition
  rdf:type rdfs:Class ;
  rdfs:label "Very high temperature condition"^^xsd:string ;
  rdfs:subClassOf N4L:TemperatureCondition ;
.
N4L:Vibrio
  rdf:type rdfs:Class ;
  rdfs:label "Vibrio"^^xsd:string ;
  rdfs:subClassOf N4L:CellShapeObservation ;
.
N4L:WeakAcidProduction
  rdf:type rdfs:Class ;
  rdfs:comment "This term sould be revised to WeakProductionAcid"^^xsd:string ;
  rdfs:label "Weak acid production"^^xsd:string ;
  rdfs:subClassOf N4L:AcidProduction ;
.
N4L:WeakFermentation
  rdf:type rdfs:Class ;
  rdfs:label "Weak fermentation"^^xsd:string ;
  rdfs:subClassOf N4L:Fermentation ;
.
N4L:WeakUtilization
  rdf:type rdfs:Class ;
  rdfs:label "Weak utilization"^^xsd:string ;
  rdfs:subClassOf N4L:Utilization ;
.
N4L:composedOf
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "composed of"^^xsd:string ;
  rdfs:range N4L:AtomicObservation ;
.
N4L:exists
  rdf:type rdf:Property ;
  rdfs:domain N4L:Organism ;
  rdfs:label "exists"^^xsd:string ;
  rdfs:range N4L:ExperimentalEnvironment ;
.
N4L:fifthTemplateProperty
  rdf:type rdf:Property ;
  rdfs:label "fifth template property"^^xsd:string ;
.
N4L:fourthTemplateProperty
  rdf:type rdf:Property ;
  rdfs:label "fourth template property"^^xsd:string ;
.
N4L:hasAcidProduction
  rdf:type rdf:Property ;
  rdfs:label "has acid production"^^xsd:string ;
  rdfs:subPropertyOf N4L:hasSubstanceProduction ;
.
N4L:hasAcidophilePhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has acidophile phenotype"^^xsd:string ;
  rdfs:range N4L:Acidophile ;
  rdfs:subPropertyOf N4L:hasPHPhenotype ;
.
N4L:hasAerobePhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has aerobe phenotype"^^xsd:string ;
  rdfs:range N4L:Aerobe ;
  rdfs:subPropertyOf N4L:hasOxygenPhenotype ;
.
N4L:hasAerobicAcidProduction
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has aerobic acid production"^^xsd:string ;
  rdfs:range N4L:AerobicAcidProduction ;
  rdfs:subPropertyOf N4L:hasAcidProduction ;
.
N4L:hasAerobicCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has aerobic condition"^^xsd:string ;
  rdfs:range N4L:Aerobic ;
  rdfs:subPropertyOf N4L:hasOxygenCondition ;
.
N4L:hasAerotolerantAnaerobePhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has aerotolerant anaerobe phenotype"^^xsd:string ;
  rdfs:range N4L:AerotolerantAnaerobe ;
  rdfs:subPropertyOf N4L:hasAnaerobePhenotype ;
.
N4L:hasAirCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has air condition"^^xsd:string ;
  rdfs:range N4L:Air ;
  rdfs:subPropertyOf N4L:hasOxygenCondition ;
.
N4L:hasAlkalophilePhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has alkalophile phenotype"^^xsd:string ;
  rdfs:range N4L:Alkalophile ;
  rdfs:subPropertyOf N4L:hasPHPhenotype ;
.
N4L:hasAnabolicReaction
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has anabolic reaction"^^xsd:string ;
  rdfs:range N4L:AnabolicReaction ;
  rdfs:subPropertyOf N4L:hasUtilization ;
.
N4L:hasAnaerobePhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has anaerobe phenotype"^^xsd:string ;
  rdfs:range N4L:Anaerobe ;
  rdfs:subPropertyOf N4L:hasOxygenPhenotype ;
.
N4L:hasAnaerobicRespirationPhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has anaerobic respiration phenotype"^^xsd:string ;
  rdfs:range N4L:AnaerobicRespiration ;
  rdfs:subPropertyOf N4L:hasMetabolismPhenotype ;
.
N4L:hasAnoxicCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has anoxic condition"^^xsd:string ;
  rdfs:range N4L:Anoxic ;
  rdfs:subPropertyOf N4L:hasOxygenCondition ;
.
N4L:hasAntimicrobialPhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has antimicrobial phenotype"^^xsd:string ;
  rdfs:range N4L:AntimicrobialPhenotype ;
  rdfs:subPropertyOf N4L:hasAtomicObservationPhenotype ;
.
N4L:hasAssimilation
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has assimilation"^^xsd:string ;
  rdfs:range N4L:Assimilation ;
  rdfs:subPropertyOf N4L:hasUtilization ;
.
N4L:hasAtomicObservationPhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has atomic observation phenotype"^^xsd:string ;
  rdfs:range N4L:Phenotype ;
.
N4L:hasCatabolicReaction
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has catabolic reaction"^^xsd:string ;
  rdfs:range N4L:CatabolicReaction ;
  rdfs:subPropertyOf N4L:hasUtilization ;
.
N4L:hasCellShape
  rdf:type rdf:Property ;
  rdfs:domain N4L:CellShapeObservation ;
  rdfs:label "has cell shape"^^xsd:string ;
  rdfs:subPropertyOf N4L:hasFeature ;
.
N4L:hasCellShapeModifier
  rdf:type rdf:Property ;
  rdfs:domain N4L:CellShapeObservation ;
  rdfs:label "has cell shape modifier"^^xsd:string ;
  rdfs:range N4L:CellShapeModifier ;
  rdfs:subPropertyOf N4L:hasModifier ;
.
N4L:hasCellularActivity
  rdf:type rdf:Property ;
  rdfs:domain rdfs:Resource ;
  rdfs:label "has cellular activity"^^xsd:string ;
  rdfs:range N4L:CellularActivity ;
.
N4L:hasCellularActivityOfSubstance
  rdf:type rdf:Property ;
  rdfs:domain N4L:CellularActivity ;
  rdfs:label "has cellular activity of substance"^^xsd:string ;
  rdfs:range media:Substance ;
.
N4L:hasCellularActivityValue
  rdf:type owl:DatatypeProperty ;
  rdfs:domain N4L:CellularActivity ;
  rdfs:label "has celular activity value"^^xsd:string ;
.
N4L:hasComponentCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has component condition"^^xsd:string ;
  rdfs:range media:Component ;
.
N4L:hasCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has condition"^^xsd:string ;
  rdfs:range N4L:Condition ;
.
N4L:hasDocumentResource
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has document resource"^^xsd:string ;
  rdfs:range N4L:DocumentResource ;
.
N4L:hasEnvironmentalConditionValue
  rdf:type owl:DatatypeProperty ;
  rdfs:label "has environmental condition value"^^xsd:string ;
.
N4L:hasExperimentalCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:ExperimentalEnvironment ;
  rdfs:label "has experimental condition"^^xsd:string ;
  rdfs:range N4L:Condition ;
.
N4L:hasExtremeHighTemperatureCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has extreme high temperature condition"^^xsd:string ;
  rdfs:range N4L:ExtremeHighTemperatureCondition ;
  rdfs:subPropertyOf N4L:hasHighTemperatureCondition ;
.
N4L:hasExtremeLowTemperatureCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has extreme low temperature condition"^^xsd:string ;
  rdfs:range N4L:ExtremeLowTemperatureCondition ;
  rdfs:subPropertyOf N4L:hasLowTemperatureCondition ;
.
N4L:hasExtremePsychrophilePhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has extreme psychrophile phenotype"^^xsd:string ;
  rdfs:range N4L:ExtremePsychrophile ;
  rdfs:subPropertyOf N4L:hasPsychrophilePhenotype ;
.
N4L:hasFacultativeAnaerobePhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has facultative anaerobe phenotype"^^xsd:string ;
  rdfs:range N4L:FacultativeAnaerobe ;
  rdfs:subPropertyOf N4L:hasMetabolismPhenotype ;
.
N4L:hasFeature
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has feature"^^xsd:string ;
  rdfs:range N4L:Feature ;
.
N4L:hasFermentation
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has fermentation"^^xsd:string ;
  rdfs:range N4L:Fermentation ;
  rdfs:subPropertyOf N4L:hasUtilization ;
.
N4L:hasFermentationOfSubstance
  rdf:type rdf:Property ;
  rdfs:domain N4L:Fermentation ;
  rdfs:label "has fermentation of substance"^^xsd:string ;
  rdfs:subPropertyOf N4L:hasCellularActivityOfSubstance ;
.
N4L:hasFermentationValue
  rdf:type owl:DatatypeProperty ;
  rdf:type owl:FunctionalProperty ;
  rdfs:domain N4L:Fermentation ;
  rdfs:label "has fermentation value"^^xsd:string ;
  rdfs:range xsd:boolean ;
  rdfs:subPropertyOf N4L:hasCellularActivityValue ;
.
N4L:hasFlagellaDistribution
  rdf:type rdf:Property ;
  rdfs:domain N4L:FlagellaObservation ;
  rdfs:label "has flagella distribution"^^xsd:string ;
  rdfs:range N4L:FlagellaDistribution ;
  rdfs:subPropertyOf N4L:hasFeature ;
.
N4L:hasFlagellaObservation
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has flagella observation"^^xsd:string ;
  rdfs:range N4L:FlagellaObservation ;
  rdfs:subPropertyOf N4L:composedOf ;
.
N4L:hasFlagellaOrdinal
  rdf:type rdf:Property ;
  rdfs:domain N4L:FlagellaObservation ;
  rdfs:label "has flagella ordinal"^^xsd:string ;
  rdfs:range N4L:FlagellaOrdinal ;
  rdfs:subPropertyOf N4L:hasFeature ;
.
N4L:hasFormOfMotility
  rdf:type rdf:Property ;
  rdfs:domain N4L:Motile ;
  rdfs:label "has form of motility"^^xsd:string ;
  rdfs:range N4L:FormOfMotility ;
  rdfs:subPropertyOf N4L:hasFeature ;
.
N4L:hasFunction
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has function"^^xsd:string ;
  rdfs:range N4L:AtomicObservation ;
.
N4L:hasGasProduction
  rdf:type rdf:Property ;
  rdfs:label "has gas production"^^xsd:string ;
  rdfs:subPropertyOf N4L:hasSubstanceProduction ;
.
N4L:hasGrowth
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has growth"^^xsd:string ;
  rdfs:range N4L:Growth ;
  rdfs:subPropertyOf N4L:hasGrowthObservation ;
.
N4L:hasGrowthInhibitor
  rdf:type rdf:Property ;
  rdfs:domain N4L:Strain ;
  rdfs:label "has growth inhibitor"^^xsd:string ;
  rdfs:range [
      rdf:type owl:Class ;
      owl:unionOf (
          media:Substance
          media:Component
        ) ;
    ] ;
.
N4L:hasGrowthObservation
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has growth observation"^^xsd:string ;
  rdfs:range N4L:GrowthObservation ;
  rdfs:subPropertyOf N4L:composedOf ;
.
N4L:hasHighPHCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has high PHCondition"^^xsd:string ;
  rdfs:range N4L:HighPHCondition ;
  rdfs:subPropertyOf N4L:hasPHCondition ;
.
N4L:hasHighTemperatureCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has high temperature condition"^^xsd:string ;
  rdfs:range N4L:HighTemperatureCondition ;
  rdfs:subPropertyOf N4L:hasTemperatureCondition ;
.
N4L:hasHyperthermophilePhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has hyperthermophile phenotype"^^xsd:string ;
  rdfs:range N4L:Hyperthermophile ;
  rdfs:subPropertyOf N4L:hasThermophilePhenotype ;
.
N4L:hasInclusionBodyObservation
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has inclusion body observation"^^xsd:string ;
  rdfs:range N4L:InclusionBodyObservation ;
  rdfs:subPropertyOf N4L:composedOf ;
.
N4L:hasInhibitedGrowth
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has inhibited growth"^^xsd:string ;
  rdfs:range N4L:InhibitedGrowth ;
  rdfs:subPropertyOf N4L:hasInhibitedGrowthObservation ;
.
N4L:hasInhibitedGrowthObservation
  rdf:type rdf:Property ;
  rdfs:subPropertyOf N4L:hasGrowthObservation ;
.
N4L:hasLowPHCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has low PHCondition"^^xsd:string ;
  rdfs:range N4L:LowPHCondition ;
  rdfs:subPropertyOf N4L:hasPHCondition ;
.
N4L:hasLowTemperatureCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has low temperature codnition"^^xsd:string ;
  rdfs:range N4L:LowTemperatureCondition ;
  rdfs:subPropertyOf N4L:hasTemperatureCondition ;
.
N4L:hasMesophilePhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has mesophile phenotype"^^xsd:string ;
  rdfs:range N4L:Mesophile ;
  rdfs:subPropertyOf N4L:hasTemperaturePhenotype ;
.
N4L:hasMetabolism
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has metabolism"^^xsd:string ;
  rdfs:range N4L:Metabolism ;
  rdfs:subPropertyOf N4L:hasCellularActivity ;
.
N4L:hasMetabolismPhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has metabolism phenotype"^^xsd:string ;
  rdfs:range N4L:MetabolismPhenotype ;
  rdfs:subPropertyOf N4L:hasAtomicObservationPhenotype ;
.
N4L:hasMethod
  rdf:type rdf:Property ;
  rdfs:domain [
      rdf:type owl:Class ;
      owl:unionOf (
          N4L:Phenotype
          N4L:CellularActivity
          N4L:AtomicObservation
        ) ;
    ] ;
  rdfs:label "makes observation"^^xsd:string ;
  rdfs:range N4L:Method ;
.
N4L:hasMicroaerobicCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has microaerobic condition"^^xsd:string ;
  rdfs:range N4L:Microaerobic ;
  rdfs:subPropertyOf N4L:hasOxygenCondition ;
.
N4L:hasMicroaerophilicPhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has microaerophilic phenotype"^^xsd:string ;
  rdfs:range N4L:Microaerophilic ;
  rdfs:subPropertyOf N4L:hasAerobePhenotype ;
.
N4L:hasMidRangeTemperatureCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has mid range temperature condition"^^xsd:string ;
  rdfs:range N4L:MidRangeTemperatureCondition ;
  rdfs:subPropertyOf N4L:hasTemperatureCondition ;
.
N4L:hasMinimumInhibitoryConcentration
  rdf:type rdf:Property ;
  rdfs:domain N4L:Strain ;
  rdfs:label "has minimum inhibitory concentration"^^xsd:string ;
  rdfs:range media:ChemicalEntity ;
.
N4L:hasModerateHighTemperatureCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has moderate high temperature condition"^^xsd:string ;
  rdfs:range N4L:ModerateHighTemperatureCondition ;
  rdfs:subPropertyOf N4L:hasHighTemperatureCondition ;
.
N4L:hasModerateLowTemperatureCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has modetare low temperature condition"^^xsd:string ;
  rdfs:range N4L:ModerateLowTemperatureCondition ;
  rdfs:subPropertyOf N4L:hasLowTemperatureCondition ;
.
N4L:hasModifier
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has modifier"^^xsd:string ;
  rdfs:range N4L:Modifier ;
.
N4L:hasMotilityModifier
  rdf:type rdf:Property ;
  rdfs:domain N4L:MotilityObservation ;
  rdfs:label "has motility modifier"^^xsd:string ;
  rdfs:range N4L:MotilityModifier ;
  rdfs:subPropertyOf N4L:hasModifier ;
.
N4L:hasMotilityObservation
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has motility observation"^^xsd:string ;
  rdfs:range N4L:MotilityObservation ;
  rdfs:subPropertyOf N4L:composedOf ;
.
N4L:hasNeutralPHCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has neutral PHCondition"^^xsd:string ;
  rdfs:range N4L:NeutralPHCondition ;
  rdfs:subPropertyOf N4L:hasPHCondition ;
.
N4L:hasNeutrophilePhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has neutrophile phenotype"^^xsd:string ;
  rdfs:range N4L:Neutrophile ;
  rdfs:subPropertyOf N4L:hasPHPhenotype ;
.
N4L:hasNoAcidProduction
  rdf:type rdf:Property ;
  rdfs:label "has no acid production"^^xsd:string ;
  rdfs:subPropertyOf N4L:hasSubstanceProduction ;
.
N4L:hasNoAssimilation
  rdf:type rdf:Property ;
  rdfs:label "has no assimilation"^^xsd:string ;
  rdfs:range N4L:NoAssimilation ;
  rdfs:subPropertyOf N4L:hasNoUtilization ;
.
N4L:hasNoFermentation
  rdf:type rdf:Property ;
  rdfs:label "has no fermentation"^^xsd:string ;
  rdfs:range N4L:NoFermentation ;
  rdfs:subPropertyOf N4L:hasNoUtilization ;
.
N4L:hasNoGasProduction
  rdf:type rdf:Property ;
  rdfs:label "has no gas production"^^xsd:string ;
  rdfs:subPropertyOf N4L:hasSubstanceProduction ;
.
N4L:hasNoGrowth
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has no growth"^^xsd:string ;
  rdfs:range N4L:NoGrowth ;
  rdfs:subPropertyOf N4L:hasGrowthObservation ;
.
N4L:hasNoRespiration
  rdf:type rdf:Property ;
  rdfs:label "has no respiration"^^xsd:string ;
  rdfs:range N4L:NoRespiration ;
  rdfs:subPropertyOf N4L:hasNoUtilization ;
.
N4L:hasNoUtilization
  rdf:type rdf:Property ;
  rdfs:label "has no utilization"^^xsd:string ;
  rdfs:range N4L:NoUtilization ;
  rdfs:subPropertyOf N4L:hasSubstrateUtilization ;
.
N4L:hasOptimalGrowth
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has optimal growth"^^xsd:string ;
  rdfs:range N4L:OptimalGrowth ;
  rdfs:subPropertyOf N4L:hasGrowth ;
.
N4L:hasOrganismObservation
  rdf:type rdf:Property ;
  rdfs:domain N4L:Strain ;
  rdfs:label "has organism observation"^^xsd:string ;
  rdfs:range N4L:OrganismObservation ;
.
N4L:hasOxygenCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has oxygen condition"^^xsd:string ;
  rdfs:range N4L:OxygenCondition ;
  rdfs:subPropertyOf N4L:hasCondition ;
.
N4L:hasOxygenPhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has oxygen phenotype"^^xsd:string ;
  rdfs:range N4L:OxygenPhenotype ;
  rdfs:subPropertyOf N4L:hasAtomicObservationPhenotype ;
.
N4L:hasOxygenValue
  rdf:type owl:DatatypeProperty ;
  rdfs:domain N4L:OxygenCondition ;
  rdfs:label "has oxygen value"^^xsd:string ;
  rdfs:range xsd:float ;
  rdfs:subPropertyOf N4L:hasEnvironmentalConditionValue ;
.
N4L:hasPHCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has ph condition"^^xsd:string ;
  rdfs:range N4L:PHCondition ;
  rdfs:subPropertyOf N4L:hasCondition ;
.
N4L:hasPHPhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has PHPhenotype"^^xsd:string ;
  rdfs:range N4L:PHPhenotype ;
  rdfs:subPropertyOf N4L:hasAtomicObservationPhenotype ;
.
N4L:hasPhEnvironmentalCondition
  rdf:type owl:DatatypeProperty ;
  rdfs:domain N4L:PHCondition ;
  rdfs:label "has ph environmental condition"^^xsd:string ;
  rdfs:range xsd:float ;
  rdfs:subPropertyOf N4L:hasEnvironmentalConditionValue ;
.
N4L:hasPhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:Strain ;
  rdfs:label "has phenotype"^^xsd:string ;
  rdfs:range N4L:Phenotype ;
  owl:propertyChainAxiom (
      N4L:hasOrganismObservation
      N4L:hasAtomicObservationPhenotype
    ) ;
.
N4L:hasPolarFlagellaDistribution
  rdf:type rdf:Property ;
  rdfs:domain N4L:FlagellaObservation ;
  rdfs:label "has polar flagella distribution"^^xsd:string ;
  rdfs:range N4L:Polar ;
  rdfs:subPropertyOf N4L:hasFlagellaDistribution ;
.
N4L:hasPsychrophilePhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has psychrophile phenotype"^^xsd:string ;
  rdfs:range N4L:Psychrophile ;
  rdfs:subPropertyOf N4L:hasTemperaturePhenotype ;
.
N4L:hasPsychrotolerantPhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has psychrotolerant phenotype"^^xsd:string ;
  rdfs:range N4L:Psychrotolerant ;
  rdfs:subPropertyOf N4L:hasMesophilePhenotype ;
.
N4L:hasResistantPhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has resistant phenotype"^^xsd:string ;
  rdfs:range N4L:Resistant ;
  rdfs:subPropertyOf N4L:hasAntimicrobialPhenotype ;
.
N4L:hasRespiration
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has respiration"^^xsd:string ;
  rdfs:range N4L:Respiration ;
  rdfs:subPropertyOf N4L:hasUtilization ;
.
N4L:hasRespirationOfSubstance
  rdf:type rdf:Property ;
  rdfs:domain N4L:Respiration ;
  rdfs:label "has respiration of substance"^^xsd:string ;
  rdfs:subPropertyOf N4L:hasCellularActivityOfSubstance ;
.
N4L:hasRespirationValue
  rdf:type owl:DatatypeProperty ;
  rdf:type owl:FunctionalProperty ;
  rdfs:domain N4L:Respiration ;
  rdfs:label "has respiration value"^^xsd:string ;
  rdfs:range xsd:boolean ;
  rdfs:subPropertyOf N4L:hasCellularActivityValue ;
.
N4L:hasShapeDiameter
  rdf:type rdf:Property ;
  rdfs:domain N4L:CellShapeObservation ;
  rdfs:label "has shape diameter"^^xsd:string ;
  rdfs:range N4L:ShapeDiameter ;
  rdfs:subPropertyOf N4L:hasFeature ;
.
N4L:hasShapeLong
  rdf:type rdf:Property ;
  rdfs:domain N4L:CellShapeObservation ;
  rdfs:label "has shape long"^^xsd:string ;
  rdfs:range N4L:ShapeLong ;
  rdfs:subPropertyOf N4L:hasFeature ;
.
N4L:hasShapeObservation
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has shape observation"^^xsd:string ;
  rdfs:range N4L:CellShapeObservation ;
  rdfs:subPropertyOf N4L:composedOf ;
.
N4L:hasSingleFlagellaOrdinal
  rdf:type rdf:Property ;
  rdfs:domain N4L:FlagellaObservation ;
  rdfs:label "has single flagella ordinal"^^xsd:string ;
  rdfs:range N4L:Single ;
  rdfs:subPropertyOf N4L:hasFlagellaOrdinal ;
.
N4L:hasStrictAerobePhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has strict aerobe phenotype"^^xsd:string ;
  rdfs:range N4L:StrictAerobe ;
  rdfs:subPropertyOf N4L:hasAerobePhenotype ;
.
N4L:hasStrictAnaerobePhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has strict anaerobe phenotype"^^xsd:string ;
  rdfs:range N4L:StrictAnaerobe ;
  rdfs:subPropertyOf N4L:hasAnaerobePhenotype ;
.
N4L:hasSubOptimalGrowth
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has sub optimal growth"^^xsd:string ;
  rdfs:range N4L:SubOptimalGrowth ;
  rdfs:subPropertyOf N4L:hasGrowth ;
.
N4L:hasSubstanceCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has substance condition"^^xsd:string ;
.
N4L:hasSubstanceGroupCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has substance group condition"^^xsd:string ;
.
N4L:hasSubstanceProduction
  rdf:type rdf:Property ;
  rdfs:label "has substance production"^^xsd:string ;
  rdfs:subPropertyOf N4L:hasCellularActivity ;
.
N4L:hasSubstrateUtilization
  rdf:type rdf:Property ;
  rdfs:label "has substrate utilization"^^xsd:string ;
  rdfs:range N4L:SubstrateUtilization ;
  rdfs:subPropertyOf N4L:hasMetabolism ;
.
N4L:hasSusceptiblePhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has susceptible phenotype"^^xsd:string ;
  rdfs:range N4L:Susceptible ;
  rdfs:subPropertyOf N4L:hasAntimicrobialPhenotype ;
.
N4L:hasTemperatureCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has temperature condition"^^xsd:string ;
  rdfs:range N4L:TemperatureCondition ;
  rdfs:subPropertyOf N4L:hasCondition ;
.
N4L:hasTemperaturePhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has temperature phenotype"^^xsd:string ;
  rdfs:range N4L:TemperaturePhenotype ;
  rdfs:subPropertyOf N4L:hasAtomicObservationPhenotype ;
.
N4L:hasTemperatureValue
  rdf:type owl:DatatypeProperty ;
  rdfs:domain N4L:TemperatureCondition ;
  rdfs:label "has temperature value"^^xsd:string ;
  rdfs:range xsd:float ;
  rdfs:subPropertyOf N4L:hasEnvironmentalConditionValue ;
.
N4L:hasThermophilePhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has thermophile phenotype"^^xsd:string ;
  rdfs:range N4L:Thermophile ;
  rdfs:subPropertyOf N4L:hasTemperaturePhenotype ;
.
N4L:hasThermotolerantPhenotype
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has thermotolerant phenotype"^^xsd:string ;
  rdfs:range N4L:Thermotolerant ;
  rdfs:subPropertyOf N4L:hasMesophilePhenotype ;
.
N4L:hasUninhibitedGrowth
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has uninhibited growth"^^xsd:string ;
  rdfs:range N4L:UninhibitedGrowth ;
  rdfs:subPropertyOf N4L:hasInhibitedGrowthObservation ;
.
N4L:hasUnit
  rdf:type rdf:Property ;
  rdfs:domain rdfs:Resource ;
  rdfs:label "has unit"^^xsd:string ;
.
N4L:hasUtilization
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has utilization"^^xsd:string ;
  rdfs:range N4L:Utilization ;
  rdfs:subPropertyOf N4L:hasSubstrateUtilization ;
.
N4L:hasVariableAcidProduction
  rdf:type rdf:Property ;
  rdfs:label "has variable acid production"^^xsd:string ;
  rdfs:subPropertyOf N4L:hasAcidProduction ;
.
N4L:hasVariableFermentation
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has variable fermentation"^^xsd:string ;
  rdfs:range N4L:VariableFermentation ;
  rdfs:subPropertyOf N4L:hasFermentation ;
.
N4L:hasVariableUtilization
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has variable utilization"^^xsd:string ;
  rdfs:range N4L:VariableUtilization ;
  rdfs:subPropertyOf N4L:hasUtilization ;
.
N4L:hasVeryHighTemperatureCondition
  rdf:type rdf:Property ;
  rdfs:domain N4L:AtomicObservation ;
  rdfs:label "has very high temperature condition"^^xsd:string ;
  rdfs:range N4L:VeryHighTemperatureCondition ;
  rdfs:subPropertyOf N4L:hasTemperatureCondition ;
.
N4L:hasWeakAcidProduction
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has weak acid production"^^xsd:string ;
  rdfs:range N4L:WeakAcidProduction ;
  rdfs:subPropertyOf N4L:hasAcidProduction ;
.
N4L:hasWeakFermentation
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has weak fermentation"^^xsd:string ;
  rdfs:range N4L:WeakFermentation ;
  rdfs:subPropertyOf N4L:hasFermentation ;
.
N4L:hasWeakUtilization
  rdf:type rdf:Property ;
  rdfs:domain N4L:OrganismObservation ;
  rdfs:label "has weak utilization"^^xsd:string ;
  rdfs:range N4L:WeakUtilization ;
  rdfs:subPropertyOf N4L:hasUtilization ;
.
N4L:infersGrowthObservationInAerobicCondition
  rdf:type spin:Template ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "g"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "property"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAerobicCondition ;
            sp:subject [
                sp:varName "g"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject [
                sp:varName "org1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "nog1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "property"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond5"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "nog1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "org1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "org"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "org1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_OrganismObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredGrowthObservationInAerobic_T35" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "g"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAerobicCondition_T35" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                  sp:predicate N4L:hasOrganismObservation ;
                  sp:subject [
                      sp:varName "org1"^^xsd:string ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "g1"^^xsd:string ;
                    ] ;
                  sp:predicate [
                      sp:varName "property"^^xsd:string ;
                    ] ;
                  sp:subject [
                      sp:varName "obs1"^^xsd:string ;
                    ] ;
                ]
                [
                  sp:object [
                      sp:varName "cond2"^^xsd:string ;
                    ] ;
                  sp:predicate [
                      sp:varName "otherTemplateProperty"^^xsd:string ;
                    ] ;
                  sp:subject [
                      sp:varName "g1"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "og11"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "property"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond11"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAerobicCondition ;
                      sp:subject [
                          sp:varName "og11"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T35: infers observation ({?property}, N4L:hasAerobicCondition) based on ({?property}, {?templateProperty}) or ({?property}, {?otherTemplateProperty})."^^xsd:string ;
  rdfs:label "infers growth observation in aerobic condition"^^xsd:string ;
  rdfs:subClassOf spin:Templates ;
.
N4L:infersNoUtilizationBasedOnNoAssimilationAndSubstanceGroupMembership
  rdf:type spin:Template ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "act"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoAssimilation ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject [
                sp:varName "act"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "csGroup"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "csGroup"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "act1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivity ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:NoAssimilation ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "act1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject [
                sp:varName "act1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "act1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "act"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "sub1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_sourceGroup" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "csGroup"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T17: infers no utilization based on no assimilation and property {?templateProperty}"^^xsd:string ;
  rdfs:label "infers no utilization based on no assimilation and substance group membership"^^xsd:string ;
  rdfs:subClassOf spin:Templates ;
.
N4L:infersOxygenPhenotypeBasedOnAerobicAndOneOtherCondition
  rdf:type spin:Template ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "og3"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond3"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "fifthTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "og3"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "sixthTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "og1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAerobicCondition ;
            sp:subject [
                sp:varName "og1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "secondTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thirdTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "og2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOxygenPhenotype" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOxygenGrowthObservation" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og3"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOxygenGrowthCondition" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond3"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "og3"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "otherTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond3"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "fifthTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "og3"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "p"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "sixthTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "og1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:composedOf ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond1"^^xsd:string ;
                        ] ;
                      sp:predicate sp:arg1 ;
                      sp:subject [
                          sp:varName "og1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "og12"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "property"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:fifthTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:secondTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:sixthTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:thirdTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate sp:arg1 ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T31: Infers {?sixthTemplateProperty} and ({?otherTemplateProperty}, {?fifthTemplateProperty}) based on ({?templateProperty}, N4L:hasAerobicCondition) and ({?secondTemplateProperty}, {?thirdTemplateProperty})"^^xsd:string ;
  rdfs:label "infers oxygen phenotype based aerobic and one other condition"^^xsd:string ;
  rdfs:subClassOf spin:Templates ;
.
N4L:infersOxygenPhenotypeBasedOnOneCondition
  rdf:type spin:Template ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "g"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "property"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAerobicCondition ;
            sp:subject [
                sp:varName "g"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "sixthTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "og1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thirdTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "og1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOxygenPhenotype_T23" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredGrowthObservationInAerobic_T23" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "g"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAerobicCondition_T23" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "g"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "property"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasAerobicCondition ;
                      sp:subject [
                          sp:varName "g"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "p"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "sixthTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:sixthTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:thirdTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T23: Infers {?sixthTemplateProperty} and ({?property}, N4L:hasAerobicCondition) based on ({?templateProperty}, {?thirdTemplateProperty})."^^xsd:string ;
  rdfs:label "infers oxygen phenotype based on one condition"^^xsd:string ;
  rdfs:subClassOf spin:Templates ;
.
N4L:infersOxygenPhenotypeBasedOnThreeConditions
  rdf:type spin:Template ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "sixthTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "og1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "secondTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og3"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thirdTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "og1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "fourthTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "og2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond3"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "fifthTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "og3"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOxygenPhenotype" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "p"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "sixthTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:fifthTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:fourthTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:secondTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:sixthTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:thirdTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T24: Infers {?sixthTemplateProperty} phenotype based on ({?templateProperty}, {?thirdTemplateProperty}), ({?secondTemplateProperty},{?fourthTemplateProperty}), and ({?otherTemplateProperty},{?fifthTemplateProperty})."^^xsd:string ;
  rdfs:label "infers oxygen phenotype based on three conditions"^^xsd:string ;
  rdfs:subClassOf spin:Templates ;
.
N4L:infersOxygenPhenotypeBasedOnTwoConditions
  rdf:type spin:Template ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "og3"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond3"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "fifthTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "og3"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "sixthTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "og1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thirdTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "og1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "secondTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "fourthTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "og2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOxygenPhenotype_T25" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOxygenGrowthObservation_T25" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "og3"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredOxygenGrowthCondition_T25" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond3"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "og31"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "otherTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond31"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "fifthTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "og31"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "p2"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "sixthTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "p1"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "property"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:fifthTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:fourthTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:secondTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:sixthTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:thirdTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate arg:property ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T25: Infers {?sixthTemplateProperty} and observation ({?otherTemplateProperty}, {?fifthTemplateProperty}), based on ({?templateProperty}, {?thirdTemplateProperty}), and ({?secondTemplateProperty}, {?fourthTemplateProperty})."^^xsd:string ;
  rdfs:label "infers oxygen phenotype based on two conditions"^^xsd:string ;
  rdfs:subClassOf spin:Templates ;
.
N4L:infersPHPhenotype
  rdf:type spin:Template ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "s1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "secondTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "og"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredPHPhenotype_T26" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "s1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "s2"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "secondTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:secondTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T26: Infers {?secondTemplateProperty} based on observation ({?templateProperty}, {?otherTemplateProperty})."^^xsd:string ;
  rdfs:label "infers PHPhenotype"^^xsd:string ;
  rdfs:subClassOf spin:Templates ;
.
N4L:infersStrictAnaerobeBasedOnAerobicCondition
  rdf:type spin:Template ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "ng1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond6"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasMicroaerobicCondition ;
            sp:subject [
                sp:varName "ng1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "ng2"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasNoGrowth ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond5"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAirCondition ;
            sp:subject [
                sp:varName "ng2"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasStrictAnaerobePhenotype ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "og1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thirdTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "og1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "secondTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond2"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "fourthTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "og2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredStrictAnaerobePhenotype_T27" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredNoGrowthInMicroaerobic_T27" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "ng1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredNoGrowthInAir_T27" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "ng2"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredMicroaerobicCondition_T27" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond6"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredAirCondition_T27" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cond5"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "p"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasStrictAnaerobePhenotype ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "og4"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "sixthTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond4"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "fifthTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "og4"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "og3"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "otherTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "cond3"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "seventhTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "og3"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:fifthTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:fourthTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:secondTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:seventhTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:sixthTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:thirdTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T27: Infers N4L:hasStrictAnaerobePhenotype based on ({?templateProperty}, {?thirdTemplateProperty}) and ({?secondTemplateProperty}, {?fourthTemplateProperty})."^^xsd:string ;
  rdfs:label "infers strict anaerobe based on aerobic condition"^^xsd:string ;
  rdfs:subClassOf spin:Templates ;
.
N4L:infersSubPropertyBasedOnRangeType
  rdf:type spin:Template ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "object"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "valueType"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "object"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "object"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "valueType"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "object"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "object"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "otherTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:subject spin:_this ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate spl:valueType ;
      spl:valueType rdfs:Class ;
    ] ;
  spin:labelTemplate "T28: Infers {?otherTemplateProperty} from {?templateProperty} and {?valueType}."^^xsd:string ;
  rdfs:label "infers sub property based on range side"^^xsd:string ;
  rdfs:subClassOf spin:Templates ;
.
N4L:infersTemperaturePhenotypeBasedOnOneCondition
  rdf:type spin:Template ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "sixthTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "og1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thirdTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "og1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredTemperaturePhenotype_T29" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object [
                          sp:varName "p"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "sixthTemplateProperty"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "obs1"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:sixthTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:thirdTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T29: Infers {?sixthTemplateProperty} phenotype based on observation ({?templateProperty}, {?thirdTemplateProperty})"^^xsd:string ;
  rdfs:label "infers temperature phenotype based on one condition"^^xsd:string ;
  rdfs:subClassOf spin:Templates ;
.
N4L:infersTemperaturePhenotypeBasedOnTwoConditions
  rdf:type spin:Template ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "p"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "og"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "secondTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "og"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "og1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "thirdTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cond1"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "fourthTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "og1"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "obs1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredTemperaturePhenotype_T30" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "p"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:notExists ;
                sp:elements (
                    [
                      sp:object [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                      sp:predicate N4L:hasOrganismObservation ;
                      sp:subject [
                          sp:varName "org1"^^xsd:string ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "s2"^^xsd:string ;
                        ] ;
                      sp:predicate [
                          sp:varName "templateProperty"^^xsd:string ;
                        ] ;
                      sp:subject [
                          sp:varName "obs2"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:fourthTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:secondTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:thirdTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T30: Infers {?templateProperty} phenotype based on observations ({?otherTemplateProperty}, {?secondTemplateProperty}), and ({?thirdTemplateProperty}, {?fourthTemplateProperty})."^^xsd:string ;
  rdfs:label "infers temperature phenotype based on two conditions"^^xsd:string ;
  rdfs:subClassOf spin:Templates ;
.
N4L:infersUtilizationBasedOnAssimilationAndSubstanceGroupMembership
  rdf:type spin:Template ;
  spin:body [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obs"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "act"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasAssimilation ;
            sp:subject [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject [
                sp:varName "act"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "cs"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "otherTemplateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "csGroup"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "csGroup"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasOrganismObservation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "act1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivity ;
            sp:subject [
                sp:varName "obs1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object N4L:Assimilation ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "act1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:predicate N4L:hasCellularActivityOfSubstance ;
            sp:subject [
                sp:varName "act1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "type"^^xsd:string ;
              ] ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "sub1"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "?0"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject [
                sp:varName "type"^^xsd:string ;
              ] ;
          ]
          [
            sp:object owl:Restriction ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "group"^^xsd:string ;
              ] ;
            sp:predicate owl:allValuesFrom ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "templateProperty"^^xsd:string ;
              ] ;
            sp:predicate owl:onProperty ;
            sp:subject [
                sp:varName "?0"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "sub1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredBiologicalRole_T15" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "cs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type sp:str ;
                        sp:arg1 [
                            sp:varName "sub1"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "_inferredSourceGroup_T15" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "csGroup"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "sub1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "sub"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "obs1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "obs"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "act1"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "act"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:otherTemplateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spin:thisUnbound "true"^^xsd:boolean ;
      spl:predicate N4L:templateProperty ;
      spl:valueType rdf:Property ;
    ] ;
  spin:labelTemplate "T15: infers utilization and biological role {?otherTemplateProperty} based on {?templateProperty} and assimilation cellular activity."^^xsd:string ;
  rdfs:label "infers utilization based on assimilation and substance group membership"^^xsd:string ;
  rdfs:subClassOf spin:Templates ;
.
media:Oxygen
  rdf:type rdfs:Class ;
  rdfs:label "Oxygen"^^xsd:string ;
  rdfs:subClassOf rdfs:Resource ;
.
N4L:modifies
  rdf:type rdf:Property ;
  rdfs:domain N4L:Modifier ;
  rdfs:label "modifies"^^xsd:string ;
  rdfs:range N4L:Feature ;
.
N4L:otherTemplateProperty
  rdf:type rdf:Property ;
.
N4L:secondTemplateProperty
  rdf:type rdf:Property ;
  rdfs:label "second template predicate"^^xsd:string ;
.
N4L:seventhTemplateProperty
  rdf:type rdf:Property ;
  rdfs:label "seventh template property"^^xsd:string ;
.
N4L:sixthTemplateProperty
  rdf:type rdf:Property ;
  rdfs:label "sixth template property"^^xsd:string ;
.
N4L:templateProperty
  rdf:type rdf:Property ;
  rdfs:label "property"^^xsd:string ;
.
N4L:thirdTemplateProperty
  rdf:type rdf:Property ;
  rdfs:label "third template property"^^xsd:string ;
.
<http://dx.doi.org/10.1601/media#hasSubstanceConcentrationValue>
  rdfs:range xsd:float ;
.
arg:property
  rdf:type rdf:Property ;
  rdfs:label "property"^^xsd:string ;
  rdfs:subPropertyOf sp:arg ;
.
rdfs:subClassOf
  rdf:type owl:TransitiveProperty ;
.
_:b16527
  rdf:type spl:Argument ;
  spin:thisUnbound "true"^^xsd:boolean ;
  spl:predicate N4L:templateProperty ;
  spl:valueType rdf:Property ;
.
[
  sp:varName "obs1"^^xsd:string ;
].
[
  sp:varName "obs1"^^xsd:string ;
].
[
  sp:varName "obs1"^^xsd:string ;
].
[
  sp:varName "obs1"^^xsd:string ;
].
[
  sp:varName "obs1"^^xsd:string ;
].
[
  sp:varName "obs1"^^xsd:string ;
].
[
  sp:varName "obs1"^^xsd:string ;
].
[
  sp:varName "obs1"^^xsd:string ;
].
[
  sp:varName "obs1"^^xsd:string ;
].
[
  sp:varName "obs2"^^xsd:string ;
].
