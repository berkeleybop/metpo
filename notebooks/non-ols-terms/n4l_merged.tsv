?class	?labels	?synonyms	?definitions
<http://doi.org/10.1601/AcidProduction>	"Acid production"		
<http://doi.org/10.1601/Acidophile>	"Acidophile"		
<http://doi.org/10.1601/Aerobe>	"Aerobe"		
<http://doi.org/10.1601/Aerobic>	"Aerobic"		
<http://doi.org/10.1601/AerobicAcidProduction>	"Aerobic acid production"		
<http://doi.org/10.1601/AerotolerantAnaerobe>	"Aerotolerant anaerobe"		
<http://doi.org/10.1601/Air>	"Air"		
<http://doi.org/10.1601/Alkalophile>	"Alkalophile"		
<http://doi.org/10.1601/AnabolicReaction>	"Energy source"		
<http://doi.org/10.1601/Anaerobe>	"Anaerobe"		
<http://doi.org/10.1601/AnaerobicRespiration>	"Anaerobic respiration"		
<http://doi.org/10.1601/Anoxic>	"Anoxic"		
<http://doi.org/10.1601/AntimicrobialPhenotype>	"Antimicrobial phenotype"		
<http://doi.org/10.1601/AntimicrobialPhenotypeVsAntimicrobialGroupConstraint>	"Antimicrobial Phenotype Vs Antimicrobial Group Constraint | T2: Strain has {?templateProperty} to a chemical entity, but that chemical entity is not member of an antimicrobial group."		
<http://doi.org/10.1601/AntimicrobialPhenotypeVsMixture>	"Antimicrobial phenotype vs mixture | T3: Strain has {?templateProperty} to a mixture (not including media), but that mixture contains a chemical entity is not member of an antimicrobial group."		
<http://doi.org/10.1601/Assimilation>	"Assimilate"		
<http://doi.org/10.1601/AssimilationAcidAndGasProduction>	"Assimilation acid and gas production | T4: Strain has {?templateProperty} and {?otherTemplateProperty} of the same substance."		
<http://doi.org/10.1601/AtomicObservation>	"Atomic observation"		
<http://doi.org/10.1601/Carboxysome>	"Carboxysome"		
<http://doi.org/10.1601/CatabolicReaction>	"Catabolic reaction"		
<http://doi.org/10.1601/CellShapeModifier>	"Cell shape modifier"		
<http://doi.org/10.1601/CellShapeObservation>	"Shape observation"		
<http://doi.org/10.1601/CellularActivity>	"Cellular activity"		
<http://doi.org/10.1601/CellularActivityVsMembershipOfSubstanceGroup>	"Cellular activity vs membership of substance group | T18: Strain can not have property {?templateProperty} of a substance that is member of a group over property {?otherTemplateProperty}."		
<http://doi.org/10.1601/CellularActivityVsNoMembershipOfSubstanceGroup>	"Cellular activity vs substance group membership | T16: Strain can not have observation ({?templateProperty}) of a substance {?type} that is not member of {?otherTemplateProperty}."		
<http://doi.org/10.1601/Colony>	"Colony"		
<http://doi.org/10.1601/Condition>	"Condition"		
<http://doi.org/10.1601/DirectObservation>	"Direct observation"		
<http://doi.org/10.1601/Disc>	"Disk"		
<http://doi.org/10.1601/DisjointnessCellularActivityAndSubstance>	"disjointness cellular activity and substance | T12: Strain can not have property {?templateProperty} of {?valueType} substance."		
<http://doi.org/10.1601/DisjointnessOfGrowthObservation>	"Disjointness of growth observation | T1: Given strain can not have ({?templateProperty}) and ({?secondTemplateProperty}) under condition property {?otherTemplateProperty}"		
<http://doi.org/10.1601/DisjointnessOfGrowthObservationsTemperatureCondition>	"T50: Strain can not have observations ({?templateProperty} and {?secondTemplateProperty}) under the same {?valueType} conditions. | Disjointness of growth observations temperature condition"		
<http://doi.org/10.1601/DisjointnessOfOptimalGrowthInTwoConditions>	"T34: Strain can not have observation ({?templateProperty},{?otherTemplateProperty}) and observation ({?secondTemplateProperty}, {?thirdTemplateProperty}).  | Disjointness of optimal growth in two conditions"		
<http://doi.org/10.1601/DisjointnessOfPhenotype>	"Disjointness of phenotype | T9: Strain {?this} can not have {?valueType} and {?defaultValue} phenotype."		
<http://doi.org/10.1601/DisjointnessOfPhenotypeAndCellularActivityOfSubstance>	"Disjointness of phenotype and cellular activity of substance | T13: Given strain can not have {?valueType} phenotype and observation ({?templateProperty}, {?defaultValue})."		
<http://doi.org/10.1601/DisjointnessOfPhenotypeAndGrowthCondition>	"T7: Strain can not have  {?valueType} phenotype and observation ({?templateProperty}, {?otherTemplateProperty}). | Disjointness of phenotype and growth condition"		
<http://doi.org/10.1601/DisjointnessOfSubstanceGroup>	"Disjointness of substance group | T20: A strain has an observation for a substance that can not be member of {?templateProperty} and {?otherTemplateProperty} groups."		
<http://doi.org/10.1601/DocumentResource>	"Document resource"		
<http://doi.org/10.1601/ExperimentalEnvironment>	"Environment"		
<http://doi.org/10.1601/ExtremeHighTemperatureCondition>	"Extreme high temperature condition"		
<http://doi.org/10.1601/ExtremeLowTemperatureCondition>	"Extreme low temperature condition"		
<http://doi.org/10.1601/ExtremePsychrophile>	"Extreme psychrophile"		
<http://doi.org/10.1601/FacultativeAnaerobe>	"Facultative anaerobe"		
<http://doi.org/10.1601/Feature>	"Feature"		
<http://doi.org/10.1601/Fermentation>	"Fermentation"		
<http://doi.org/10.1601/FermentationRespirationOfTheSameSubstance>	"T5: Given strain can not have {?templateProperty} of substance and {?otherTemplateProperty} of the same substance (only for those who are members of organic compound group)."		
<http://doi.org/10.1601/FlagellaDistribution>	"Flagella distribution"		
<http://doi.org/10.1601/FlagellaFeature>	"Flagella feature"		
<http://doi.org/10.1601/FlagellaObservation>	"Flagella observation"		
<http://doi.org/10.1601/FlagellaOrdinal>	"Flagella ordinal"		
<http://doi.org/10.1601/Flagellation>	"Flagellation"		
<http://doi.org/10.1601/FormOfMotility>	"Form of motility"		
<http://doi.org/10.1601/GasProduction>	"Gas production"		
<http://doi.org/10.1601/GasVacuole>	"Gas vacuole"		
<http://doi.org/10.1601/Gliding>	"Gliding"		
<http://doi.org/10.1601/Growth>	"growth"		
<http://doi.org/10.1601/GrowthObservation>	"Growth observation"		
<http://doi.org/10.1601/GrowthObservationInAerobicAndOneOtherCondition>	"T63: Given strain has observations ({?thirdTemplateProperty},  {?fourthTemplateProperty})  and ({?templateProperty},  hasAerobicCondition). Aerobic condition may be defined more precelly as air or microaerobic. | Growth observation aerobic and one other condition"		
<http://doi.org/10.1601/GrowthObservationInConditionUnderCellularActivityForSubstance>	"Growth in anoxic condition under cellular activity for oxygen | T22: Strain can not have observation ({?secondTemplateProperty}, {?thirdTemplateProperty}) and {?templateProperty} for {?defaultValue}."		
<http://doi.org/10.1601/GrowthObservationOfTheSameSubstance>	"Growth condition of the same substance | T8: Given strain can not have {?templateProperty} and {?otherTemplateProperty} of the same substance."		
<http://doi.org/10.1601/HighPHCondition>	"High PHCondition"		
<http://doi.org/10.1601/HighTemperatureCondition>	"High temperature condition"		
<http://doi.org/10.1601/HighlyMotile>	"Highly motile"		
<http://doi.org/10.1601/Hyperthermophile>	"Hyperthermophile"		
<http://doi.org/10.1601/InclusionBodyObservation>	"Inclusion body observation"		
<http://doi.org/10.1601/IndirectObservation>	"Indirect observation"		
<http://doi.org/10.1601/LipidDroplet>	"Lipid droplet"		
<http://doi.org/10.1601/LowPHCondition>	"Low PHCondition"		
<http://doi.org/10.1601/LowTemperatureCondition>	"Low temperature condition"		
<http://doi.org/10.1601/Magnetosome>	"Magnetosome"		
<http://doi.org/10.1601/Mesophile>	"Mesophile"		
<http://doi.org/10.1601/Metabolism>	"Metabolism"		
<http://doi.org/10.1601/MetabolismPhenotype>	"Metabolism phenotype"		
<http://doi.org/10.1601/Method>	"Method"		
<http://doi.org/10.1601/Microaerobic>	"Microaerobic"		
<http://doi.org/10.1601/Microaerophilic>	"Microaerophilic"		
<http://doi.org/10.1601/Microorganism>	"Microorganism"		
<http://doi.org/10.1601/Microscopy>	"Microscopy"		
<http://doi.org/10.1601/MidRangeTemperatureCondition>	"Mid range temperature condition"		
<http://doi.org/10.1601/ModerateHighTemperatureCondition>	"Moderate high temperature condition"		
<http://doi.org/10.1601/ModerateLowTemperatureCondition>	"Moderate low temperature condition"		
<http://doi.org/10.1601/Modifier>	"Modifier"		
<http://doi.org/10.1601/Motile>	"Motile"		
<http://doi.org/10.1601/MotilityModifier>	"Motility modifier"		
<http://doi.org/10.1601/MotilityObservation>	"Motility"		
<http://doi.org/10.1601/NeutralPHCondition>	"Neutral PHCondition"		
<http://doi.org/10.1601/Neutrophile>	"Neutrophile"		
<http://doi.org/10.1601/NoAcidProduction>	"No acid production"		
<http://doi.org/10.1601/NoAssimilation>	"No assimilate"		
<http://doi.org/10.1601/NoFermentation>	"No fermentation"		
<http://doi.org/10.1601/NoGasProduction>	"No gas production"		
<http://doi.org/10.1601/NoGrowth>	"No growth"		
<http://doi.org/10.1601/NoRespiration>	"No respiration"		
<http://doi.org/10.1601/NoUtilization>	"No utilization"		
<http://doi.org/10.1601/NoUtilizationVsBiologicalRole>	"T6: Strain can not have {?otherTemplateProperty} of a substance {?type} that has property {?templateProperty} as biological role. | No utilization vs biological role"		
<http://doi.org/10.1601/NonMotile>	"Non motile"		
<http://doi.org/10.1601/None>	"None"		
<http://doi.org/10.1601/OptimalGrowth>	"Optimal growth"		
<http://doi.org/10.1601/OptimalGrowthUnderDifferentCondition>	"Optimal growth under different condition | T51: Strain can not have observations N4L:OptimalGrowth for different properties {?templateProperty} and {?otherTemplateProperty}."		
<http://doi.org/10.1601/Organism>	"Organism"		
<http://doi.org/10.1601/OrganismObservation>	"Organism observation"		
<http://doi.org/10.1601/OxygenCondition>	"Oxygen condition"		
<http://doi.org/10.1601/OxygenPhenotype>	"Oxygen phenotype"		
<http://doi.org/10.1601/PHB>	"Poly-Î²-hydroxybutyrate Granules"		
<http://doi.org/10.1601/PHCondition>	"PHCondition"		
<http://doi.org/10.1601/PHPhenotype>	"PHPhenotype"		
<http://doi.org/10.1601/Phenotype>	"Phenotype"		
<http://doi.org/10.1601/Polar>	"Polar"		
<http://doi.org/10.1601/Polyglucoside>	"Polyglucoside"		
<http://doi.org/10.1601/Polyphosphate>	"Polyphosphate"		
<http://doi.org/10.1601/Psychrophile>	"Psychrophile"		
<http://doi.org/10.1601/Psychrotolerant>	"Psychrotolerant"		
<http://doi.org/10.1601/RangeOfGrowthCondition>	"T14: Strain has observation ({?templateProperty}, {?arg1}) with environmental property {?secondTemplateProperty} that is out of  range ({?valueType}, {?defaultValue}). | Range of growth condition"		
<http://doi.org/10.1601/Resistant>	"Resistant"		
<http://doi.org/10.1601/Respiration>	"Respiration"		
<http://doi.org/10.1601/ShapeDiameter>	"Shape diameter"		
<http://doi.org/10.1601/ShapeFeature>	"Shape feature"		
<http://doi.org/10.1601/ShapeLong>	"Shape long"		
<http://doi.org/10.1601/ShapeModifier>	"Shape modifier"		
<http://doi.org/10.1601/Single>	"Single"		
<http://doi.org/10.1601/StorageGranule>	"Storage granule"		
<http://doi.org/10.1601/Strain>	"Strain"		
<http://doi.org/10.1601/StrictAerobe>	"Strict aerobe"		
<http://doi.org/10.1601/StrictAnaerobe>	"Strict anaerobe"		
<http://doi.org/10.1601/Strip>	"Strip"		
<http://doi.org/10.1601/SubOptimalGrowth>	"Sub optimal growth"		
<http://doi.org/10.1601/SubstanceProduction>	"Substance production observation"		
<http://doi.org/10.1601/SubstrateUtilization>	"Carbon source utilization"		
<http://doi.org/10.1601/SulfurGranules>	"Sulfur granules"		
<http://doi.org/10.1601/Susceptible>	"Susceptible"		
<http://doi.org/10.1601/TemperatureCondition>	"Temperature condition"		
<http://doi.org/10.1601/TemperaturePhenotype>	"Temperature phenotype"		
<http://doi.org/10.1601/Thermophile>	"Thermophile"		
<http://doi.org/10.1601/Thermotolerant>	"Thermotolerant"		
<http://doi.org/10.1601/Utilization>	"Utilization"		
<http://doi.org/10.1601/UtilizationOfGroupMembers>	"T52: Strain has utilization or no utilization for a substance that is member of a group over property {?templateProperty} .  | Utilization of group members"		
<http://doi.org/10.1601/UtilizationVsBiologicalRole>	"T10: Strain has property {?otherTemplateProperty} and {?secondTemplateProperty} of {?type1} substance that has property {?templateProperty} as biological role. | Utilization vs biological role"		
<http://doi.org/10.1601/UtilizationVsNoUtilizationIndependentOfBiologicalRole>	"T62: Strain has property {?otherTemplateProperty} and {?secondTemplateProperty} of {?type1} substance independent of a biological role. | Utilization vs no utilization independent of biological role"		
<http://doi.org/10.1601/UtilizationWithBiologicalRoleAndNotMemberOfGroup>	"Utilization with biological role and not member of group | T11: Strain utilizes substance as {?templateProperty} biological role, but substance is not member of {?otherTemplateProperty}."		
<http://doi.org/10.1601/VariableAcidProduction>	"Variable acid production"		
<http://doi.org/10.1601/VariableFermentation>	"Variably fermentation"		
<http://doi.org/10.1601/VariableUtilization>	"Variable utilization"		
<http://doi.org/10.1601/VeryHighTemperatureCondition>	"Very high temperature condition"		
<http://doi.org/10.1601/Vibrio>	"Vibrio"		
<http://doi.org/10.1601/WeakAcidProduction>	"Weak acid production"		"This term sould be revised to WeakProductionAcid"
<http://doi.org/10.1601/WeakFermentation>	"Weak fermentation"		
<http://doi.org/10.1601/WeakUtilization>	"Weak utilization"		
<http://doi.org/10.1601/infersGrowthObservationInAerobicCondition>	"infers growth observation in aerobic condition | T35: infers observation ({?property}, N4L:hasAerobicCondition) based on ({?property}, {?templateProperty}) or ({?property}, {?otherTemplateProperty})."		
<http://doi.org/10.1601/infersNoUtilizationBasedOnNoAssimilationAndSubstanceGroupMembership>	"infers no utilization based on no assimilation and substance group membership | T17: infers no utilization based on no assimilation and property {?templateProperty}"		
<http://doi.org/10.1601/infersOxygenPhenotypeBasedOnAerobicAndOneOtherCondition>	"infers oxygen phenotype based aerobic and one other condition | T31: Infers {?sixthTemplateProperty} and ({?otherTemplateProperty}, {?fifthTemplateProperty}) based on ({?templateProperty}, N4L:hasAerobicCondition) and ({?secondTemplateProperty}, {?thirdTemplateProperty})"		
<http://doi.org/10.1601/infersOxygenPhenotypeBasedOnOneCondition>	"T23: Infers {?sixthTemplateProperty} and ({?property}, N4L:hasAerobicCondition) based on ({?templateProperty}, {?thirdTemplateProperty}). | infers oxygen phenotype based on one condition"		
<http://doi.org/10.1601/infersOxygenPhenotypeBasedOnThreeConditions>	"infers oxygen phenotype based on three conditions | T24: Infers {?sixthTemplateProperty} phenotype based on ({?templateProperty}, {?thirdTemplateProperty}), ({?secondTemplateProperty},{?fourthTemplateProperty}), and ({?otherTemplateProperty},{?fifthTemplateProperty})."		
<http://doi.org/10.1601/infersOxygenPhenotypeBasedOnTwoConditions>	"infers oxygen phenotype based on two conditions | T25: Infers {?sixthTemplateProperty} and observation ({?otherTemplateProperty}, {?fifthTemplateProperty}), based on ({?templateProperty}, {?thirdTemplateProperty}), and ({?secondTemplateProperty}, {?fourthTemplateProperty})."		
<http://doi.org/10.1601/infersPHPhenotype>	"infers PHPhenotype | T26: Infers {?secondTemplateProperty} based on observation ({?templateProperty}, {?otherTemplateProperty})."		
<http://doi.org/10.1601/infersStrictAnaerobeBasedOnAerobicCondition>	"T27: Infers N4L:hasStrictAnaerobePhenotype based on ({?templateProperty}, {?thirdTemplateProperty}) and ({?secondTemplateProperty}, {?fourthTemplateProperty}). | infers strict anaerobe based on aerobic condition"		
<http://doi.org/10.1601/infersSubPropertyBasedOnRangeType>	"infers sub property based on range side | T28: Infers {?otherTemplateProperty} from {?templateProperty} and {?valueType}."		
<http://doi.org/10.1601/infersTemperaturePhenotypeBasedOnOneCondition>	"infers temperature phenotype based on one condition | T29: Infers {?sixthTemplateProperty} phenotype based on observation ({?templateProperty}, {?thirdTemplateProperty})"		
<http://doi.org/10.1601/infersTemperaturePhenotypeBasedOnTwoConditions>	"infers temperature phenotype based on two conditions | T30: Infers {?templateProperty} phenotype based on observations ({?otherTemplateProperty}, {?secondTemplateProperty}), and ({?thirdTemplateProperty}, {?fourthTemplateProperty})."		
<http://doi.org/10.1601/infersUtilizationBasedOnAssimilationAndSubstanceGroupMembership>	"infers utilization based on assimilation and substance group membership | T15: infers utilization and biological role {?otherTemplateProperty} based on {?templateProperty} and assimilation cellular activity."		
<http://doi.org/10.1601/media/AmikacinMezlocillin>	"Amikacin mezlocillin"		
<http://doi.org/10.1601/media/AmoxicillinClavulanate>	"Amoxicillin clavulanate"		
<http://doi.org/10.1601/media/AmpicillinSulbactam>	"ampicillin sulbactam"		
<http://doi.org/10.1601/media/AnaerobicExogenousElectronAcceptorGroup>	"Anaerobic electron acceptor group"		
<http://doi.org/10.1601/media/AntibacterialAgent>	"Antibacterial agent"		
<http://doi.org/10.1601/media/AntimicrobialAgent>	"Antimicrobial agent"		
<http://doi.org/10.1601/media/AntimicrobialEntity>	"Antimicrobial entity"		
<http://doi.org/10.1601/media/AntimicrobialGroup>	"Antimicrobial group"		
<http://doi.org/10.1601/media/AntimicrobialMixture>	"Antimicrobial mixture"		
<http://doi.org/10.1601/media/BiologicalRole>	"Biological role"		
<http://doi.org/10.1601/media/CarbonSource>	"Carbon source"		
<http://doi.org/10.1601/media/ChemicalEntity>	"Chemical entity"		
<http://doi.org/10.1601/media/CodonEncodedAminoAcid>	"Codon encoded amino acid"		
<http://doi.org/10.1601/media/ComplexChemicalEntity>	"Complex chemical entity"		
<http://doi.org/10.1601/media/ComplexSubstance>	"Complex substance"		
<http://doi.org/10.1601/media/Component>	"Component"		
<http://doi.org/10.1601/media/Concentration>	"Concentration"		
<http://doi.org/10.1601/media/DisjointnessOfSubstanceGroupMembership>	"Disjointness of substance group membership | T21: Given substance can not be member of {?arg1} and {?arg2} substance gorups."		
<http://doi.org/10.1601/media/EnergySource>	"Energy source"		
<http://doi.org/10.1601/media/ExogenousElectronAcceptor>	"Electron acceptor"		
<http://doi.org/10.1601/media/ExogenousElectronAcceptorGroup>	"Exogenous electron acceptor group"		
<http://doi.org/10.1601/media/FermentationSubstrate>	"Fermentation substrate"		
<http://doi.org/10.1601/media/ImipenemFosfomycin>	"Imipenem fosfomycin"		
<http://doi.org/10.1601/media/Ingredient>	"Ingredient"		
<http://doi.org/10.1601/media/InorganicCompound>	"Inorganic compound"		
<http://doi.org/10.1601/media/J01A>	"TETRACYCLINES"		
<http://doi.org/10.1601/media/J01AA>	"J01AA"		
<http://doi.org/10.1601/media/J01B>	"AMPHENICOLS"		
<http://doi.org/10.1601/media/J01BA>	"J01BA"		
<http://doi.org/10.1601/media/J01C>	"BETA-LACTAM ANTIBACTERIALS, PENICILLINS"		
<http://doi.org/10.1601/media/J01CA>	"Penicillins with extended spectrum"		
<http://doi.org/10.1601/media/J01CE>	"Beta-lactamase sensitive penicillins"		
<http://doi.org/10.1601/media/J01CF>	"Beta-lactamase resistant penicillins"		
<http://doi.org/10.1601/media/J01CG>	"Beta-lactamase inhibitors"		
<http://doi.org/10.1601/media/J01CR>	"Combinations of penicillins, incl. beta-lactamase inhibitors."		
<http://doi.org/10.1601/media/J01D>	"OTHER BETA-LACTAM ANTIBACTERIALS."		
<http://doi.org/10.1601/media/J01DB>	"First-generation cephalosporins."		
<http://doi.org/10.1601/media/J01DC>	"Second-generation cephalosporins."		
<http://doi.org/10.1601/media/J01DD>	"Third-generation cephalosporins."		
<http://doi.org/10.1601/media/J01DE>	"Fourth-generation cephalosporins."		
<http://doi.org/10.1601/media/J01DF>	"Monobactams."		
<http://doi.org/10.1601/media/J01DH>	"Carbapenems."		
<http://doi.org/10.1601/media/J01DI>	"Other cephalosporins and penems."		
<http://doi.org/10.1601/media/J01E>	"SULFONAMIDES AND TRIMETHOPRIM."		
<http://doi.org/10.1601/media/J01EA>	"Trimethoprim and derivatives."		
<http://doi.org/10.1601/media/J01EB>	"Short-acting sulfonamides."		
<http://doi.org/10.1601/media/J01EC>	" Intermediate-acting sulfonamides."		
<http://doi.org/10.1601/media/J01ED>	"Long-acting sulfonamides."		
<http://doi.org/10.1601/media/J01EE>	"Combinations of sulfonamides and trimethoprim, incl. derivatives."		
<http://doi.org/10.1601/media/J01F>	"MACROLIDES, LINCOSAMIDES AND STREPTOGRAMINS."		
<http://doi.org/10.1601/media/J01FA>	"Macrolides."		
<http://doi.org/10.1601/media/J01FF>	"J01FF"		
<http://doi.org/10.1601/media/J01FG>	"Streptogramins."		
<http://doi.org/10.1601/media/J01G>	"AMINOGLYCOSIDE ANTIBACTERIALS."		
<http://doi.org/10.1601/media/J01GA>	" Streptomycins."		
<http://doi.org/10.1601/media/J01GB>	"Other aminoglycosides."		
<http://doi.org/10.1601/media/J01M>	"QUINOLONE ANTIBACTERIALS."		
<http://doi.org/10.1601/media/J01MA>	"Fluoroquinolones."		
<http://doi.org/10.1601/media/J01MB>	"Other quinolones."		
<http://doi.org/10.1601/media/J01R>	"COMBINATIONS OF ANTIBACTERIALS."		
<http://doi.org/10.1601/media/J01RA>	"Combinations of antibacterials."		
<http://doi.org/10.1601/media/J01X>	"OTHER ANTIBACTERIALS."		
<http://doi.org/10.1601/media/J01XA>	"Glycopeptide antibacterials."		
<http://doi.org/10.1601/media/J01XB>	"Polymyxins."		
<http://doi.org/10.1601/media/J01XC>	"Steroid antibacterials."		
<http://doi.org/10.1601/media/J01XD>	"Imidazole derivatives."		
<http://doi.org/10.1601/media/J01XE>	"Nitrofuran derivatives."		
<http://doi.org/10.1601/media/J01XX>	"Other antibacterials."		
<http://doi.org/10.1601/media/KanamycinEsculin>	"Kanamycin esculin"		
<http://doi.org/10.1601/media/Measure>	"Measure"		
<http://doi.org/10.1601/media/MediaType>	"Media type"		
<http://doi.org/10.1601/media/NitrogenSource>	"Nitrogen source"		
<http://doi.org/10.1601/media/Non-encodedProteinogenicAminoAcid>	"Non-encoded proteinogenic amino acid"		
<http://doi.org/10.1601/media/OrganicCompound>	"Organic compound"		
<http://doi.org/10.1601/media/OtherCarbonCompound>	"Other carbon compound"		
<http://doi.org/10.1601/media/Oxygen>	"Oxygen"		
<http://doi.org/10.1601/media/PhosphorusSource>	"Phosphorus source"		
<http://doi.org/10.1601/media/PiperacillinTazobactam>	"Piperacillin tazobactam"		
<http://doi.org/10.1601/media/SXT>	"SXT"		
<http://doi.org/10.1601/media/Substance>	"Substance"		
<http://doi.org/10.1601/media/SugarAlcohol>	"Sugar alcohol"		
<http://doi.org/10.1601/media/SulfurSource>	"Sulfur source"		
<http://doi.org/10.1601/media/TetracyclineClavulanate>	"Tetracycline clavulanate"		
<http://doi.org/10.1601/media/infersGroupMembership>	"infers group membership | T19: infers {?property} based on group membership of a given chemical entity {?this}."		
<http://spinrdf.org/sp#Add>	"Add"		"A SPARQL UPDATE ADD operation. Uses sp:source and sp:target to represent \"from\" and \"to\" graphs, respectively. Also sp:silent may be true."
<http://spinrdf.org/sp#Aggregation>	"Aggregation"		"Base class of aggregation types (not part of the SPARQL 1.0 standard but supported by ARQ and other engines)."
<http://spinrdf.org/sp#AltPath>	"Alt path"		"An alternative path with the union of sp:path1 and sp:path2."
<http://spinrdf.org/sp#Asc>	"Asc"		"Marker to indicate ascending order."
<http://spinrdf.org/sp#Ask>	"Ask"		"An ASK query that returns true if the condition in the body is met by at least one result set."
<http://spinrdf.org/sp#Avg>	"AVG"		"Represents AVG aggregations."
<http://spinrdf.org/sp#Bind>	"Bind"		"A BIND element."
<http://spinrdf.org/sp#Clear>	"Clear"		"An Update operation that removes all triples from a specified graph. Must specify the graph using sp:graphIRI, or sp:default, sp:named or sp:all. May have the SILENT flag, encoded using sp:silent."
<http://spinrdf.org/sp#Command>	"Command"		"A shared superclass for sp:Query and sp:Update that can be used to specify that the range of property can be either one."
<http://spinrdf.org/sp#Construct>	"Construct"		"A CONSTRUCT-type query that can be used to construct new triples from template triples (head) that use variable bindings from the match patterns (body)."
<http://spinrdf.org/sp#Count>	"COUNT"		"Counts the number of times a variable is used. The variable is stored in the variable property. This might be left blank to indicate COUNT(*)."
<http://spinrdf.org/sp#Create>	"Create"		"An Update operation that creates a new empty graph with a name specified by sp:graphIRI. May have sp:silent set to true."
<http://spinrdf.org/sp#Delete>	"Delete"		"Deprecated - use sp:Modify instead.\n\nRepresents a DELETE FROM (part of SPARQL UPDATE language). The graph IRIs are stored in sp:graphIRI. The template patterns to delete are stored in sp:deletePattern. The WHERE clause is represented using sp:where."
<http://spinrdf.org/sp#DeleteData>	"Delete data"		"An Update operation to delete specific triples. The graph triples are represented using sp:data, which points to an rdf:List of sp:Triples or sp:NamedGraphs."
<http://spinrdf.org/sp#DeleteWhere>	"Delete where"		"An Update operation where the triples matched by the WHERE clause (sp:where) will be the triples deleted."
<http://spinrdf.org/sp#Desc>	"Desc"		"Marker to indicate descending order."
<http://spinrdf.org/sp#Describe>	"Describe"		"A DESCRIBE-type Query."
<http://spinrdf.org/sp#Drop>	"Drop"		"An Update operation that removes a specified graph from the Graph Store. Must specify the graph using sp:graphIRI, or sp:default, sp:named or sp:all. May have the SILENT flag, encoded using sp:silent."
<http://spinrdf.org/sp#Element>	"Element"		"An abstract base class for all pattern elements."
<http://spinrdf.org/sp#ElementGroup>	"Element group"		"Abstract base class of group patterns."
<http://spinrdf.org/sp#ElementList>	"Element list"		"A list of Elements. This class is never instantiated directly as SPIN will use plain rdf:Lists to store element lists."
<http://spinrdf.org/sp#Exists>	"Exists"		"An EXISTS element group."
<http://spinrdf.org/sp#Filter>	"Filter"		"A constraint element that evaluates a given expression to true or false."
<http://spinrdf.org/sp#GroupConcat>	"GROUP_CONCAT"		"Represents GROUP_CONCAT aggregations."
<http://spinrdf.org/sp#Insert>	"Insert"		"Deprecated - use sp:Modify instead.\n\nRepresents a INSERT INTO (part of SPARQL UPDATE language). The graph IRIs are stored in sp:graphIRI. The template patterns to delete are stored in sp:insertPattern. The WHERE clause is represented using sp:where."
<http://spinrdf.org/sp#InsertData>	"Insert data"		"An Update operation to insert specific triples. The graph triples are represented using sp:data, which points to an rdf:List of sp:Triples or sp:NamedGraphs."
<http://spinrdf.org/sp#Let>	"Let"		"Deprecated: use sp:Bind instead.\n\nA variable assignment (LET (?<varName> := <expression>)). Not part of the SPARQL 1.0 standard, but (for example) ARQ."
<http://spinrdf.org/sp#Load>	"Load"		"A LOAD Update operation. The document to load is specified using sp:document, and the (optional) target graph using sp:into."
<http://spinrdf.org/sp#Max>	"MAX"		"Represents MAX aggregations."
<http://spinrdf.org/sp#Min>	"MIN"		"Represents MIN aggregations."
<http://spinrdf.org/sp#Minus>	"Minus"		"A MINUS element group."
<http://spinrdf.org/sp#ModPath>	"Mod path"		"A modified path such as rdfs:subClassOf*."
<http://spinrdf.org/sp#Modify>	"Modify"		"Represents a MODIFY (part of SPARQL UPDATE language). The graph IRIs are stored in sp:graphIRI. The template patterns are stored in sp:deletePattern and sp:insertPattern. The WHERE clause is represented using sp:where."
<http://spinrdf.org/sp#NamedGraph>	"Named graph"		"A named Graph element such as GRAPH <uri> {...}."
<http://spinrdf.org/sp#NotExists>	"Not exists"		"A NOT EXISTS element group."
<http://spinrdf.org/sp#Optional>	"Optional"		"An optional element in a query."
<http://spinrdf.org/sp#OrderByCondition>	"Order by condition"		"An abstract base class for ascending or descending order conditions. Instances of this class (typically bnodes) must have a value for expression to point to the actual values."
<http://spinrdf.org/sp#Path>	"Path"		"The base class of SPARQL property path expressions. Paths are used by sp:TriplePath triple paths."
<http://spinrdf.org/sp#Query>	"Query"		"Abstract base class of the various types of supported queries. Common to all types of queries is that they can have a body (\"WHERE clause\")."
<http://spinrdf.org/sp#ReverseLinkPath>	"Reverse link path"		
<http://spinrdf.org/sp#ReversePath>	"Reverse path"		"A path with reversed direction."
<http://spinrdf.org/sp#Sample>	"SAMPLE"		"Represents SAMPLE aggregations"
<http://spinrdf.org/sp#Select>	"Select query"		"A SELECT-type query that returns variable bindings as its result."
<http://spinrdf.org/sp#SeqPath>	"Seq path"		"A sequence of multiple paths."
<http://spinrdf.org/sp#Service>	"Service"		"A SERVICE call that matches a nested sub-pattern against a SPARQL end point specified by a URI."
<http://spinrdf.org/sp#SubQuery>	"Sub query"		"A nested SELECT query inside of an element list. The query is stored in sp:query."
<http://spinrdf.org/sp#Sum>	"SUM"		"Represents sum aggregations, e.g. SELECT SUM(?varName)..."
<http://spinrdf.org/sp#SystemClass>	"SP System class"		"An \"artificial\" root class that groups all SP classes. This makes them look much less overwhelming in UI tools. Typical end users don't need to see those classes anyway."
<http://spinrdf.org/sp#Triple>	"Triple"		"A base class for TriplePattern and TripleTemplate. This basically specifies that subject, predicate and object must be present."
<http://spinrdf.org/sp#TriplePath>	"Triple path"		"Similar to a TriplePattern, but with a path expression as its predicate. For example, this can be used to express transitive sub-class relationships (?subClass rdfs:subClassOf* ?superClass)."
<http://spinrdf.org/sp#TriplePattern>	"Triple pattern"		"A triple pattern used in the body of a query."
<http://spinrdf.org/sp#TripleTemplate>	"Triple template"		"A prototypical triple used as template in the head of a Construct query. May contain variables."
<http://spinrdf.org/sp#Tuple>	"Tuple"		"Abstract base class for things that have subject and object."
<http://spinrdf.org/sp#UUID>	"UUID"		"Returns a fresh IRI from the UUID URN scheme. Each call of UUID() returns a different UUID. It must not be the \"nil\" UUID (all zeroes). The variant and version of the UUID is implementation dependent."
<http://spinrdf.org/sp#Union>	"Union"		"A UNION group."
<http://spinrdf.org/sp#Update>	"Update"		"Abstract base class to group the various SPARQL UPDATE commands."
<http://spinrdf.org/sp#Values>	"Values"		"A VALUES element. sp:varNames points to an rdf:List of strings for the variables, sp:values to an rdf:List of rdf:Lists with nodes for each variable, in the order defined by the variables list."
<http://spinrdf.org/sp#Variable>	"Variable"		"A variable mentioned in a Triple or expression. Variables are often blank nodes with the variable name stored in ts:name. Variables can also be supplied with a URI in which case the system will attempt to reuse the same variable instance across multiple query definitions."
<http://spinrdf.org/sp#abs>	"abs"		"Returns the absolute value of arg. An error is raised if arg is not a numeric value."
<http://spinrdf.org/sp#add>	"add"		"Returns the arithmetic sum of its operands."
<http://spinrdf.org/sp#and>	"and"		"Return the logical AND between two (boolean) operands."
<http://spinrdf.org/sp#bnode>	"bnode"		"Constructs a blank node that is distinct from all blank nodes in the dataset being queried and distinct from all blank nodes created by calls to this constructor for other query solutions. If the no argument form is used, every call results in a distinct blank node. If the form with a simple literal is used, every call results in distinct blank nodes for different simple literals, and the same blank node for calls with the same simple literal within expressions for one solution mapping. This functionality is compatible with the treatment of blank nodes in SPARQL CONSTRUCT templates."
<http://spinrdf.org/sp#bound>	"bound"		"Returns true if ?arg1 is bound to a value. Returns false otherwise. Variables with the value NaN or INF are considered bound."
<http://spinrdf.org/sp#ceil>	"ceil"		"Returns the smallest (closest to negative infinity) number with no fractional part that is not less than the value of arg. An error is raised if ?arg1 is not a numeric value."
<http://spinrdf.org/sp#coalesce>	"COALESCE"		"Takes any number of arguments, and returns the first bound argument, starting at the left."
<http://spinrdf.org/sp#concat>	"concat"		"The CONCAT built-in function. Creates a single string by concatenating all arguments from left to right. Note that if any one of the arguments is unbound (null) then the whole result string will be unbound."
<http://spinrdf.org/sp#contains>	"contains"		"Returns an xsd:boolean indicating whether or not the value of ?arg1 contains (at the beginning, at the end, or anywhere within) at least one sequence of collation units that provides a minimal match to the collation units in the value of ?arg2, according to the collation that is used."
<http://spinrdf.org/sp#datatype>	"datatype"		"Returns the datatype IRI of argument ?arg1; returns xsd:string if the parameter is a simple literal."
<http://spinrdf.org/sp#day>	"day"		"Extracts the day from a date/time literal."
<http://spinrdf.org/sp#divide>	"divide"		"Returns the arithmetic quotient of its operands."
<http://spinrdf.org/sp#encode_for_uri>	"encode_for_uri"		
<http://spinrdf.org/sp#eq>	"eq"		"Returns true if both arguments are equal."
<http://spinrdf.org/sp#exists>	"EXISTS"		"The filter function EXISTS. The graph pattern is stored in sp:elements."
<http://spinrdf.org/sp#floor>	"floor"		"Returns the largest (closest to positive infinity) number with no fractional part that is not greater than the value of ?arg1. An error is raised if ?arg1 is not a numeric value."
<http://spinrdf.org/sp#ge>	"ge"		"Returns true if ?arg1 >= ?arg2."
<http://spinrdf.org/sp#gt>	"gt"		"Returns true if ?arg1 > arg2."
<http://spinrdf.org/sp#hours>	"hours"		"Extracts the hours from a date/time literal."
<http://spinrdf.org/sp#if>	"IF"		"The SPARQL 1.1 built-in function IF."
<http://spinrdf.org/sp#in>	"IN"		"Checks whether the value on the left (?arg1) is one of the values on the right (?arg2, ?arg3 ...)."
<http://spinrdf.org/sp#iri>	"IRI"		"Creates a IRI resource (node) from a given IRI string (?arg1)."
<http://spinrdf.org/sp#isBlank>	"isBlank"		"Checks whether a given node is a blank node."
<http://spinrdf.org/sp#isIRI>	"isIRI"		"Checks whether a given node is a IRI node."
<http://spinrdf.org/sp#isLiteral>	"isLiteral"		"Checks whether a given node is a literal."
<http://spinrdf.org/sp#isNumeric>	"is numeric"		"Returns true if arg1 is a numeric value. Returns false otherwise. term is numeric if it has an appropriate datatype (see the section Operand Data Types) and has a valid lexical form, making it a valid argument to functions and operators taking numeric arguments."
<http://spinrdf.org/sp#isURI>	"isURI"		"Checks whether a node is a URI."
<http://spinrdf.org/sp#lang>	"lang"		"Returns the language tag of ?arg1, if it has one. It returns \"\" if the literal has no language tag. Node that the RDF data model does not include literals with an empty language tag."
<http://spinrdf.org/sp#langMatches>	"langMatches"		"Returns true if language-tag (first argument) matches language-range (second argument) per the basic filtering scheme defined in [RFC4647] section 3.3.1."
<http://spinrdf.org/sp#lcase>	"LCASE"		"Converts a string to lower case characters."
<http://spinrdf.org/sp#le>	"le"		"Returns true if ?arg1 <= ?arg2."
<http://spinrdf.org/sp#lt>	"lt"		"Returns true if ?arg1 < ?arg2."
<http://spinrdf.org/sp#md5>	"md5"		"Returns the MD5 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case."
<http://spinrdf.org/sp#minutes>	"minutes"		"Extracts the minutes from a date/time literal."
<http://spinrdf.org/sp#month>	"month"		"Extracts the month from a date/time literal."
<http://spinrdf.org/sp#mul>	"mul"		"Returns the arithmetic product of its operands."
<http://spinrdf.org/sp#ne>	"ne"		"Returns true if ?arg1 != ?arg2."
<http://spinrdf.org/sp#not>	"not"		"Returns the boolean negation of the argument."
<http://spinrdf.org/sp#notExists>	"NOT EXISTS"		"The filter function NOT EXISTS. The graph pattern is stored in sp:elements."
<http://spinrdf.org/sp#notIn>	"NOT IN"		"Checks whether the value on the left (?arg1) is none of the values on the right (?arg2, ?arg3 ...)."
<http://spinrdf.org/sp#now>	"now"		"Gets the current date and time as an xsd:dateTime literal."
<http://spinrdf.org/sp#or>	"or"		"Returns the logical OR between two (boolean) operands."
<http://spinrdf.org/sp#rand>	"rand"		"Returns a number between 0 (inclusive) and 1.0e0 (exclusive). Different numbers can be produced every time this function is invoked. Numbers should be produced with approximately equal probability."
<http://spinrdf.org/sp#regex>	"regex"		"Returns true if a string (?arg1) matches the regular expression supplied as a pattern (?arg2) as influenced by the value of flags (?arg3), otherwise returns false."
<http://spinrdf.org/sp#replace>	"replace"		"Replaces each non-overlapping occurrence of a regular expression pattern with a replacement string. Regular expession matching may involve modifier flags."
<http://spinrdf.org/sp#round>	"round"		"Returns the number with no fractional part that is closest to the argument. If there are two such numbers, then the one that is closest to positive infinity is returned. An error is raised if ?arg1 is not a numeric value."
<http://spinrdf.org/sp#sameTerm>	"same term"		"Returns TRUE if ?arg1 and ?arg2 are the same RDF term as defined in Resource Description Framework (RDF): Concepts and Abstract Syntax; returns FALSE otherwise."
<http://spinrdf.org/sp#seconds>	"seconds"		"Extracts the seconds from a date/time literal."
<http://spinrdf.org/sp#sha1>	"sha1"		"Returns the SHA1 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case."
<http://spinrdf.org/sp#sha256>	"sha256"		"Returns the SHA256 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case."
<http://spinrdf.org/sp#sha384>	"sha384"		"Returns the SHA384 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case."
<http://spinrdf.org/sp#sha512>	"sha512"		"Returns the SHA512 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case."
<http://spinrdf.org/sp#str>	"str"		"Returns the lexical form of ?arg1 (a literal); returns the codepoint representation of ?arg1 (an IRI). This is useful for examining parts of an IRI, for instance, the host-name."
<http://spinrdf.org/sp#strafter>	"strafter"		"Returns a literal of the same kind (simple literal, plain literal same language tag, xsd:string) as the first argument arg1. The lexical form of the result is the substring of the value of arg1 that proceeds in arg1 the first occurrence of the lexical form of arg2; otherwise the lexical form of the result is the empty string. If the lexical form of arg2 is the empty string, the lexical form of the result is the emprty string."
<http://spinrdf.org/sp#strbefore>	"strbefore"		"Returns a literal of the same kind (simple literal, plain literal same language tag, xsd:string) as the first argument arg1. The lexical form of the result is the substring of the value of arg1 that precedes in arg1 the first occurrence of the lexical form of arg2; otherwise the lexical form of the result is the empty string. If the lexical form of arg2 is the empty string, the lexical form of the result is the emprty string."
<http://spinrdf.org/sp#strdt>	"strdt"		"Constructs a literal with lexical form and type as specified by the arguments."
<http://spinrdf.org/sp#strends>	"strends"		"Returns true if the lexical form of ?arg1 ends with the lexical form of ?arg2, otherwise it returns false."
<http://spinrdf.org/sp#strlang>	"strlang"		"Takes a string (?arg1) and a language (?arg2) and constructs a literal with a corresponding language tag."
<http://spinrdf.org/sp#strlen>	"strlen"		"Computes the length of a given input string."
<http://spinrdf.org/sp#strstarts>	"strstarts"		"Returns true if the lexical form of ?arg1 begins with the lexical form of ?arg2, otherwise it returns false."
<http://spinrdf.org/sp#struuid>	"struuid"		"Returns a string that is the scheme specific part of UUID. That is, as a simple literal, the result of generating a UUID, converting to a simple literal and removing the initial urn:uuid:."
<http://spinrdf.org/sp#sub>	"sub"		"Returns the arithmetic difference of its operands."
<http://spinrdf.org/sp#substr>	"substr"		"Gets the sub-string of a given string. The index of the first character is 1."
<http://spinrdf.org/sp#timezone>	"timezone"		"Returns the timezone part of ?arg1 as an xsd:dayTimeDuration. Raises an error if there is no timezone."
<http://spinrdf.org/sp#tz>	"tz"		"Returns the timezone part of ?arg1 as a simple literal. Returns the empty string if there is no timezone."
<http://spinrdf.org/sp#ucase>	"UCASE"		"Converts a string to upper case characters."
<http://spinrdf.org/sp#unaryMinus>	"unary minus"		"Returns the operand ?arg1 with the sign reversed. If ?arg1 is positive, its negative is returned; if it is negative, its positive is returned."
<http://spinrdf.org/sp#unaryPlus>	"unary plus"		"Returns the operand ?arg1 with the sign unchanged. Semantically, this operation performs no operation."
<http://spinrdf.org/sp#uri>	"URI"		"Equivalent to IRI."
<http://spinrdf.org/sp#year>	"year"		"Extracts the year from a date/time literal."
<http://spinrdf.org/spin#AskTemplate>	"Ask template"		"A SPIN template that wraps an ASK query."
<http://spinrdf.org/spin#AskTemplates>	"Ask templates"		"Suggested abstract base class for all AskTemplates."
<http://spinrdf.org/spin#Column>	"Column"		"Provides metadata about a column in the result set of a (SPARQL) query, for example of the body queries of SPIN templates. Columns can define human-readable labels that serve as column titles, using rdfs:label."
<http://spinrdf.org/spin#ConstraintViolation>	"Constraint violation"		"An object that can be created by spin:constraints to provide information about a constraint violation."
<http://spinrdf.org/spin#ConstraintViolationLevel>	"Constraint violation level"		"The type of the supported levels of constraint violations, including spin:Error and spin:Warning."
<http://spinrdf.org/spin#ConstructTemplate>	"Construct template"		
<http://spinrdf.org/spin#ConstructTemplates>	"Construct templates"		"Suggested abstract base class for all ConstructTemplates."
<http://spinrdf.org/spin#Function>	"Function"		"Metaclass for functions that can be used in SPARQL expressions (e.g. FILTER or BIND). The function themselves are classes that are instances of this metaclass. Function calls are instances of the function classes, with property values for the arguments."
<http://spinrdf.org/spin#Functions>	"Functions"		"An abstract base class for all defined functions. This class mainly serves as a shared root so that the various instances of the Function metaclass are grouped together."
<http://spinrdf.org/spin#LibraryOntology>	"Library ontology"		"A marker class that can be attached to base URIs (ontologies) to instruct SPIN engines that this ontology only contains a library of SPIN declarations. Library Ontologies should be ignored by SPIN inference engines even if they have been imported by a domain model. For example, a SPIN version of OWL RL may contain all the OWL RL axioms, attached to owl:Thing, but nothing else. However, when executed, these axioms should not be executed over themselves, because we don't want the system to reason about the SPIN triples to speed up things."
<http://spinrdf.org/spin#MagicProperties>	"Magic properties"		"An abstract superclass that can be used to group all spin:MagicProperty instances under a single parent class."
<http://spinrdf.org/spin#MagicProperty>	"Magic property"		
<http://spinrdf.org/spin#Module>	"Module"		"An abstract building block of a SPARQL system. A Module can take Arguments as input and applies them on an input RDF Graph. The Arguments should be declared as spin:constraints."
<http://spinrdf.org/spin#Modules>	"Modules"		"An \"artificial\" parent class for all Functions and Templates."
<http://spinrdf.org/spin#Rule>	"Rule"		"Groups together the kinds of SPARQL commands that can appear as SPIN rules and constructors: CONSTRUCT, DELETE WHERE and DELETE/INSERT. This class is never to be instantiated directly."
<http://spinrdf.org/spin#RuleProperty>	"Rule property"		"The metaclass of spin:rule and its subproperties. spin:RuleProperties can have additional metadata attached to them."
<http://spinrdf.org/spin#SelectTemplate>	"Select template"		"A SPIN template that wraps a SELECT query."
<http://spinrdf.org/spin#SelectTemplates>	"Select templates"		"Suggested abstract base class for all SelectTemplates."
<http://spinrdf.org/spin#TableDataProvider>	"Table data provider"		"An abstraction of objects that can produce tabular data. This serves as a base class of spin:SelectTemplate, because SELECT queries can produce tables with columns for each result variable. However, other types of TableDataProviders are conceivable by other frameworks, and this class may prove as a useful shared foundation.\n\nTableDataProviders can link to definitions of columns via spin:column, and these definitions can inform rendering engines."
<http://spinrdf.org/spin#Template>	"Template"		"The metaclass of SPIN templates. Templates are classes that are instances of this class. A template represents a reusable SPARQL query or update request that can be parameterized with arguments. Templates can be instantiated in places where normally a SPARQL query or update request is used, in particular as spin:rules and spin:constraints."
<http://spinrdf.org/spin#Templates>	"Templates"		"Suggested abstract base class for all Templates."
<http://spinrdf.org/spin#UpdateTemplate>	"Update template"		"A SPIN template that has an UPDATE command as its body."
<http://spinrdf.org/spin#UpdateTemplates>	"Update templates"		"Suggested abstract base class for all UpdateTemplates."
<http://spinrdf.org/spin#ask>	"ask"		"Executes a given ASK query and returns its boolean result. The first argument must point to an sp:Ask or a SPIN template call that has an ASK query as its body. All subsequent argument can come in pairs, with the first one being a variable name and the second its binding.\n\nExample:\n\n    BIND (spin:ask(?query, \"this\", owl:Thing) AS ?result) .\n\nwill execute the sp:Ask behind ?query with the variable ?this pre-bound to owl:Thing."
<http://spinrdf.org/spin#construct>	"construct"		"Evaluates a given sp:Construct or SPIN template call (first argument on the left hand side) and binds the resulting triples to the variables on the right hand side.\n\nExample:\n\n    (?query \"this\" owl:Thing) spin:construct (?s ?p ?o)\n\nwill execute the sp:Construct ?query using the binding of owl:Thing to ?this. The resulting triples will be bound to ?s, ?p and ?o. If any of ?s ?p ?o are bound, it will only return the matching triples."
<http://spinrdf.org/spin#constructViolations>	"construct violations"		"Takes an instance (?arg1) and a class definition (?arg2) and returns all constraint violations for that instance as triples. This magic property basically runs its own constraint checker for defining meta-constraints, and can also be used to classify instances.\n\nExample:\n\n    CONSTRUCT {\n        ?s ?p ?o .\n    }\n    WHERE {\n        (my:Person my:OldPerson) spin:constructViolations (?s ?p ?o) .\n    }"
<http://spinrdf.org/spin#eval>	"eval"		"Evaluates a given SPIN expression or SELECT or ASK query, and returns its result. The first argument must be the expression in SPIN RDF syntax. All other arguments must come in pairs: first a property name, and then a value. These name/value pairs will be pre-bound variables for the execution of the expression."
<http://spinrdf.org/spin#evalInGraph>	"eval in graph"		"Evaluates a given SPIN expression or SELECT or ASK query, and returns its result. The first argument must be the expression in SPIN RDF syntax. This RDF representation of this expression is expected to be in the currently active query graph. The second argument is the URI of a graph that the actual query shall be evaluated against. All other arguments must come in pairs: first a property name, and then a value. These name/value pairs will be pre-bound variables for the execution of the expression."
<http://spinrdf.org/spin#select>	"select"		"Executes a given SELECT or ASK query (or a corresponding SPIN template call) and binds its result rows to the variables specified on the right hand side. May also pre-bind variables for the query execution, using name-value pairs on the left hand side.\n\nExample:\n\n    (?query \"this\" owl:Thing) spin:select (?a ?b)\n\nwill execute the sp:Select or sp:Ask that ?query points to and pre-bind ?this with the value of owl:Thing for the execution of the query. The first result variable of the query's result set will be bound to ?a, the second to ?b etc. If the nodes on the right are bound (or constants) then it will match with the values from the result set.\n\nNote that the first argument on the left hand side can be an instance of a SPIN template (but not the template itself). If you need to execute a template, retrieve its spin:body first."
<http://spinrdf.org/spin#violatesConstraints>	"violates constraints"		"Checks whether a given instance (?arg1) violates any of the constraints defined for a given class (?arg2)."
<http://spinrdf.org/spl#AllArguments>	"All arguments | All spl:Arguments of {?class}"		"Gets a list of all spl:Arguments declared at a given class and its superclasses."
<http://spinrdf.org/spl#Argument>	"Argument | Argument {?predicate} : {?valueType}"		"Provides metadata about an argument of a SPIN Function or Template. Arguments wrap a given rdf:Property (predicate) and specify its value type and whether the argument is optional. When used as spin:constraint, the body of this template will verify that a non-optional value exists and that it has the specified value type. Arguments that have been declared spl:optional true become optional if the type of ?this is spl:UnionTemplate. "
<http://spinrdf.org/spl#Attribute>	"Attribute | Attribute {?predicate} : {?valueType} [{?minCount},{?maxCount}]"		"Defines an \"attribute\" of a class. Attribute definitions bundle common modeling patterns known from object-oriented languages like UML. Each attribute can have min and max cardinality, a value type and a default value. The attribute links a class with one RDF property. This template should be used as spin:constraints on a class to make sure that classes meet the expected cardinalities and valueType constraints.\nIf a model wants to use spl:defaultValue, then it should instantiate the spl:ConstructDefaultValues as a spin:constructor at some root class, such as rdfs:Resource."
<http://spinrdf.org/spl#BooleanFunctions>	"Boolean functions"		"A collection of functions that return a boolean value (true or false)."
<http://spinrdf.org/spl#ConstraintTemplate>	"Constraint template"		"Metaclass for CONSTRUCT templates that create spin:ConstraintViolations and can be used as values of spin:constraint."
<http://spinrdf.org/spl#ConstraintTemplates>	"Constraint templates"		"Abstract superclass of templates that can be used as spin:constraints. The subclasses are expected to construct spin:ConstraintViolations and use ?this to talk about the instances of the associated class."
<http://spinrdf.org/spl#ConstructDefaultValues>	"Construct default values"		"This template can be attached as spin:constructor to a root class such as rdfs:Resource to ensure that SPIN processors assign default values to certain properties. Looks for any templates attached as spin:constraints to the types of ?this and then assigns their declared spl:defaultValues."
<http://spinrdf.org/spl#CountPropertyConstraintTemplates>	"Count property constraint templates"		"Abstract superclass of property constraints that compare the number of values with either min or max count."
<http://spinrdf.org/spl#DateFunctions>	"Date functions"		"A collection of functions that operate on date/time literals."
<http://spinrdf.org/spl#ExistencePropertyPairConstraint>	"Existence property pair constraint | The property {?property} must have a value whenever {?otherProperty} has a value"		
<http://spinrdf.org/spl#InferDefaultValue>	"Default value for {?predicate}: {?defaultValue} | Infer default value"		"Can be used to infer default values for a given subject/predicate combination. This is typically assigned as spin:rule to a class. If ?this does not already have a value for a given property {?predicate}, then this will infer the value {?defaultValue}."
<http://spinrdf.org/spl#LessThanOtherPropertyPairConstraint>	"Less than other property pair constraint | Values of {?property} must be less than the values of {?otherProperty}"		"Can be used to define a constraint between two properties (?property and ?otherProperty) enforcing the invariant that the values of ?property must be smaller than the values of ?otherProperty. For example this can be used to state that ex:startDate must be < ex:endDate."
<http://spinrdf.org/spl#MathematicalFunctions>	"Mathematical functions"		"A collection of functions operating on numbers."
<http://spinrdf.org/spl#MiscFunctions>	"Misc functions"		"A collection of functions that are difficult to categorize."
<http://spinrdf.org/spl#NonExistencePropertyPairConstraint>	"Non-existence property pair constraint | The property {?property} must have no values as long as {?otherProperty} has none"		
<http://spinrdf.org/spl#ObjectCountPropertyConstraint>	"Object count property constraint | The property {?property} must have between {?minCount} and {?maxCount} values"		"Represents a constraint that can be attached to a class to specify that a given property must have between min and max values."
<http://spinrdf.org/spl#OntologyFunctions>	"Ontology functions"		"A collection of functions performing ontology-related operations."
<http://spinrdf.org/spl#PrimaryKeyPropertyConstraint>	"Primary key property constraint | The property {?property} is the primary key and URIs start with {?uriStart}"		"Specifies that the given property is a primary key for instances of the associated class (and its subclasses). If a property has been declared to be the primary key then each instance of the class must have exactly one value for that property. Furthermore, the URIs of those instances must start with a given string (arg:uriStart), followed by the URL-encoded primary key value. For example if arg:uriStart is \"http://example.org/country-\" and the primary key for an instance is \"de\" then the URI must be \"http://example.org/country-de\". Finally, as a result of the URI policy, there can not be any other instance with the same value under the same primary key policy."
<http://spinrdf.org/spl#PropertyConstraintTemplates>	"Property constraint templates"		"Abstract superclass of constraint templates that constrain exactly one property."
<http://spinrdf.org/spl#PropertyPairConstraintTemplates>	"Property pair constraint templates"		"Abstract base class for templates that take two properties as arguments and establish a relationship between them."
<http://spinrdf.org/spl#RangePropertyConstraint>	"Values of {?property} must be within the interval [ {?min} , {?max} ] | Range property constraint"		"Represents a constraint that narrows down a property by a minimum and maximum value compared by <= and >=."
<http://spinrdf.org/spl#RegexPropertyConstraint>	"Values of {?property} must match the regular expression {?pattern} | Regex property constraint"		
<http://spinrdf.org/spl#RunTestCases>	"Run test cases"		"Runs all spl:TestCases on the current model."
<http://spinrdf.org/spl#SPINOverview>	"SPIN Overview"		"Finds all constraints and rules attached to classes in the current graph, using spin:constraint, spin:constructor, spin:rule or their sub-properties. The result set will contain the associated class, the predicate, and the SPIN rule."
<http://spinrdf.org/spl#StringFunctions>	"String functions"		"A collection of functions that return strings."
<http://spinrdf.org/spl#StringLengthPropertyConstraint>	"Values of {?property} must have between {?minLength} and {?maxLength} characters | String length property constraint"		"Represents a constraint that narrows down a property by a minimum and maximum length of the characters of the string representation of its values. This constraint is typically used for string literals, but may also be useful for integers (e.g. 4 digit numbers), and may even be used to limit the length of URIs."
<http://spinrdf.org/spl#TestCase>	"Test case"		"A test to verify that a SPIN function or magic property works as expected, and to generate documentation of example uses of the function. Each TestCase consists of a SPARQL function call or an expression that can be executed with spin:eval, and an expected result. The test framework only needs to execute spin:eval on the expression and compare it with the expected result."
<http://spinrdf.org/spl#TypePropertyConstraint>	"Values of {?property} must have the type {?type} | Type property constraint"		"Represents a constraint that narrows down the rdf:type of the values of a property."
<http://spinrdf.org/spl#URIFunctions>	"URI functions"		"A collection of functions that create URI resources."
<http://spinrdf.org/spl#UnionTemplate>	"Union template"		"This type can be used for templates that serve as the union (or \"collector\") of other templates. Union templates differ from other templates in that all spl:Arguments are optional. This means that union templates can be declared as subclasses of multiple other templates, yet when instantiated, only some of the arguments defined by the superclasses need to be filled in."
<http://spinrdf.org/spl#UniquePropertyValueConstraint>	"Unique property value constraint | Values of {?property} must be unique"		"Reports an error if the given property has a value that is also used elsewhere, for the same property."
<http://spinrdf.org/spl#UntypedObjectPropertyConstraint>	"Untyped object property constraint | Values of {?property} must have a type"		"A generic SPIN template that can be used to declare a constraint that all values of a given property must have an rdf:type."
<http://spinrdf.org/spl#hasArgument>	"has argument"		"Checks if a given module class (?module) has at least one declared spl:Argument."
<http://spinrdf.org/spl#hasPrimaryKey>	"has primary key"		"Checks if a given class has a declared primary key, using spl:PrimaryKeyPropertyConstraint."
<http://spinrdf.org/spl#hasValue>	"hasValue"		"Checks whether a given resource (?arg1) has a given value (?arg3) for a given property (?arg2) or one of the sub-properties of it."
<http://spinrdf.org/spl#hasValueOfType>	"hasValueOfType"		"Checks whether a given subject (?arg1) has at least one value of a given type (?arg3) for a given property (?arg2) or one of its sub-properties."
<http://spinrdf.org/spl#instanceOf>	"{?arg1} instance of {?arg2} | instanceOf"		"Checks whether a given resource (?arg1) has a given type (?arg2). In order to fulfill this condition, there must either be a triple ?arg1 rdf:type ?arg2, or ?instance rdf:type ?subClass where ?subClass is a subclass of ?arg2. If the first argument is a literal, then the second argument must be the matching XSD datatype."
<http://spinrdf.org/spl#isPrimaryKeyPropertyOfInstance>	"is primary key property of instance"		"Checks if a given property is the primary key of a given instance."
<http://spinrdf.org/spl#isUntypedLiteral>	"isUntypedLiteral"		"Checks whether a given literal is untyped. This function was introduced because the built-in datatype operand in SPARQL casts untyped literals to xsd:string, making it impossible to check it this way. This function here uses a work-around using sameTerm instead."
<http://spinrdf.org/spl#max>	"max"		"Takes two arguments and returns the larger one of them."
<http://spinrdf.org/spl#min>	"min"		"Takes two arguments and returns the smaller one of them."
<http://spinrdf.org/spl#object>	"object"		"Gets the object of a given subject (?arg1) / predicate (?arg2) combination.\n\nNote that if multiple values are present then the result might be unpredictably random. Furthermore, if one of the arguments is unbound, it will return the first match of the resulting SPO pattern. These scenarios are strongly discouraged but remain left supported for backward compatibility reasons."
<http://spinrdf.org/spl#objectCount>	"objectCount"		"Gets the number of values of a given property (?arg2) at a given subject (?arg1). The result is the number of matches of (?arg1, ?arg2, ?object)."
<http://spinrdf.org/spl#objectInGraph>	"object in graph"		"Gets the object of a given subject (?arg1) / predicate (?arg2) combination in a given graph ?arg3. Note that if multiple values are present then the result might be unpredictably random."
<http://spinrdf.org/spl#objectSubProp>	"object sub prop"		"Gets the object of a given subject (?arg1) / predicate (?arg2) combination, also taking the sub-properties of ?arg2 into account. Note that if multiple values are present then the result might be unpredictably random."
<http://spinrdf.org/spl#primaryKeyProperty>	"primary key property"		"Gets the primary key property declared for a given class, using spl:PrimaryKeyPropertyConstraint."
<http://spinrdf.org/spl#primaryKeyURIStart>	"primary key URI start"		"Gets the URI start declared as part of a primary key declaration for a given class, using spl:PrimaryKeyPropertyConstraint."
<http://spinrdf.org/spl#relevantPropertyAtClass>	"relevant property at class"		"A magic property that establishes a relationship between properties (left) and classes (right) to determine which properties are \"relevant\" for the class. Relevant means that they have the class in their domain and/or restrictions, including superclasses and sub-properties (unless they define their own domain). Domains consisting of an owl:unionOf are also handled.\n\nNote that the performance of the body of this magic property has been optimized for the case in which the class is given, so ideally use this for queries such as  ?property spl:relevantPropertyAtClass skos:Concept ."
<http://spinrdf.org/spl#subClassOf>	"sub class of"		"Checks whether a given class (?arg1) is a (transitive) sub-class of another class (?arg2)."
<http://spinrdf.org/spl#subPropertyOf>	"sub property of"		"Checks whether a given property (?arg1) is a (transitive) sub-property of another property (?arg2)."
<http://spinrdf.org/spl#subject>	"subject"		"Gets the \"first\" subject of a given predicate (?arg1)/object (?arg2) combination. Note that if multiple values are present then the result might be unpredictably random."
<http://spinrdf.org/spl#subjectCount>	"subjectCount"		"Gets the number of values of a given property (?arg1) at a given object (?arg2). The result is the number of matches of (?subject, ?arg1, ?arg2)."
<http://spinrdf.org/spl#subjectInGraph>	"subject in graph"		"Gets the \"first\" subject of a given predicate (?arg1)/object (?arg2) combination in a given graph (?arg3). Note that if multiple values are present then the result might be unpredictably random."
