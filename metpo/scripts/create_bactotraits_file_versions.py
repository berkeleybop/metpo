#!/usr/bin/env python3
"""
Create BactoTraits File Versions Collection

This script creates a MongoDB collection that documents the different versions
of BactoTraits files in the pipeline, including their common names (euphemisms),
filenames, and characteristics.

Usage:
    uv run python src/scripts/create_bactotraits_file_versions.py

Output:
    - MongoDB collection: bactotraits.file_versions
"""

import click
from pymongo import MongoClient
from datetime import datetime

def create_file_versions():
    """Create file versions metadata collection."""

    versions = [
        {
            "version_key": "provider",
            "common_name": "Provider Version",
            "euphemism": "original provider file",
            "filename": "BactoTraits_databaseV2_Jun2022.csv",
            "description": "Original BactoTraits database v2 from ORDaR institutional repository",
            "source": "https://ordar.otelo.univ-lorraine.fr/files/ORDAR-53/BactoTraits_databaseV2_Jun2022.csv",
            "format": "CSV",
            "delimiter": ";",
            "encoding": "ISO-8859-1",
            "header_structure": "3-row header (category, units, field_names)",
            "field_mapping_key": "provider.field_name",
            "notes": [
                "Official release from Université de Lorraine",
                "Contains periods in field names",
                "Some fields have leading spaces",
                "June 2022 release (v2)"
            ]
        },
        {
            "version_key": "kg_microbe",
            "common_name": "kg-microbe Version",
            "euphemism": "processed TSV file",
            "filename": "BactoTraits.tsv",
            "description": "kg-microbe processed version - cleaned and reformatted for MongoDB",
            "source": "Generated by kg-microbe/BactoTraitsTransform from provider CSV",
            "format": "TSV",
            "delimiter": "\t",
            "encoding": "UTF-8",
            "header_structure": "1-row header",
            "field_mapping_key": "kg_microbe_field",
            "notes": [
                "Removes first 2 header rows (category, units)",
                "Removes strain n° column",
                "Adds ncbitaxon_id column",
                "Converts NA to empty strings",
                "Periods still present in field names",
                "Leading spaces still present in some fields"
            ]
        },
        {
            "version_key": "mongodb",
            "common_name": "MongoDB Version",
            "euphemism": "current MongoDB collection",
            "filename": "N/A (MongoDB collection)",
            "description": "Data as stored in MongoDB after import",
            "source": "Imported from kg-microbe TSV via prepare_bactotraits_for_mongodb.sh",
            "format": "MongoDB BSON documents",
            "delimiter": "N/A",
            "encoding": "UTF-8",
            "header_structure": "MongoDB field names",
            "field_mapping_key": "mongodb_field",
            "collection": "bactotraits.bactotraits",
            "notes": [
                "Periods converted to underscores (GC_<=42.65 → GC_<=42_65)",
                "Leading spaces still present in some fields",
                "Hyphens preserved (non-motile)",
                "Comparison operators preserved (<=, >)",
                "Ready for querying but field names need sanitization"
            ]
        },
        {
            "version_key": "sanitized",
            "common_name": "Sanitized Version",
            "euphemism": "proposed sanitized fields",
            "filename": "N/A (proposed)",
            "description": "Proposed fully sanitized field names for programmatic access",
            "source": "Generated by sanitization rules in field_mappings",
            "format": "Proposed naming standard",
            "delimiter": "N/A",
            "encoding": "UTF-8",
            "header_structure": "Sanitized field names",
            "field_mapping_key": "sanitized_field",
            "notes": [
                "Leading/trailing whitespace removed",
                "Comparison operators normalized (<= → lte_, > → gt_)",
                "Hyphens converted to underscores",
                "Consistent snake_case",
                "URL-safe and JSON-safe",
                "Not yet implemented - requires migration"
            ]
        }
    ]

    return versions


@click.command()
@click.option('--host', default='localhost', help='MongoDB host.')
@click.option('--port', default=27017, type=int, help='MongoDB port.')
@click.option('--db-name', default='bactotraits', help='MongoDB database name.')
@click.option('--collection-name', default='file_versions', help='MongoDB collection name.')
def main(host, port, db_name, collection_name):
    """Main execution function."""
    print("=" * 80)
    print("BactoTraits File Versions Collection Generator")
    print("=" * 80)
    print()

    # Create versions
    versions = create_file_versions()

    print(f"Creating {len(versions)} version documents...")

    # Connect to MongoDB
    client = MongoClient(host, port)
    db = client[db_name]
    collection = db[collection_name]

    # Drop existing collection
    collection.drop()
    print("✓ Dropped existing file_versions collection")

    # Insert versions
    collection.insert_many(versions)
    print(f"✓ Inserted {len(versions)} version documents")

    # Create indexes
    collection.create_index('version_key', unique=True)
    collection.create_index('filename')
    print("✓ Created indexes")

    # Add metadata document
    metadata = {
        "version_key": "_metadata",
        "description": "Metadata about this collection",
        "created_at": datetime.utcnow(),
        "purpose": "Document naming conventions and file versions across BactoTraits pipeline",
        "related_collections": [
            "bactotraits.bactotraits (data)",
            "bactotraits.field_mappings (field name mappings)"
        ]
    }
    collection.insert_one(metadata)
    print("✓ Added metadata document")

    # Print summary
    print("\n" + "=" * 80)
    print("File Versions Summary")
    print("=" * 80)

    for v in versions:
        print(f"\n{v['version_key'].upper()}")
        print(f"  Common name: {v['common_name']}")
        print(f"  Euphemism: {v['euphemism']}")
        print(f"  Filename: {v['filename']}")
        print(f"  Format: {v['format']}")
        print(f"  Field mapping key: {v['field_mapping_key']}")

    print("\n" + "=" * 80)
    print("Quick Reference")
    print("=" * 80)
    print("\nWhen referring to versions in documentation or code:")
    print()
    print("  'provider' or 'provider version'")
    print("    → BactoTraits_databaseV2_Jun2022.csv")
    print("    → field_mappings: provider.field_name")
    print()
    print("  'kg-microbe' or 'processed version'")
    print("    → BactoTraits.tsv")
    print("    → field_mappings: kg_microbe_field")
    print()
    print("  'mongodb' or 'current MongoDB version'")
    print("    → bactotraits.bactotraits collection")
    print("    → field_mappings: mongodb_field")
    print()
    print("  'sanitized' or 'proposed sanitized'")
    print("    → Not yet implemented")
    print("    → field_mappings: sanitized_field")
    print()

    print("=" * 80)
    print("Done!")
    print("=" * 80)
    print()
    print("Query the collection with:")
    print("  mongosh bactotraits --eval 'db.file_versions.find({version_key: {$ne: \"_metadata\"}}).pretty()'")
    print()
    print("Get euphemism for a specific version:")
    print("  mongosh bactotraits --eval 'db.file_versions.findOne({version_key: \"provider\"}, {euphemism: 1, filename: 1})'")
    print()


if __name__ == '__main__':
    main()